{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/Profile.module.sass","components/Profile/MyPosts/Post/MyPost.module.sass","components/Profile/MyPosts/MyPosts.module.sass","components/Profile/ProfileInfo/ProfileInfo.module.sass","components/Profile/MyPosts/Post/MyPost.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileInfoStatus/ProfileStatusWithHook.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","MyPost","className","s","post_block","post","Avatar","src","photo","alt","FormControlLabel","control","Checkbox","icon","FavoriteBorder","checkedIcon","Favorite","name","label","like","post_text","message","maxLength40","maxLengthCreator","MyPosts","React","memo","posts","addPostAC","newPosts","map","p","id","console","log","PostsFormRedux","onSubmit","value","newPostText","posts_item","reduxForm","form","handleSubmit","posts_form","Field","component","Textarea","placeholder","posts_textarea","validate","requiredField","button_block","Button","style","button_size","MyPostsContainer","profilePage","profile","photos","small","ProfileStatusWithHook","useState","editMode","setEditMode","status","setValue","useEffect","autoFocus","onBlur","updateStatus","onChange","e","target","onDoubleClick","ProfileInfo","isOwner","savePhoto","updateProfile","profile_info","avatar","large","width","height","m","button","button_block_dialogs","ProfileInfoDescription","contact","contacts","Preloader","Profile","refreshProfile","main_profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","prevProps","prevState","snapshot","compose","withRouter"],"mappings":"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","file":"static/js/4.6e053306.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\nimport {AppStateType} from \"../redux/redux-store\";\nimport {connect} from \"react-redux\";\nimport {Redirect} from \"react-router-dom\";\n\ntype MapStatePropsType = {\n    isAuth: boolean | null\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n    const RedirectComponent = (props: MapStatePropsType) => {\n        let {isAuth, ...restProps} = props\n        if (!props.isAuth) return <Redirect to={\"/login\"}/>\n        return <Component {...restProps as T}/>\n    }\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n\n    return ConnectedRedirectComponent\n}\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_profile\":\"Profile_main_profile__2-65N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post_block\":\"MyPost_post_block__1cDSp\",\"post\":\"MyPost_post__1TfQL\",\"post_text\":\"MyPost_post_text__3GQ1t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts_form\":\"MyPosts_posts_form__1CsEi\",\"posts\":\"MyPosts_posts__3hM2t\",\"posts_item\":\"MyPosts_posts_item__3rbhL\",\"button_block\":\"MyPosts_button_block__awp2T\",\"posts_textarea\":\"MyPosts_posts_textarea__3kZWx\",\"posts_button\":\"MyPosts_posts_button__192L8\",\"button_size\":\"MyPosts_button_size__3oqUW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"ProfileInfo_profile__1GIDg\",\"profile_info\":\"ProfileInfo_profile_info__142Ew\",\"info\":\"ProfileInfo_info__mPdgt\",\"info_name\":\"ProfileInfo_info_name__3FNdF\",\"contact\":\"ProfileInfo_contact__2ZooF\",\"avatar\":\"ProfileInfo_avatar__2-RVm\",\"button_block\":\"ProfileInfo_button_block__3QeFp\",\"button_block_dialogs\":\"ProfileInfo_button_block_dialogs__1GmET\"};","import React from \"react\";\nimport s from \"./MyPost.module.sass\";\nimport {Avatar, Checkbox, FormControlLabel} from \"@material-ui/core\";\nimport {Favorite, FavoriteBorder} from \"@material-ui/icons\";\nimport {PhotosType, PostType} from \"../../../../types/types\";\n\ntype MyPostPropsType = {\n    photo?: string\n}\n\nconst MyPost: React.FC<PostType & MyPostPropsType> = (props) => {\n\n    return (\n        <div className={s.post_block}>\n            <div className={s.post}>\n                <Avatar src={props.photo} alt=\"Аватарка\"/>\n                <FormControlLabel control={<Checkbox\n                    icon={<FavoriteBorder/>}\n                    checkedIcon={<Favorite/>}\n                    name=\"checkedH\"/>}\n                                  label={props.like}\n\n                />\n            </div>\n            <div className={s.post_text}>{props.message}</div>\n        </div>\n    )\n}\n\nexport default MyPost;","import React from \"react\";\nimport MyPost from \"./Post/MyPost\";\nimport s from \"./MyPosts.module.sass\"\nimport {Redirect} from \"react-router-dom\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {PostType} from \"../../../types/types\";\nimport {Button} from \"../../common/Button/Button\";\n\n\nexport type MyPostsType = {\n    posts: Array<PostType>\n    addPostAC: (formData: string) => void\n    isAuth: boolean | null\n    photo?: string\n}\n\nconst maxLength40 = maxLengthCreator(40)\n\nconst MyPosts = React.memo(({posts, addPostAC, isAuth, photo}: MyPostsType) => {\n    let newPosts = posts.map(p => <MyPost key={p.id} id={p.id} message={p.message} like={p.like} photo={photo}/>)\n\n    console.log(\"photo\", photo)\n    const onSubmit = (value: PostsFormType) => {\n        addPostAC(value.newPostText)\n    }\n\n    if (!isAuth) return <Redirect to={\"/login\"}/>\n\n    return (\n        <div className={s.posts}>\n            <PostsFormRedux onSubmit={onSubmit}/>\n            <div className={s.posts_item}>\n                {newPosts}\n            </div>\n        </div>\n    )\n})\n\nexport type PostsFormType = {\n    newPostText: string\n}\n\nexport const PostsForm: React.FC<InjectedFormProps<PostsFormType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div className={s.posts_form}>\n                <Field\n                    component={Textarea}\n                    name={\"newPostText\"}\n                    placeholder={\"Empty\"}\n                    className={s.posts_textarea}\n                    validate={[requiredField, maxLength40]}\n                />\n                <div className={s.button_block}>\n                    <Button style={s.button_size}>Add post</Button>\n                </div>\n            </div>\n        </form>\n    )\n}\n\nexport const PostsFormRedux = reduxForm<PostsFormType>({\n    form: 'newPostText'\n})(PostsForm)\n\nexport default MyPosts\n\n","import React from \"react\";\nimport {addPostAC} from \"../../../redux/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/redux-store\";\nimport {PostType} from \"../../../types/types\";\n\ntype mapStateToPropsType = {\n    posts: Array<PostType>\n    isAuth: boolean | null\n    photo?: string\n}\n\ntype mapDispatchToPropsType = {\n    addPostAC: (newPostText: string) => void\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        posts: state.profilePage.posts,\n        isAuth: state.auth.isAuth,\n        photo: state.profilePage.profile?.photos.small\n    }\n}\n\nexport const MyPostsContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\n    addPostAC\n})(MyPosts)","import React, {ChangeEvent, useEffect, useState} from 'react'\n\ntype ProfileStatusType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileStatusWithHook: React.FC<ProfileStatusType> = (props) => {\n    let [editMode, setEditMode] = useState<boolean>(false)\n    let [value, setValue] = useState<string>(props.status)\n\n    let onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\n        setValue(e.target ? e.target.value : \"\")\n    }\n\n    useEffect(() => {\n        setValue(props.status)\n    }, [props.status])\n\n    return (\n        <div>\n            {\n                editMode\n                    ? <div>\n                        <input autoFocus={true}\n                               onBlur={() => {\n                                   setEditMode(!editMode)\n                                   props.updateStatus(value)\n                               }}\n                               value={value}\n                               onChange={onChangeStatus}\n                        />\n                    </div>\n                    : <div>\n                        <span onDoubleClick={() => setEditMode(!editMode)}>\n                            {props.status || \"No status\"}\n                        </span>\n                    </div>\n            }\n        </div>\n    )\n}\n\n\n/*\nexport const ProfileStatusWithHook = (props: any) => {\n    let [editMode, setEditMode] = useState(false)\n    let [status, setStatus] = useState(props.status)\n\n    let changeStatus = (e: any) => {\n        setStatus(e.target.value)\n    }\n\n    return (\n        <div>\n            {\n                !editMode && <div>\n            <span onDoubleClick={() => setEditMode(true)}>\n            {props.status || \"No status\"}\n            </span>\n                </div>\n            }\n            {\n                editMode && <div>\n                    <input autoFocus={true}\n                           onBlur={() => {\n                               setEditMode(false)\n                               props.updateStatus(status)\n                           }}\n                           value={status}\n                           onChange={changeStatus}\n                    />\n                </div>\n            }\n        </div>\n    )\n}*/\n","import s from \"./ProfileInfo.module.sass\";\nimport React, {useState} from \"react\";\nimport {Preloader} from \"../../common/Preloader/Preloader\";\nimport avatar from \"./../../../assets/image/ufo-2.png\"\nimport {ProfileStatusWithHook} from \"./ProfileInfoStatus/ProfileStatusWithHook\";\nimport {NavLink} from \"react-router-dom\";\nimport {ProfileInfoDescription} from \"./ProfileInfoDescription/ProfileInfoDescription\";\nimport {ProfileType} from \"../../../types/types\";\nimport {Button} from \"../../common/Button/Button\";\nimport m from \"./../../common/Button/Button.module.sass\"\n\nexport type ProfileInfoType = {\n    profile: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto?: (photo: string) => void\n    updateProfile: (dataForm: ProfileType) => any\n    refreshProfile: () => void\n}\n\n\nexport const ProfileInfo: React.FC<ProfileInfoType> = (\n    {\n        isOwner,\n        profile,\n        status,\n        updateStatus,\n        savePhoto,\n        updateProfile\n    }) => {\n    //достаем значения из объекта и складываем в массив\n    //фильтруем массив\n    //возвращаем разметку со значениями из массива\n\n    let [editMode, setEditMode] = useState<boolean>(false)\n    //более правильное решение: создать флаг в бизнесе и менять\n    //режим редактирования в соответсствии с его значением\n    let submitProfileInfoReduxForm = (dataForm: ProfileType) => {\n        updateProfile(dataForm).then(() => setEditMode(!editMode))\n    }\n\n    if (!profile) return <Preloader/>\n\n    return (\n        <div>\n\n            {\n                /*editMode\n                    //@ts-ignore\n                    ? <div><ProfileInfoFormRedux initialValues={profile}\n                                                 profile={profile}\n                                                 //@ts-ignore\n                                                 onSubmit={submitProfileInfoReduxForm}\n                                                 isOwner={isOwner}\n                                                 savePhoto={savePhoto}\n                                                 setEditMode={setEditMode}\n                                                 editMode={editMode}\n\n                    />\n\n                    </div>:*/\n                <div className={s.profile}>\n                    <div className={s.profile_info}>\n                        <div>\n                            <div className={s.avatar}><img src={profile.photos.large || avatar}\n                                                           alt=\"user avatar\"\n                                                           width=\"300\"\n                                                           height=\"300\"/></div>\n                            {/*{isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/>}*/}\n\n                            <div>\n                                <ProfileStatusWithHook status={status} updateStatus={updateStatus}/>\n                            </div>\n                            <div className={s.button_block}>\n                                <NavLink className={m.button + \" \" + s.button_block_dialogs}\n                                         to={\"/messages\"}>Dialog</NavLink>\n                                <Button>Follow</Button>\n                            </div>\n                        </div>\n\n                        {/*//@ts-ignore*/}\n                        <ProfileInfoDescription profile={profile} contact={profile.contacts}/>\n\n                    </div>\n                    {/*{isOwner && <button onClick={() => setEditMode(!editMode)}>Edit</button>}*/}\n\n                </div>\n\n            }\n\n        </div>\n    )\n}\n\n/*//work in progress...\nlet arr2 = [2, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nlet arr3 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 2]\nlet arr = [1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1] // \"2\" - 7 по счету, 6 по индексу, length - 13,индексы до 12\n\nfunction findUniq(arr) {\n    let res = 0;\n    if (arr[0] !== arr[arr.length - 1]) {\n        if (arr[0] !== arr[1]) {\n            res = arr[0]\n        } else {\n            res = arr[arr.length - 1]\n        }\n\n        //нужно вставить вот эту проверку на нечетное количство элементов в массиве\n        //на случай, если отличающееся число в центре\n        if((arr.length / 2) % 2 !== 0 && arr[Math.floor(arr.length / 2)] === res) {\n            res += arr[Math.floor(arr.length / 2)]\n        }\n\n    } else {\n        res += arr[0]\n\n        for (let i = 1; i < Math.ceil(arr.length / 2); i++) {\n\n            if (arr[i] !== arr[arr.length - i - 1] && arr[i] === res) {\n                res += arr[i]\n                break\n            } else if (arr[i] !== arr[arr.length - i - 1] && arr[arr.length - i - 1] === res) {\n                res += arr[arr.length - i - 1]\n                break\n            }\n        }\n    }\n\n    return res\n}\n\nfindUniq(arr)\nfindUniq(arr3)\nfindUniq(arr2)*/\n\n\n\n\n\n\n\n\n\n\n\n","import React from \"react\";\nimport s from \"./Profile.module.sass\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\n\n\nexport const Profile = ({isOwner, profile, status, updateStatus, savePhoto, updateProfile, refreshProfile}: any) => {\n    return (\n        <main className={s.main_profile}>\n            <ProfileInfo\n                isOwner={isOwner}\n                profile={profile}\n                status={status}\n                updateStatus={updateStatus}\n                savePhoto={savePhoto}\n                updateProfile={updateProfile}\n                refreshProfile={refreshProfile}\n            />\n            <MyPostsContainer/>\n        </main>\n    )\n}\n","import React from 'react';\nimport {\n    getUserProfile,\n    getStatus,\n    updateStatus,\n    savePhoto,\n    updateProfile\n} from '../../redux/profile-reducer';\nimport {connect} from 'react-redux';\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\nimport {compose} from 'redux';\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {Profile} from \"./Profile\";\nimport {ProfileType} from \"../../types/types\";\n\nclass ProfileContainer extends React.Component<ProfileContainerType> {\n\n    refreshProfile() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                //Не самое лучшее решение, но по-быструхе можно так сделать\n                this.props.history.push(\"/login\");\n            }\n        }\n        this.props.getUserProfile(userId);\n        this.props.getStatus(userId);\n    }\n\n    componentDidMount() {\n        this.refreshProfile();\n    }\n\n    componentDidUpdate(prevProps: Readonly<ProfileContainerType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile();\n        }\n    }\n\n    render() {\n        return <Profile {...this.props}\n                        isOwner={!this.props.match.params.userId}\n                        profile={this.props.profile}\n                        status={this.props.status}\n                        updateStatus={this.props.updateStatus}\n                        savePhoto={this.props.savePhoto}\n                        updateProfile={this.props.updateProfile}\n                        refreshProfile={this.refreshProfile}/>\n    }\n}\n\n//typing\ntype ParamsType = {\n    userId: any\n}\n\n\ntype mapStateToPropsType = {\n    profile: ProfileType | null\n    status: string\n    authorizedUserId: number | null\n}\n\ntype mapDispatchToPropsType = {\n    getUserProfile: (userId: string) => void\n    getStatus: (userId: string) => void\n    updateStatus: (status: string) => void\n    savePhoto: (photo: string) => void\n    updateProfile: (dataForm: ProfileType) => void\n}\n\ntype ProfileInfoContainerType = mapStateToPropsType & mapDispatchToPropsType\ntype ProfileContainerType = RouteComponentProps<ParamsType> & ProfileInfoContainerType\n//typing\n\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorizedUserId: state.auth.id\n    }\n}\n\n\nexport default compose<React.ComponentType>(\n    withRouter,\n    withAuthRedirect,\n    connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\n        getUserProfile,\n        getStatus,\n        updateStatus,\n        savePhoto,\n        updateProfile\n    })\n)(ProfileContainer)\n\n"],"sourceRoot":""}