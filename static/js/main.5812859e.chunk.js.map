{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/Header/Header.module.sass","components/Login/Login.module.sass","api/api.ts","components/Profile/ProfileInfo/ProfileInfoDescription/ProfileInfoDescription.tsx","components/Users/Users.module.sass","components/common/FormsControls/FormsControls.tsx","components/Navbar/MenuItem/MenuItem.tsx","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","redux/message-reducer.ts","components/Dialogs/Messages/Messages.tsx","components/Dialogs/Messages/MessagesContainer.tsx","components/Navbar/Friends/FriendsContainer.tsx","components/Navbar/Friends/Friends.tsx","components/Header/Header.tsx","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/dialogs-reducer.ts","redux/sidebar-reducer.ts","utils/object-helpers.ts","redux/users-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","components/Profile/ProfileInfoForm/ProfileInfoForm.tsx","components/Settings/Settings.tsx","redux/users-selectors.ts","components/common/Paginator/Paginator.tsx","components/Users/User/User.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Dialogs/Messages/Messages.module.sass","components/Profile/ProfileInfoForm/ProfileInfoForm.module.sass","assets/image/preloader.svg","components/common/Preloader/Preloader.jsx","components/Navbar/Navbar.module.sass","components/Profile/ProfileInfo/ProfileInfoDescription/ProfileInfoDescription.module.sass","assets/image/ufo-2.png","utils/validators/validators.ts","redux/profile-reducer.ts","components/Navbar/Friends/Friends.module.sass","components/common/Paginator/Paginator.module.sass"],"names":["module","exports","ResultCodesEnum","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","getUsersPage","pageNumber","getProfile","userId","console","warn","profileAPI","follow","id","post","unfollow","delete","getStatus","updateStatus","status","put","savePhoto","photo","formData","FormData","append","updateProfile","dataForm","authAPI","me","res","login","email","password","rememberMe","captcha","logout","ProfileInfoDescription","props","profile","className","s","list","item","item_fullName","fullName","lookingForAJobDescription","lookingForAJob","aboutMe","FormControl","input","meta","error","touched","children","child","el","hasError","formControl","Textarea","restProps","Input","MenuItem","nav_item","nav_item_link","to","activeClassName","active","Navbar","nav","nav_list","News","Music","ADD_MESSAGE","initialState","messages","name","textMessage","maxLength50","maxLengthCreator","Messages","addMessage","newMessages","map","m","dialog_body","message_one","message_two","dialog_window","dialog_header","Button","variant","color","MessagesReduxForm","onSubmit","newMessageText","reduxForm","form","handleSubmit","dialog_footer","Field","component","placeholder","dialog_footer_textarea","validate","requiredField","button","MessagesContainer","connect","state","messagesPage","type","FriendsContainer","friends","sidebar","dispatch","friendsList","f","friends_item","friends_item_photo","width","height","avatar","src","alt","friends_list","Header","logoutTC","isAuth","site_name","small","onClick","SET_USER_DATA","SET_USER_PHOTO","large","setUserData","payload","getUserAuthData","a","resultCode","Success","log","HeaderContainer","render","this","match","params","getUserPhoto","React","Component","WithUrlUsersDataContainerComponent","withRouter","auth","loginTC","message","length","stopSubmit","_error","h1","LoginReduxForm","formSummaryError","dialogs","lastMessage","updateObInArray","itemId","objPropName","newObjProps","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setToggleIsFetching","toggleFollowingProgress","_followUnfollowFlow","apiMethod","actionCreator","INITIALIZED_SUCCESS","initialized","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","action","usersPage","followed","totalCount","filter","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","fallback","Preloader","ProfileInfoFormRedux","isOwner","photos","onChange","e","target","files","item_form","info_contacts","Object","keys","contacts","c","Settings","history","profileState","useSelector","authorizedUserId","useState","editMode","setEditMode","useDispatch","useEffect","getUserProfile","push","initialValues","getUsersSelector","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","classNames","require","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","users_paginator","p","number","selectPage","User","user","user_avatar","button_followed","follow_unfollow_button","disabled","some","user_info","user_info_name","user_name","user_status","Users","users_list","UsersContainer","WithUrlDataContainerComponent","bind","page","getState","items","DialogsContainer","lazy","ProfileContainer","App","initializeApp","exact","path","AppContainer","compose","promise","Promise","all","MainApp","StrictMode","Boolean","window","location","hostname","unregister","navigator","serviceWorker","ready","registration","catch","ReactDOM","document","getElementById","preloader","value","maxLength","ADD_POST","SET_PROFILE_INFO","SET_STATUS","UPDATE_STATUS","SAVE_PHOTO","posts","like","newPostText","addPostAC","updateUserStatus","savePhotoAC","reject"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,+B,oBCA3ED,EAAOC,QAAU,CAAC,UAAY,0BAA0B,MAAQ,wB,oBCAhED,EAAOC,QAAU,CAAC,GAAK,kBAAkB,iBAAmB,kC,gCCD5D,4IAGYC,EAHZ,mB,SAGYA,O,qBAAAA,I,iBAAAA,I,2CAAAA,M,KAMZ,IAAIC,EAAWC,IAAMC,OAAO,CAExBC,iBAAiB,EACjBC,QAAS,gDACTC,QAAS,CACL,UAAW,0CAmBNC,EAAW,CACpBC,SADoB,SACXC,EAA8BC,GACnC,OAAOT,EAASU,IAAT,qBAAyCF,EAAzC,kBAA8DC,IAAYE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAG/GC,aALoB,SAKPC,EAA6BN,GACtC,OAAOT,EAASU,IAAT,qBAAyCK,EAAzC,kBAA6DN,IAAYE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAG9GG,WAToB,SASTC,GAEP,OADAC,QAAQC,KAAK,6CACNC,EAAWJ,WAAWC,IAGjCI,OAdoB,SAcbC,GACH,OAAOtB,EAASuB,KAAT,8DAAyFD,KAGpGE,SAlBoB,SAkBXF,GACL,OAAOtB,EAASyB,OAAT,8DAA2FH,MA4B7FF,EAAa,CACtBJ,WADsB,SACXC,GAEP,OADAC,QAAQC,KAAK,6CACNnB,EAASU,IAAT,kBAAqCO,IAAUN,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAGpFa,UANsB,SAMZT,GACN,OAAOjB,EAASU,IAAY,kBAAoBO,IAGpDU,aAVsB,SAUTC,GACT,OAAO5B,EAAS6B,IAAT,iBAAiD,CAACD,OAAQA,KAGrEE,UAdsB,SAcZC,GACN,IAAMC,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASH,GAClB/B,EAAS6B,IAAT,iBAA8CG,EAAU,CAAC3B,QAAS,CAAC,eAAgB,0BAG9F8B,cApBsB,SAoBRC,GACV,OAAOpC,EAAS6B,IAAT,WAA4CO,KAyB9CC,EAAU,CACnBC,GADmB,WAEf,OAAOtC,EAASU,IAAoB,WAAWC,MAAK,SAAA4B,GAAG,OAAIA,EAAI1B,SAGnE2B,MALmB,SAKbC,EAAeC,EAAkBC,EAAqBC,GACxD,OAAO5C,EAASuB,KAAwB,cAAe,CAACkB,QAAOC,WAAUC,aAAYC,aAGzFC,OATmB,WAUf,OAAO7C,EAASyB,OAAO,kB,+FChIlBqB,G,KAA+D,SACxEC,GAiBA,OACI,8BACuB,OAAlBA,EAAMC,SACP,qBAAIC,UAAWC,IAAEC,KAAjB,UACI,oBAAIF,UAAWC,IAAEE,KAAjB,SAEI,sBAAMH,UAAWC,IAAEG,cAAnB,SAAkC,4BAAIN,EAAMC,QAAQM,eAIpDP,EAAMC,QAAQO,2BACd,qBAAIN,UAAWC,IAAEE,KAAjB,UACI,gDACCL,EAAMC,QAAQO,6BAKnBR,EAAMC,QAAQQ,gBACd,qBAAIP,UAAWC,IAAEE,KAAjB,UACI,mDACCL,EAAMC,QAAQQ,kBAKnBT,EAAMC,QAAQS,SACd,qBAAIR,UAAWC,IAAEE,KAAjB,UACI,4CACCL,EAAMC,QAAQS,mB,mBCtDvC5D,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,WAAa,0BAA0B,KAAO,oBAAoB,YAAc,2BAA2B,OAAS,sBAAsB,uBAAyB,sCAAsC,UAAY,yBAAyB,eAAiB,8BAA8B,UAAY,2B,mMCG3U4D,EAAc,SAAC,GAAwE,EAAvEC,MAAwE,IAAD,IAAhEC,KAAOC,EAAyD,EAAzDA,MAAOC,EAAkD,EAAlDA,QAAqBC,GAA6B,EAAxCC,MAAwC,EAAjCC,GAAiC,EAA7BF,UAC7DG,GAD0F,wDAC/EL,GAASC,GAC1B,OACI,sBAAKb,UAAWC,IAAEiB,YAAc,KAAOD,EAAWhB,IAAEW,MAAQ,IAA5D,UACI,8BACKE,IAGJG,GAAY,+BAAOL,QAKnBO,EAAW,SAACrB,GAAgB,IAC9BY,EAAoCZ,EAApCY,MAAuBU,GAAatB,EAA7Ba,KAA6Bb,EAAvBiB,MADgB,YACOjB,EADP,2BAEpC,OAAO,cAACW,EAAD,2BAAiBX,GAAjB,aAAwB,oDAAcY,GAAWU,QAG/CC,EAAQ,SAACvB,GAAgB,IAC3BY,EAAoCZ,EAApCY,MAAuBU,GAAatB,EAA7Ba,KAA6Bb,EAAvBiB,MADa,YACUjB,EADV,2BAEjC,OAAO,cAACW,EAAD,2BAAiBX,GAAjB,aAAwB,iDAAWY,GAAWU,S,+JCf5CE,EAAW,SAACxB,GACrB,OACI,oBAAIE,UAAWC,IAAEsB,SAAjB,SACI,cAAC,IAAD,CAASvB,UAAWC,IAAEuB,cACbC,GAAI3B,EAAM2B,GACVC,gBAAiBzB,IAAE0B,OAF5B,SAII,+BAAO7B,EAAMK,YCKdyB,EAjBU,WAErB,OACI,qBAAK5B,UAAWC,IAAE4B,IAAlB,SACI,qBAAI7B,UAAWC,IAAE6B,SAAjB,UAEI,cAAC,EAAD,CAAUL,GAAI,WAAYtB,KAAM,YAChC,cAAC,EAAD,CAAUsB,GAAI,WAAYtB,KAAM,YAChC,cAAC,EAAD,CAAUsB,GAAI,QAAStB,KAAM,SAC7B,cAAC,EAAD,CAAUsB,GAAI,SAAUtB,KAAM,UAC9B,cAAC,EAAD,CAAUsB,GAAI,YAAatB,KAAM,aACjC,cAAC,EAAD,CAAUsB,GAAI,SAAUtB,KAAM,gB,QCJ/B4B,EARF,WACT,OACI,2CCMOC,EARD,WACV,OACI,yC,eCUKC,EAAc,sCAEvBC,EAAe,CACfC,SAAU,CACN,CAAC9D,GAAI,EAAG+D,KAAM,eAAMC,YAAa,SACjC,CAAChE,GAAI,EAAG+D,KAAM,eAAMC,YAAa,SACjC,CAAChE,GAAI,EAAG+D,KAAM,eAAMC,YAAa,oNACjC,CAAChE,GAAI,EAAG+D,KAAM,eAAMC,YAAa,uI,4DCRnCC,EAAcC,YAAiB,IAqCtBC,EAnC0B,SAAC,GAA4B,IAA3BL,EAA0B,EAA1BA,SAAUM,EAAgB,EAAhBA,WAC7CC,EAAcP,EAASQ,KAAI,SAAAC,GAAC,OAAI,sBAAgB5C,UAAWC,IAAE4C,YAA7B,UAGhC,sBAAK7C,UAAoB,IAAT4C,EAAEvE,GAAW4B,IAAE6C,YAAc,GAA7C,UACI,8BAAe,IAATF,EAAEvE,GAAWuE,EAAER,KAAO,OAC5B,8BAAe,IAATQ,EAAEvE,GAAWuE,EAAEP,YAAc,UAEvC,sBAAKrC,UAAoB,IAAT4C,EAAEvE,GAAW4B,IAAE8C,YAAc,GAA7C,UACI,8BAAe,IAATH,EAAEvE,GAAWuE,EAAER,KAAO,OAC5B,8BAAe,IAATQ,EAAEvE,GAAWuE,EAAEP,YAAc,YATGO,EAAEvE,OAmBhD,OACI,sBAAK2B,UAAWC,IAAE+C,cAAlB,UACI,sBAAKhD,UAAWC,IAAEgD,cAAlB,UACI,cAAC,IAAD,CAASxB,GAAG,WAAZ,SACI,cAACyB,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAlC,oBAEJ,mDAEHV,EACD,cAACW,EAAD,CAAmBC,SAbV,SAACvE,GACd0D,EAAW1D,EAASwE,uBA2CfF,EAAoBG,YAAiC,CAC9DC,KAAM,kBADuBD,EAnB+C,SAAC,GAAoB,IAAnBE,EAAkB,EAAlBA,aAE9E,OACI,sBAAMJ,SAAUI,EAAhB,SACI,sBAAK1D,UAAWC,IAAE0D,cAAlB,UACI,cAACC,EAAA,EAAD,CACIC,UAAW1C,IACXiB,KAAM,iBACN0B,YAAa,qBACb9D,UAAWC,IAAE8D,uBACbC,SAAU,CAACC,IAAe3B,KAG9B,wBAAQtC,UAAWC,IAAEiE,OAArB,0B,QCzCHC,EAAoBC,aAfT,SAACC,GACrB,MAAO,CACHlC,SAAUkC,EAAMC,aAAanC,YAcjC,CACIM,WFakB,SAACc,GAAD,MAA6B,CAACgB,KAAMtC,EAAasB,oBEf1Ca,CAI/B5B,G,iBCPWgC,EAAmBJ,aAZR,SAACC,GACrB,MAAO,CACHI,QAASJ,EAAMK,QAAQD,YAKJ,SAACE,GACxB,MAAO,KAIqBP,ECfc,SAACtE,GAE3C,IAAI8E,EAAc9E,EAAM2E,QAAQ9B,KAAI,SAAAkC,GAAC,OAAI,qBAAe7E,UAAWC,IAAE6E,aAA5B,UACrC,qBAAK9E,UAAWC,IAAE8E,mBAAlB,SACI,qBAAKC,MAAO,GAAIC,OAAQ,GAAIjF,UAAWC,IAAEiF,OAAQC,IAAKN,EAAEK,OAAQE,IAAKP,EAAEzC,SAG3E,+BAAOyC,EAAEzC,SALqCyC,EAAExG,OAQpD,OACI,oBAAI2B,UAAWC,IAAEoF,aAAjB,SACKT,O,0BCOEU,EApBsB,SAAC,GAAsC,IAArCxG,EAAoC,EAApCA,MAAOyG,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,OAAQjG,EAAW,EAAXA,MAC5D,OACI,qCAEI,sBAAKS,UAAWC,IAAEwF,UAAlB,UAA6B,qCAA7B,cAGA,sBAAKzF,UAAWC,IAAEV,MAAlB,UACqB,KAAhBT,EAAM4G,MACD,qBAAKP,IAAKD,IAAQF,MAAM,OAAOC,OAAO,OAAOG,IAAI,WACjD,qBAAKD,IAAKrG,EAAM4G,MAAOV,MAAM,OAAOC,OAAO,OAAOG,IAAI,WAE3DI,EACK,gCAAMjG,EAAN,MAAe,wBAAQoG,QAASJ,EAAjB,wBACf,cAAC,IAAD,CAAS9D,GAAI,SAAb,0B,wCCKTmE,EAAgB,qCAChBC,EAAiB,sCAEjB3D,EAAyB,CAClC7D,GAAI,KACJmB,MAAO,KACPD,MAAO,KACPiG,QAAQ,EACR1G,MAAO,CACH4G,MAAO,GACPI,MAAO,KA0BTC,EAAc,SAAC1H,EAAmBmB,EAAsBD,EAAsBiG,GAAhE,MAAqF,CACrGjB,KAAMqB,EACNI,QAAS,CAAC3H,KAAImB,QAAOD,QAAOiG,YAenBS,EAAkB,yDAAiB,WAAOtB,GAAP,qBAAAuB,EAAA,sEAC5B9G,IAAQC,KADoB,QACxCC,EADwC,QAEpC6G,aAAerJ,IAAgBsJ,UAC/B/H,EAAKiB,EAAI1B,KAAKS,GACdmB,EAAQF,EAAI1B,KAAK4B,MACjBD,EAAQD,EAAI1B,KAAK2B,MACrBoF,EAASoB,EAAY1H,EAAImB,EAAOD,GAAO,KANC,2CAAjB,uDAU/BtB,QAAQoI,IAAI,kBAAmBJ,KAMxB,ICrEDK,E,4MAUFC,OAAS,kBAAM,cAAC,EAAD,eAAY,EAAKzG,S,kEAJ5B,IAAI9B,EAASwI,KAAK1G,MAAM2G,MAAMC,OAAO1I,OACrCwI,KAAK1G,MAAM6G,aAAa3I,O,GAPF4I,IAAMC,WAwBhCC,GAAqCC,YAAWT,GAErClC,gBAbO,SAACC,GACnB,MAAO,CACHhG,GAAIgG,EAAM2C,KAAK3I,GACfmB,MAAO6E,EAAM2C,KAAKxH,MAClBD,MAAO8E,EAAM2C,KAAKzH,MAClBiG,OAAQnB,EAAM2C,KAAKxB,OACnB1G,MAAOuF,EAAM2C,KAAKlI,SAQtB,CAEI6H,aDwCoB,SAAC3I,GAAD,OAAoB,SAAC2G,MCvCzCY,SDqEgB,yDAAiB,WAAOZ,GAAP,SAAAuB,EAAA,sEAChB9G,IAAQQ,SADQ,OAEJ,IAFI,OAExBhC,KAAKuI,YACdxB,EAASoB,EAAY,KAAM,KAAM,MAAM,IAHN,2CAAjB,wDCzET3B,CAKR0C,I,qBCZQ1C,gBANS,SAACC,GACrB,MAAO,CACHmB,OAAQnB,EAAM2C,KAAKxB,UAI4E,CAACyB,QFgEjF,SAACzH,EAAeC,EAAkBC,EAAqBC,GAAvD,8CACnB,WAAOgF,GAAP,iBAAAuB,EAAA,sEACyB9G,IAAQG,MAAMC,EAAOC,EAAUC,EAAYC,GADpE,OAEqC,KAD7BhC,EADR,QAEiBC,KAAKuI,WACdxB,EAASsB,MAELiB,EAAUvJ,EAASC,KAAKuE,SAASgF,OAAS,EAAIxJ,EAASC,KAAKuE,SAAS,GAAK,aAE9EwC,EAASyC,YAAW,QAAS,CAACC,OAAQH,MAP9C,2CADmB,wDEhER9C,EApCD,SAACtE,GAaX,OAJIA,EAAM0F,QACL,IAID,gCACI,oBAAIxF,UAAWC,KAAEqH,GAAjB,mBACA,cAACC,GAAD,CAAgBjE,SAfP,SAACvE,GACd,IAAIS,EAAQT,EAASS,MACjBC,EAAWV,EAASU,SACpBC,EAAaX,EAASW,WACtBC,EAAUZ,EAASY,QACvBG,EAAMmH,QAAQzH,EAAOC,EAAUC,EAAYC,YAqEtC4H,GAAiB/D,YAAwB,CAClDC,KAAM,SADoBD,EA7BsC,SAAC,GAAgC,IAA/BE,EAA8B,EAA9BA,aAAc9C,EAAgB,EAAhBA,MAEhF,OACI,uBAAM0C,SAAUI,EAAhB,UACI,8BAAK,cAACE,EAAA,EAAD,CAAOC,UAAWxC,IACXyC,YAAa,QACb1B,KAAM,QACN4B,SAAU,CAACC,SAEvB,8BAAK,cAACL,EAAA,EAAD,CAAOC,UAAWxC,IACXyC,YAAa,WACb1B,KAAM,WACN4B,SAAU,CAACC,KACXM,KAAM,eAElB,gCAAK,cAACX,EAAA,EAAD,CAAOC,UAAWxC,IACXkD,KAAM,WACNnC,KAAM,eAFlB,iBAKCxB,GAAS,qBAAKZ,UAAWC,KAAEuH,iBAAlB,SAAqC5G,IAC/C,8BACI,mD,kBChFZsB,GAAe,CACfuF,QAAS,CACL,CACIpJ,GAAI,EACJ+D,KAAM,+CACNsF,YAAa,wCACbxC,OAAQ,2EAEZ,CACI7G,GAAI,EACJ+D,KAAM,+CACNsF,YAAa,8TACbxC,OAAQ,2EAEZ,CACI7G,GAAI,EACJ+D,KAAM,+CACNsF,YAAa,gEACbxC,OAAQ,2EAEZ,CACI7G,GAAI,EACJ+D,KAAM,+CACNsF,YAAa,4GACbxC,OAAQ,2EAEZ,CACI7G,GAAI,EACJ+D,KAAM,+CACNsF,YAAa,gEACbxC,OAAQ,6EC9BpB,IAAIhD,GAAe,CACfuC,QAAS,CACL,CACIpG,GAAI,EACJ+D,KAAM,6BACN8C,OAAQ,0EAEZ,CACI7G,GAAI,EACJ+D,KAAM,6BACN8C,OAAQ,0EAEZ,CACI7G,GAAI,EACJ+D,KAAM,6BACN8C,OAAQ,iEAGZ,CACI7G,GAAI,EACJ+D,KAAM,6BACN8C,OAAQ,+EAEZ,CACI7G,GAAI,EACJ+D,KAAM,6BACN8C,OAAQ,mDAEZ,CACI7G,GAAI,EACJ+D,KAAM,6BACN8C,OAAQ,6EC/BPyC,GAAkB,SAACxH,EAAWyH,EAAaC,EAAkBC,GACtE,OAAO3H,EAAKwC,KAAI,SAACoF,GACb,OAAOH,IAAWG,EAAEF,GAAb,2BAAgCE,GAAMD,GAAeC,MCoCvDC,GAAS,+BACTC,GAAW,iCACXC,GAAY,kCACZC,GAAmB,yCACnBC,GAAwB,8CACxBC,GAAqB,2CACrBC,GAA4B,kDAE5BpG,GAAe,CACxBqG,MAAO,GACP/K,SAAU,GACVgL,gBAAiB,EACjBjL,YAAa,EACbkL,YAAY,EACZC,oBAAqB,IAwDZC,GAAgB,SAACtK,GAAD,MAAiB,CAC1CkG,KAAMyD,GACN3J,OAMSuK,GAAkB,SAACvK,GAAD,MAAiB,CAC5CkG,KAAM0D,GACN5J,OA8BSwK,GAAsB,SAACJ,GAAD,MAA0B,CACzDlE,KAAM8D,GACNI,eAMSK,GAA0B,SAACL,EAAqBzK,GAAtB,MAA0C,CAC7EuG,KAAM+D,GACNG,aACAzK,WAmBE+K,GAAmB,uCAAG,WAAO1K,EACAsG,EACAqE,EACAC,GAHP,SAAA/C,EAAA,6DAKxBvB,EAASmE,IAAwB,EAAMzK,IALf,SAMH2K,EAAU3K,GANP,cAOXT,KAAKuI,aAAerJ,IAAgBsJ,SAC7CzB,EAASsE,EAAc5K,IAE3BsG,EAASmE,IAAwB,EAAOzK,IAVhB,2CAAH,4D,oBCnKZ6K,GAAsB,0CAEtBhH,GAAiC,CAC1CiH,aAAa,GCPbC,GAAcC,aAAgB,CAC9BC,YAAaC,KACbC,YLsBG,WAA4D,IAApCnF,EAAmC,uDAA3BnC,GACnC,OAAOmC,GKtBPC,adc0B,WAAiE,IAAhED,EAA+D,uDAAvDnC,EAAcuH,EAAyC,uCAC1F,OAAQA,EAAOlF,MACX,KAAKtC,EACD,OAAO,2BACAoC,GADP,IAEIlC,SAAS,GAAD,mBAAMkC,EAAMlC,UAAZ,CAAsB,CAAC9D,GAAI,EAAG+D,KAAM,eAAMC,YAAaoH,EAAOlG,oBAG9E,QACI,OAAOc,IctBfK,QJqB0B,WAAwC,IAAvCL,EAAsC,uDAA9BnC,GACnC,OAAOmC,GIrBPqF,UFuCwB,WAAiE,IAAhErF,EAA+D,uDAAvDnC,GAAcuH,EAAyC,uCACxF,OAAQA,EAAOlF,MACX,KAAKyD,GACD,OAAO,2BACA3D,GADP,IAEIkE,MAAOZ,GAAgBtD,EAAMkE,MAAOkB,EAAOpL,GAAI,KAAM,CAACsL,UAAU,MAGxE,KAAK1B,GACD,OAAO,2BACA5D,GADP,IAEIkE,MAAOZ,GAAgBtD,EAAMkE,MAAOkB,EAAOpL,GAAI,KAAM,CAACsL,UAAU,MAGxE,KAAKzB,GACD,OAAO,2BACA7D,GADP,IAEIkE,MAAOkB,EAAOlB,QAGtB,KAAKJ,GACD,OAAO,2BACA9D,GADP,IAEI9G,YAAakM,EAAOlM,cAG5B,KAAK6K,GACD,OAAO,2BACA/D,GADP,IAEImE,gBAAiBiB,EAAOG,aAGhC,KAAKvB,GACD,OAAO,2BACAhE,GADP,IAEIoE,WAAYgB,EAAOhB,aAG3B,KAAKH,GACD,OAAO,2BACAjE,GADP,IAEIqE,oBAAqBe,EAAOhB,WAAP,sBACXpE,EAAMqE,qBADK,CACgBe,EAAOzL,SADvB,YAEXqG,EAAMqE,oBAAoBmB,QAAO,SAAAxL,GAAE,OAAIA,IAAOoL,EAAOzL,aAEvE,QACI,OAAOqG,IEpFf2C,KR0BuB,WAAyD,IAAxD3C,EAAuD,uDAA/CnC,EAAcuH,EAAiC,uCAC/E,OAAQA,EAAOlF,MACX,KAAKqB,EACD,OAAO,2BACAvB,GACAoF,EAAOzD,SAGlB,KAAKH,EACD,OAAO,2BACAxB,GACAoF,EAAO7L,MAGlB,QACI,OAAOyG,IQxCfZ,KAAMqG,KACNC,IDKsB,WAAiE,IAAhE1F,EAA+D,uDAAvDnC,GAAcuH,EAAyC,uCACtF,OAAQA,EAAOlF,MACX,KAAK2E,GACD,OAAO,2BACA7E,GADP,IAEI8E,aAAa,IAGrB,QACI,OAAO9E,MCCR2F,GAAmBC,aAAYb,GAAac,aAAgBC,O,SC/B1DC,GAAe,SAACvD,GACzB,OAAO,SAAC/G,GACJ,OAAO,cAAC,WAAD,CAAUuK,SAAU,cAACC,GAAA,EAAD,IAApB,SACH,cAACzD,EAAD,eAAe/G,Q,6BC4EdyK,GAAuB/G,YAA+B,CAC/DC,KAAM,gBAD0BD,EAnEL,SAAC,GAA6D,IAA5DzD,EAA2D,EAA3DA,QAAkB2D,GAAyC,EAAlD8G,QAAkD,EAAzC9G,cAAc7E,EAA2B,EAA3BA,UAAW+B,EAAgB,EAAhBA,MAQxE,OACI,gCACI,qBAAKZ,UAAWC,KAAEiF,OAAlB,SAA0B,qBAAKC,IAAKpF,EAAQ0K,OAAO3E,OAASZ,IAC7BE,IAAI,cACJJ,MAAM,MACNC,OAAO,UACtC,uBAAOV,KAAK,OAAOmG,SAZC,SAACC,GACrBA,EAAEC,OAAOC,MAAM1D,QACftI,EAAU8L,EAAEC,OAAOC,MAAM,OAYzB,uBAAMvH,SAAUI,EAAhB,UACI,uBAAM1D,UAAWC,KAAE6K,UAAnB,uBACI,cAAClH,EAAA,EAAD,CAAOC,UAAWxC,IACXe,KAAM,WACN0B,YAAa,iBAIxB,sBAAK9D,UAAWC,KAAE6K,UAAlB,wCACI,cAAClH,EAAA,EAAD,CAAOC,UAAWxC,IACXe,KAAM,4BACN0B,YAAa,aAIxB,sBAAK9D,UAAWC,KAAE6K,UAAlB,6BACI,cAAClH,EAAA,EAAD,CAAOC,UAAWxC,IACXe,KAAM,iBACN0B,YAAa,QACbS,KAAM,gBAIjB,sBAAKvE,UAAWC,KAAE6K,UAAlB,sBACI,cAAClH,EAAA,EAAD,CAAOC,UAAW1C,IACXiB,KAAM,UACN0B,YAAa,aAKxB,sBAAK9D,UAAWC,KAAE8K,cAAlB,sBAEQC,OAAOC,KAAKlL,EAAQmL,UAAUvI,KAAI,SAAAwI,GAAC,OAAI,gCAAMA,EAAE,cAACvH,EAAA,EAAD,CACOC,UAAWxC,IACXe,KAAM,YAAc+I,EACpBrH,YAAa,SAHRqH,YASlEvK,GAAS,qBAAKZ,UAAWC,KAAEuH,iBAAlB,SAAqC5G,IAE/C,mD,UC5DHwK,GAA0BrE,aAAW,YAAkC,IAAhClI,EAA+B,EAA/BA,UAAW4H,EAAoB,EAApBA,MAAO4E,EAAa,EAAbA,QAE1DC,EAAeC,aAAuC,SAAAlH,GAAK,OAAIA,EAAMiF,YAAYvJ,WACjFyL,EAAmBD,aAA0B,SAAAlH,GAAK,OAAIA,EAAM2C,KAAK3I,MAHM,EAK7CoN,oBAAkB,GAL2B,oBAKtEC,EALsE,KAK5DC,EAL4D,KAMvEhH,EAAWiH,cAOX5N,EAASyI,EAAMC,OAAO1I,OAe1B,OAbA6N,qBAAU,WACNlH,EAASmH,aAAe9N,MACzB,IAGEA,IACDA,EAASwN,IAGLH,EAAQU,KAAK,UAKjB,8BAEQL,EAEM,8BAAK,cAACnB,GAAD,CAAsByB,cAAeV,EACfd,QAAS/D,EAAMC,OAAO1I,OACtB+B,QAASuL,EAEThI,SA7BZ,SAACnE,GAC9BwF,EAASzF,aAAcC,IACvBwM,GAAaD,IA4B4B7M,UAAWA,EACX8M,YAAaA,EACbD,SAAUA,MAIrC,gCACE,cAAC7L,GAAA,EAAD,CAAwBE,QAASuL,IAEjC,wBAAQ3F,QAAS,kBAAMgG,GAAaD,IAApC,0B,UCvDfO,GAAmBC,cAJR,SAAC7H,GACrB,OAAOA,EAAMqF,UAAUnB,SAG8B,SAACA,GACtD,OAAOA,KAGE4D,GAAc,SAAC9H,GACxB,OAAOA,EAAMqF,UAAUlM,UAGd4O,GAAqB,SAAC/H,GAC/B,OAAOA,EAAMqF,UAAUlB,iBAGd6D,GAAiB,SAAChI,GAC3B,OAAOA,EAAMqF,UAAUnM,aAGd+O,GAAgB,SAACjI,GAC1B,OAAOA,EAAMqF,UAAUjB,YAGd8D,GAAyB,SAAClI,GACnC,OAAOA,EAAMqF,UAAUhB,qB,iDCzBvB8D,GAAaC,EAAQ,KAUZC,GAAiC,SAAC,GAc3C,IAPO,IALHC,EAKE,EALFA,gBACAnP,EAIE,EAJFA,SACAD,EAGE,EAHFA,YACAqP,EAEE,EAFFA,cAEE,IADFC,mBACE,MADY,GACZ,EAKFC,EAAaC,KAAKC,KAAKL,EAAkBnP,GACzCyP,EAAuB,GAClBC,EAAI,EAAGA,EAAIJ,EAAYI,IAC5BD,EAAMlB,KAAKmB,GAKf,IAAIC,EAAeJ,KAAKC,KAAKF,EAAaD,GAbpC,EAckCpB,mBAAiB,GAdnD,oBAcD2B,EAdC,KAccC,EAdd,KAgBFC,GAAyBF,EAAgB,GAAKP,EAAc,EAE5DU,EAAyBH,EAAgBP,EAE7C,OACI,sBAAK7M,UAAWC,KAAEuN,gBAAlB,UAGQJ,EAAgB,GAChB,wBAAQzH,QAAS,WACb0H,EAAiBD,EAAgB,IADrC,kBAKHH,EACIpD,QAAO,SAAA4D,GAAC,OAAIA,GAAKH,GAAyBG,GAAKF,KAC/C5K,KAAI,SAAC8K,GACF,OACI,qBAAKzN,UAAWC,KAAEyN,OAAlB,SACI,sBAAM1N,UAAWwM,GAAW,gBACvBvM,KAAE0N,WAAapQ,IAAgBkQ,GACjCxN,KAAEnC,YAEC6H,QAAS,WACLiH,EAAca,IALxB,SAMUA,GAHCA,QASvBN,EAAeC,GACf,wBAAQzH,QAAS,WACb0H,EAAiBD,EAAgB,IADrC,sBCvDHQ,GAAO,SAAC,GAA8D,IAA7DC,EAA4D,EAA5DA,KAAMnF,EAAsD,EAAtDA,oBAAqBnK,EAAiC,EAAjCA,SAAUH,EAAuB,EAAvBA,OACvD,OACI,qBAAK4B,UAAWC,KAAEsI,MAAlB,SAEI,sBAAmBvI,UAAWC,KAAE4N,KAAhC,UAEI,qBAAK7N,UAAWC,KAAE6N,YAAlB,SACI,cAAC,IAAD,CAASrM,GAAI,YAAcoM,EAAKxP,GAAhC,SACI,qBAAK2B,UAAWC,KAAEiF,OACbC,IAA2B,OAAtB0I,EAAKpD,OAAO3E,MAAiB+H,EAAKpD,OAAO3E,MAAzC,UAAoDZ,KACzDE,IAAKyI,EAAKzL,WAKvB,qBAAKpC,UAAWC,KAAE8N,gBAAlB,SACKF,EAAKlE,SACF,wBAAQ3J,UAAWC,KAAE+N,uBACbC,SAAUvF,EAAoBwF,MAAK,SAAA7P,GAAE,OAAIA,IAAOwP,EAAKxP,MACrDsH,QAAS,WACLpH,EAASsP,EAAKxP,KAH1B,sBAOE,wBAAQ2B,UAAWC,KAAE+N,uBACbC,SAAUvF,EAAoBwF,MAAK,SAAA7P,GAAE,OAAIA,IAAOwP,EAAKxP,MACrDsH,QAAS,WACLvH,EAAOyP,EAAKxP,KAHxB,sBAUV,qBAAK2B,UAAWC,KAAEkO,UAAlB,SACI,sBAAKnO,UAAWC,KAAEmO,eAAlB,UACI,qBAAKpO,UAAWC,KAAEoO,UAAlB,SAA8BR,EAAKzL,OACnC,qBAAKpC,UAAWC,KAAEqO,YAAlB,SAAgCT,EAAKlP,gBAjCvCkP,EAAKxP,OCAdkQ,GAA6B,SAAC,GAUhC,IARHhG,EAQE,EARFA,MACAC,EAOE,EAPFA,gBACAhL,EAME,EANFA,SACAD,EAKE,EALFA,YACAqP,EAIE,EAJFA,cACAlE,EAGE,EAHFA,oBACAnK,EAEE,EAFFA,SACAH,EACE,EADFA,OAGJ,OACI,sBAAK4B,UAAWC,KAAEsI,MAAlB,UAEI,cAAC,GAAD,CAAWhL,YAAaA,EACbqP,cAAeA,EACfD,gBAAiBnE,EACjBhL,SAAUA,IAErB,qBAAKwC,UAAWC,KAAEuO,WAAlB,SAEQjG,EAAM5F,KAAI,SAAAoF,GAAC,OAAI,cAAC,GAAD,CAAM8F,KAAM9F,EACNW,oBAAqBA,EACrBnK,SAAUA,EACVH,OAAQA,GAHM2J,EAAE1J,aCKnDoQ,G,4MAOF7B,cAAgB,SAAC9O,GAAuB,IAE/BN,EAAY,EAAKsC,MAAjBtC,SACL,EAAKsC,MAAMxC,SAASQ,EAAYN,I,EAGpC+I,OAAS,kBACL,qCACK,EAAKzG,MAAM2I,WAAa,cAAC6B,GAAA,EAAD,IAAe,KAExC,cAAC,GAAD,CAAO/B,MAAO,EAAKzI,MAAMyI,MAClBnK,OAAQ,EAAK0B,MAAM1B,OACnBG,SAAU,EAAKuB,MAAMvB,SACrBf,SAAU,EAAKsC,MAAMtC,SACrBgL,gBAAiB,EAAK1I,MAAM0I,gBAC5BjL,YAAa,EAAKuC,MAAMvC,YACxBqP,cAAe,EAAKA,cACpBlE,oBAAqB,EAAK5I,MAAM4I,0B,kEAvB3B,MAEclC,KAAK1G,MAA9BvC,EAFW,EAEXA,YAAaC,EAFF,EAEEA,SAClBgJ,KAAK1G,MAAMxC,SAASC,EAAaC,O,GAJZoJ,IAAMC,WA0C/B6H,GAAgC3H,YAAW0H,IAEhCrK,gBAdS,SAACC,GACrB,MAAO,CACHkE,MAAO0D,GAAiB5H,GACxB7G,SAAU2O,GAAY9H,GACtBmE,gBAAiB4D,GAAmB/H,GACpC9G,YAAa8O,GAAehI,GAC5BoE,WAAY6D,GAAcjI,GAC1BqE,oBAAqB6D,GAAuBlI,MAQhD,CACIjG,OVyGc,SAACC,GAAD,8CAClB,WAAOsG,GAAP,SAAAuB,EAAA,sDACI6C,GAAoB1K,EAAIsG,EAAUtH,IAASe,OAAOuQ,KAAKtR,KAAWsL,IADtE,2CADkB,uDUxGdpK,SViHgB,SAACF,GAAD,8CAA2B,WAAOsG,GAAP,SAAAuB,EAAA,sDAC/C6C,GAAoB1K,EAAIsG,EAAUtH,IAASkB,SAASoQ,KAAKtR,KAAWuL,IADrB,2CAA3B,uDUhHhBtL,SV0EoB,SAACsR,EAAuBpR,GAAxB,8CACxB,WAAOmH,EAAUkK,GAAjB,eAAA3I,EAAA,6DACIvB,EAASkE,IAAoB,IAC7BlE,EArCyD,CAC7DJ,KAAM4D,GACN5K,YAmC4BqR,IAF5B,SAGqBvR,IAASC,SAASsR,EAAMpR,GAH7C,OAGQI,EAHR,OAII+G,GA/CiB4D,EA+CC3K,EAAKkR,MA/CsB,CACjDvK,KAAM2D,GACNK,WA8CI5D,GAhC2BiF,EAgCChM,EAAKgM,WAhCkB,CACvDrF,KAAM6D,GACNwB,gBA+BIjF,EAASkE,IAAoB,IANjC,iCA3B8B,IAACe,EAhBVrB,IA2CrB,OADwB,0DU9EbnE,CAMbsK,IC3EIK,GAAmBnI,IAAMoI,MAAK,kBAAM,iCACpCC,GAAmBrI,IAAMoI,MAAK,kBAAM,uDAkB7BE,GAAb,kLAGQ1I,KAAK1G,MAAMqP,kBAHnB,+BAQQ,OAAK3I,KAAK1G,MAAMqJ,YAMZ,sBAAKnJ,UAAU,cAAf,UACI,wBAAQA,UAAU,SAAlB,SACI,cAAC,GAAD,MAEJ,qBAAKA,UAAU,sBAAf,SACI,uBAAMA,UAAU,UAAhB,UACI,qBAAKA,UAAU,GAAf,SACI,cAAC,EAAD,MAEJ,cAAC,WAAD,CAAUqK,SAAU,cAACC,GAAA,EAAD,IAApB,SACI,qBAAKtK,UAAU,eAAf,SACI,sBAAKA,UAAU,OAAf,UACI,cAAC,IAAD,CAAOoP,OAAK,EAACC,KAAK,IAAI9I,OAAQ,kBAAM,cAAC,IAAD,CAAU9E,GAAI,gBAClD,cAAC,IAAD,CAAO4N,KAAK,oBAAoB9I,OAAQ6D,GAAa6E,MACrD,cAAC,IAAD,CAAOI,KAAK,WAAW9I,OAAQ6D,GAAa2E,MAC5C,cAAC,IAAD,CAAOM,KAAK,YAAY9I,OAAQ,kBAAM,cAACpC,EAAD,OACtC,cAAC,IAAD,CAAOkL,KAAK,QAAQ9I,OAAQ,kBAAM,cAAC,EAAD,OAClC,cAAC,IAAD,CAAO8I,KAAK,SAAS9I,OAAQ,kBAAM,cAAC,EAAD,OACnC,cAAC,IAAD,CAAO8I,KAAK,SAAS9I,OAAQ,kBAAM,cAAC,GAAD,OACnC,cAAC,IAAD,CAAO8I,KAAK,YAAY9I,OAAQ,kBAAM,cAAC6E,GAAD,OACtC,cAAC,IAAD,CAAOiE,KAAK,SAASxL,UAAW,kBAAM,cAAC,GAAD,OACtC,cAAC,IAAD,CAAOwL,KAAK,IAAI9I,OAAQ,kBAAM,0DAK1C,qBAAKvG,UAAU,uBAAf,SACI,cAACwE,EAAD,cAhCT,cAAC8F,GAAA,EAAD,QATnB,GAAyB1D,IAAMC,WAmD3ByI,GAAeC,aACfnL,aA1DkB,SAACC,GACnB,MAAO,CACH8E,YAAa9E,EAAM0F,IAAIZ,eAwD6D,CAACgG,cV9ChE,yDAAiB,WAAOxK,GAAP,eAAAuB,EAAA,sEACtBvB,EAASsB,KADa,OACtCuJ,EADsC,OAE1CC,QAAQC,IAAI,CAACF,IAAU9R,MAAK,kBACxBiH,EAR0B,CAC9BJ,KAAM2E,QAIoC,2CAAjB,wDU8CzB9E,CAAyG8K,KAGhGS,GAAU,WACnB,OAAO,cAAC,IAAMC,WAAP,UACH,cAAC,IAAD,UACI,cAAC,IAAD,CAAU5F,MAAOA,GAAjB,SACI,cAACsF,GAAD,WCrFIO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvJ,MACvB,2DAwHC,SAASwJ,KACV,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1S,MAAK,SAAA2S,GACJA,EAAaJ,gBAEdK,OAAM,SAAA1P,GACL3C,QAAQ2C,MAAMA,EAAMsG,YC3I5BqJ,IAAShK,OACL,cAAC,GAAD,IACAiK,SAASC,eAAe,SAG5BN,KAMAA,M,mBChBAvT,EAAOC,QAAU,CAAC,cAAgB,gCAAgC,cAAgB,gCAAgC,cAAgB,gCAAgC,OAAS,yBAAyB,uBAAyB,yCAAyC,YAAc,8BAA8B,YAAc,8BAA8B,YAAc,gC,mBCA5WD,EAAOC,QAAU,CAAC,UAAY,mCAAmC,cAAgB,uCAAuC,iBAAmB,4C,6ECD5H,G,KAAA,IAA0B,uCCG5ByN,EAAY,WACrB,OACI,mCACI,qBAAKnF,IAAKuL,EAAWtL,IAAI,kB,mBCLrCxI,EAAOC,QAAU,CAAC,IAAM,oBAAoB,SAAW,yBAAyB,SAAW,yBAAyB,cAAgB,gC,mBCApID,EAAOC,QAAU,CAAC,KAAO,qCAAqC,KAAO,qCAAqC,cAAgB,gD,gCCD3G,QAA0B,mC,gCCAzC,oEAAO,IAAMoH,EAAgB,SAAC0M,GAC1B,IAAGA,EACH,MAAO,qBAIEpO,EAAmB,SAACqO,GAAD,OAAsB,SAACD,GACnD,GAAGA,EAAMxJ,OAASyJ,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,yUCgB3BC,EAAW,mCACXC,EAAmB,2CACnBC,EAAa,qCACbC,EAAgB,wCAChBC,EAAa,qCAEf/O,EAAe,CACfgP,MAAO,CACH,CAAC7S,GAAI,EAAG6I,QAAS,2IAA8BiK,KAAM,IACrD,CAAC9S,GAAI,EAAG6I,QAAS,gGAAsBiK,KAAM,IAC7C,CAAC9S,GAAI,EAAG6I,QAAS,6EAAkBiK,KAAM,IAuB7CpR,QAAS,KAETpB,OAAQ,IAGC4K,EAAiB,WAAiE,IAAhElF,EAA+D,uDAAvDnC,EAAcuH,EAAyC,uCAC1F,OAAQA,EAAOlF,MACX,KAAKsM,EACD,OAAO,2BACAxM,GADP,IAEI6M,MAAM,CAAE,CAAC7S,GAAI,EAAG6I,QAASuC,EAAO2H,YAAaD,KAAM,KAA9C,mBAAsD9M,EAAM6M,UAGzE,KAAKJ,EACD,OAAO,2BACAzM,GADP,IAEItE,QAAS0J,EAAO1J,UAGxB,KAAKgR,EAML,KAAKC,EACD,OAAO,2BACA3M,GADP,IAEI1F,OAAQ8K,EAAO9K,SAGvB,KAAKsS,EACD,OAAO,2BACA5M,GADP,IACctE,QAAQ,2BAAKsE,EAAMtE,SAAZ,IAAqB0K,OAAQhB,EAAO3K,UAG7D,QACI,OAAOuF,IAONgN,EAAY,SAACD,GAAD,MAA0B,CAAC7M,KAAMsM,EAAUO,gBAqBvDE,EAAmB,SAAC3S,GAAD,MAAqB,CACjD4F,KAAMyM,EACNrS,WAMS4S,EAAc,SAACzS,GAAD,MAAuB,CAC9CyF,KAAM0M,EACNnS,UAOSgN,EAAiB,SAAC9N,GAAD,8CAA+B,WAAO2G,GAAP,eAAAuB,EAAA,sEACxC7I,IAASU,WAAWC,GADoB,OACrDJ,EADqD,OAEzD+G,EAnCqD,CACrDJ,KAAMuM,EACN/Q,QAiCwBnC,IAFiC,2CAA/B,uDASjBa,EAAY,SAACT,GAAD,8CAA8B,WAAO2G,GAAP,eAAAuB,EAAA,sEACnC/H,IAAWM,UAAUT,GADc,OAC/CsB,EAD+C,OAEnDqF,GApC0BhG,EAoCHW,EAAI1B,KApCmB,CAC9C2G,KAAMwM,EACNpS,YAgCmD,iCAlC1B,IAACA,IAkCyB,OAA9B,uDASZD,EAAe,SAACC,GAAD,8CAA+B,WAAOgG,GAAP,SAAAuB,EAAA,sEACvC/H,IAAWO,aAAaC,GADe,cAE/Cf,KAAKuI,aAAerJ,IAAgBsJ,SACxCzB,EAAS2M,EAAiB3S,IAHyB,2CAA/B,uDAWfE,EAAY,SAACC,GAAD,8CAA8B,WAAO6F,GAAP,eAAAuB,EAAA,sEACnC/H,IAAWU,UAAUC,GADc,QAC/CQ,EAD+C,QAE3C1B,KAAKuI,aAAerJ,IAAgBsJ,UACxCnI,QAAQoI,IAAI,gBAAgB/G,EAAI1B,KAAKA,MAErC+G,EAAS4M,EAAYjS,EAAI1B,KAAKA,QALiB,2CAA9B,uDAaZsB,EAAgB,SAACC,GAAD,8CAAsC,WAAOwF,EAAUkK,GAAjB,iBAAA3I,EAAA,6DAC3DlI,EAAS6Q,IAAW7H,KAAK3I,GADkC,SAE/CF,IAAWe,cAAcC,GAFsB,WAE3DG,EAF2D,QAGvD1B,KAAKuI,aAAerJ,IAAgBsJ,QAHmB,gBAK3DzB,EAASmH,EAAe9N,IALmC,8BAQ3D2G,EAASyC,YAAW,eAAgB,CAACC,OAAQ/H,EAAI1B,KAAKuE,SAAS,MARJ,kBASpDsN,QAAQ+B,OAAOlS,EAAI1B,KAAKuE,SAAS,KATmB,4CAAtC,0D,mBCnL7BvF,EAAOC,QAAU,CAAC,aAAe,8BAA8B,aAAe,8BAA8B,mBAAqB,oCAAoC,OAAS,0B,mBCA9KD,EAAOC,QAAU,CAAC,gBAAkB,mCAAmC,WAAa,8BAA8B,KAAO,2B","file":"static/js/main.5812859e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3oI2W\",\"error\":\"FormsControls_error__9lcue\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"site_name\":\"Header_site_name__1fFFR\",\"login\":\"Header_login__31kC2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"h1\":\"Login_h1__3d9UL\",\"formSummaryError\":\"Login_formSummaryError__3l-5r\"};","import axios from \"axios\";\nimport {PhotosType, ProfileType, UserType} from \"../types/types\";\n\nexport enum ResultCodesEnum {\n    Success = 0,\n    Error = 1,\n    captchaIsRequired = 10\n}\n\nlet instance = axios.create({\n\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        \"API-KEY\": \"60b88672-b40f-4a98-87f4-2eaf9580a4aa\"\n    }\n\n})\n\n//typing\ntype getUsersType = {\n    items: Array<UserType>\n    totalCount: number,\n    error: null | string\n}\n\ntype followUnfollowType = {\n    resultCode: ResultCodesEnum\n    messages: Array<string>,\n    data: {}\n}\n//typing\n\nexport const usersAPI = {\n    getUsers(currentPage: string | number, pageSize: number) {\n        return instance.get<getUsersType>(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data)\n    },\n\n    getUsersPage(pageNumber: string | number, pageSize: number) {\n        return instance.get<getUsersType>(`users?page=${pageNumber}&count=${pageSize}`).then(response => response.data)\n    },\n\n    getProfile(userId: string) {\n        console.warn(\"Obsolete method. Please profileAPI object\")\n        return profileAPI.getProfile(userId)\n    },\n\n    follow(id: number) {\n        return instance.post<followUnfollowType>(`https://social-network.samuraijs.com/api/1.0/follow/${id}`)\n    },\n\n    unfollow(id: number) {\n        return instance.delete<followUnfollowType>(`https://social-network.samuraijs.com/api/1.0/follow/${id}`)\n    }\n}\n\n//typing\ntype updateStatusType = {\n    resultCode: ResultCodesEnum\n    fieldsErrors: Array<any>\n    messages: Array<string>\n    data: {}\n}\n\ntype savePhotoType = {\n    resultCode: ResultCodesEnum\n    messages: Array<string>\n    data: {\n        small: string | null\n        large: string | null\n    }\n}\n\ntype updateProfileType = {\n    resultCode: ResultCodesEnum\n    messages: Array<string>,\n    data: PhotosType\n}\n//typing\n\nexport const profileAPI = {\n    getProfile(userId: string) {\n        console.warn(\"Obsolete method. Please profileAPI object\")\n        return instance.get<ProfileType>(`profile/${userId}`).then(response => response.data)\n    },\n\n    getStatus(userId: string) {\n        return instance.get<string>(`profile/status/` + userId)\n    },\n\n    updateStatus(status: string) {\n        return instance.put<updateStatusType>(`profile/status`, {status: status})\n    },\n\n    savePhoto(photo: string) {\n        const formData = new FormData()\n        formData.append(\"image\", photo)\n        return instance.put<savePhotoType>(`/profile/photo`, formData, {headers: {'Content-Type': 'multipart/form-data'}})\n    },\n\n    updateProfile(dataForm: ProfileType) {\n        return instance.put<updateProfileType>(`/profile`, dataForm)\n    }\n}\n\n//typing\ntype MeResponseType = {\n    data: {\n        id: number\n        email: string\n        login: string\n    },\n    resultCode: ResultCodesEnum,\n    messages: Array<string>\n}\n\n\ntype LoginResponseType = {\n    data: {\n        userId: number\n    }\n    resultCode: ResultCodesEnum\n    messages: Array<string>\n}\n\n//typing\nexport const authAPI = {\n    me() {\n        return instance.get<MeResponseType>('auth/me').then(res => res.data)\n    },\n\n    login(email: string, password: string, rememberMe: boolean, captcha?: any) {\n        return instance.post<LoginResponseType>('/auth/login', {email, password, rememberMe, captcha})\n    },\n\n    logout() {\n        return instance.delete('/auth/login')\n    }\n}\n","import s from './ProfileInfoDescription.module.sass'\nimport React from \"react\";\nimport {ProfilePageType, ProfileType} from \"../../../../types/types\";\n\ntype ProfileInfoDescriptionType = {\n    profile: ProfileType\n}\n\nexport const ProfileInfoDescription: React.FC<ProfileInfoDescriptionType> = (\n    props) => {\n    /*userId: number\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    fullName: string\n    aboutMe: string\n    contacts: ContactsType\n    photos: PhotosType*/\n    /* let contact = profile !== null && profile !== undefined && Object\n         .values(profile.contacts)\n         .filter(item => item !== null)\n         .map((a: any) => {\n             return <div key={a} className={s.contact}>\n                 <a rel=\"stylesheet\" href={a}>{a} </a>\n             </div> //6326\n         })*/\n\n    return (\n        <div>\n            {props.profile !== null &&\n            <ul className={s.list}>\n                <li className={s.item}>\n                    {/*<span className={s.item_fullName}>fullName:</span>*/}\n                    <span className={s.item_fullName}><b>{props.profile.fullName}</b></span>\n                </li>\n\n                {\n                    props.profile.lookingForAJobDescription &&\n                    <li className={s.item}>\n                        <span>Description:</span>\n                        {props.profile.lookingForAJobDescription}\n                    </li>\n                }\n\n                {\n                    props.profile.lookingForAJob &&\n                    <li className={s.item}>\n                        <span>lookingForAJob:</span>\n                        {props.profile.lookingForAJob}\n                    </li>\n                }\n\n                {\n                    props.profile.aboutMe &&\n                    <li className={s.item}>\n                        <span>AboutMe:</span>\n                        {props.profile.aboutMe}\n                    </li>\n                }\n\n                {/*<div>\n                    Contacts:\n                    {\n                        props.profile &&\n                        Object.keys(props.profile.contacts).map(c => <div key={\"contacts.\" + c}>{props.profile.contacts[c]}</div>)\n                    }\n                </div>*/}\n\n            </ul>}\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__2Whu_\",\"users_list\":\"Users_users_list__3DzG6\",\"user\":\"Users_user__12P5P\",\"user_avatar\":\"Users_user_avatar__1PI_a\",\"avatar\":\"Users_avatar__28Uw_\",\"follow_unfollow_button\":\"Users_follow_unfollow_button__2kgTj\",\"user_info\":\"Users_user_info__jMX1k\",\"user_info_name\":\"Users_user_info_name__YGCc9\",\"user_name\":\"Users_user_name__1Vq5z\"};","import React from 'react'\nimport s from './FormsControls.module.css'\n\n\nexport const FormControl = ({input, meta: {error, touched}, child, el, children, ...props}: any) => {\n    const hasError = error && touched\n    return (\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\n            <div>\n                {children}\n                {/*{React.createElement(el, {...input, ...props})}*/}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea = (props: any) => {\n    const {input, meta, child, ...restProps} = props\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\n}\n\nexport const Input = (props: any) => {\n    const {input, meta, child, ...restProps} = props\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\n}\n\nexport const Checkbox = (props: any) => {\n    const {checkbox, meta, child, ...restProps} = props\n    return <FormControl {...props}><input {...checkbox} {...restProps}/></FormControl>\n}\n\n","import React from 'react'\nimport s from \"../Navbar.module.sass\";\nimport {NavLink} from \"react-router-dom\";\n\nexport type MenuItemType = {\n    to: string\n    item: string\n}\n\nexport const MenuItem = (props: MenuItemType) => {\n    return (\n        <li className={s.nav_item}>\n            <NavLink className={s.nav_item_link}\n                     to={props.to}\n                     activeClassName={s.active}>\n                {/*<img src={profile} alt=\"profile\"/>*/}\n                <span>{props.item}</span>\n            </NavLink>\n        </li>\n    )\n}","import React from \"react\";\nimport s from \"./Navbar.module.sass\";\nimport {MenuItem} from \"./MenuItem/MenuItem\";\n\nconst Navbar: React.FC = () => {\n\n    return (\n        <nav className={s.nav}>\n            <ul className={s.nav_list}>\n                {/*NavLink - не перезагружая страницу, меняем адресную строку*/}\n                <MenuItem to={\"/profile\"} item={\"Profile\"}/>\n                <MenuItem to={\"/dialogs\"} item={\"Dialogs\"}/>\n                <MenuItem to={\"/news\"} item={\"News\"}/>\n                <MenuItem to={\"/music\"} item={\"Music\"}/>\n                <MenuItem to={\"/settings\"} item={\"Settings\"}/>\n                <MenuItem to={\"/users\"} item={\"Users\"}/>\n            </ul>\n        </nav>\n    )\n}\n\nexport default Navbar;","import React from \"react\";\nimport s from \"./News.module.sass\";\n\nconst News = () => {\n    return (\n        <div>\n            Dialogs\n        </div>\n    )\n}\n\nexport default News;","import React from \"react\";\nimport s from \"./Music.module.sass\";\n\nconst Music = () => {\n    return (\n        <div>\n            Music\n        </div>\n    )\n}\n\nexport default Music;","//typing\nexport type MessageType = {\n    id: number\n    name: string\n    textMessage: string\n}\n\n/*export type MessagesPageType = {\n    messages: Array<MessageType>\n}*/\n\ntype initialStateType = typeof initialState\ntype ActionType = addMessageType\n//typing\n\nexport const ADD_MESSAGE = \"samurai-network/message/ADD_MESSAGE\"\n\nlet initialState = {\n    messages: [\n        {id: 1, name: \"Он\", textMessage: \"Hello\"},\n        {id: 2, name: \"Ты\", textMessage: \"Hello\"},\n        {id: 1, name: \"Он\", textMessage: \"Ты такая хорошая! Ты даже лучше, чем сахар!\"},\n        {id: 2, name: \"Ты\", textMessage: \"Спасибо! Приходи сегодня\"},\n    ] as Array<MessageType>\n}\n\nexport type addMessageType = ReturnType<typeof addMessage>\n\nexport const messageReducer = (state = initialState, action: ActionType): initialStateType => {\n    switch (action.type) {\n        case ADD_MESSAGE:\n            return {\n                ...state,\n                messages: [...state.messages, {id: 2, name: \"Ты\", textMessage: action.newMessageText}]\n            };\n\n        default:\n            return state\n    }\n}\n\n//newMessageText: string\n//action creator\n//object\nexport const addMessage = (newMessageText: string) => ({type: ADD_MESSAGE, newMessageText} as const)","import React from \"react\";\nimport s from \"./Messages.module.sass\";\nimport {NavLink} from \"react-router-dom\";\nimport Button from '@material-ui/core/Button';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\nimport {MessageType} from \"../../../redux/message-reducer\";\n\ntype MessagesType = {\n    messages: Array<MessageType>\n    addMessage: (newMessageText: string) => void\n}\n\nconst maxLength50 = maxLengthCreator(50)\n\nconst Messages: React.FC<MessagesType> = ({messages, addMessage}) => {\n    let newMessages = messages.map(m => <div key={m.id} className={s.dialog_body}>\n        {/*Не охота верстать, сделать потом*/}\n\n        <div className={m.id === 1 ? s.message_one : \"\"}>\n            <div>{m.id === 1 ? m.name : null}</div>\n            <div>{m.id === 1 ? m.textMessage : null}</div>\n        </div>\n        <div className={m.id === 2 ? s.message_two : \"\"}>\n            <div>{m.id === 2 ? m.name : null}</div>\n            <div>{m.id === 2 ? m.textMessage : null}</div>\n        </div>\n\n\n    </div>)\n\n    const onSubmit = (formData: MessagesPropsFormType) => {\n        addMessage(formData.newMessageText)\n    }\n\n    return (\n        <div className={s.dialog_window}>\n            <div className={s.dialog_header}>\n                <NavLink to=\"/dialogs\">\n                    <Button variant=\"contained\" color=\"default\">Exit</Button>\n                </NavLink>\n                <div>Avatar + name</div>\n            </div>\n            {newMessages}\n            <MessagesReduxForm onSubmit={onSubmit}/>\n\n        </div>\n    )\n}\n\nexport default Messages;\n\nexport type MessagesPropsFormType = {\n    newMessageText: string\n}\n\nexport const MessagesForm: React.FC<InjectedFormProps<MessagesPropsFormType>> = ({handleSubmit}) => {\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className={s.dialog_footer}>\n                <Field\n                    component={Textarea}\n                    name={\"newMessageText\"}\n                    placeholder={\"Enter your message\"}\n                    className={s.dialog_footer_textarea}\n                    validate={[requiredField, maxLength50]}\n                />\n\n                <button className={s.button}>Send</button>\n            </div>\n        </form>\n    )\n}\n\nexport const MessagesReduxForm = reduxForm<MessagesPropsFormType>({\n    form: 'newMessageText'\n})(MessagesForm)","import React from \"react\";\nimport {addMessage, MessageType} from \"../../../redux/message-reducer\";\nimport Messages from \"./Messages\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/redux-store\";\n\ntype mapStateToPropsType = {\n    messages: Array<MessageType>\n}\n\ntype mapDispatchToPropsType = {\n    addMessage: (newMessageText: string) => void\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        messages: state.messagesPage.messages\n    }\n}\n\n/*https://stackoverflow.com/questions/49808004/parameter-dispatch-implicitly-has-an-any-type*/\n/*const mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        addMessage: (newMessageText: string) => {\n            dispatch(addMessageAC(newMessageText));\n        }\n    }\n}*/\n\nexport const MessagesContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps,\n    {\n        addMessage\n    }\n)(Messages)\n","import React from \"react\";\nimport {Friends} from \"./Friends\";\nimport {connect} from \"react-redux\";\nimport {AppStateType, FriendType} from \"../../../redux/redux-store\";\n\n\ntype mapStateToPropsType = {\n    friends: Array<FriendType>\n}\n\ntype mapDispatchToPropsType = {\n\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        friends: state.sidebar.friends\n    }\n}\n\n/*https://stackoverflow.com/questions/49808004/parameter-dispatch-implicitly-has-an-any-type*/\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n\n    }\n}\nexport const FriendsContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(Friends)\n","import React from \"react\";\nimport {FriendType} from \"../../../redux/redux-store\";\nimport {Avatar} from \"@material-ui/core\";\nimport s from \"./Friends.module.sass\";\n\n\ntype FriendsType = {\n    friends: Array<FriendType>\n}\n\n\nexport const Friends: React.FC<FriendsType> = (props) => {\n\n    let friendsList = props.friends.map(f => <li key={f.id} className={s.friends_item}>\n        <div className={s.friends_item_photo}>\n            <img width={50} height={50} className={s.avatar} src={f.avatar} alt={f.name}/>\n        </div>\n\n        <span>{f.name}</span>\n    </li>)\n\n    return (\n        <ul className={s.friends_list}>\n            {friendsList}\n        </ul>\n        //@ts-ignore\n        /*<AvatarGroup className={s.friends_block} spacing={0} max={3}>\n            {friendsList}\n        </AvatarGroup>*/\n    )\n}","import React from \"react\";\nimport s from \"./Header.module.sass\";\nimport {NavLink} from \"react-router-dom\";\nimport avatar from \"./../../assets/image/ufo-2.png\"\nimport {authType} from \"../../redux/auth-reducer\";\n\ntype HeaderType = authType & {\n    logoutTC: () => void\n}\n\nconst Header: React.FC<HeaderType> = ({photo, logoutTC, isAuth, login}) => {\n    return (\n        <>\n\n            <div className={s.site_name}><span>S</span>pacebook</div>\n\n\n            <div className={s.login}>\n                {photo.small === \"\"\n                    ? <img src={avatar} width=\"40px\" height=\"40px\" alt=\"avatar\"/>\n                    : <img src={photo.small} width=\"40px\" height=\"40px\" alt=\"avatar\"/>}\n\n                {isAuth\n                    ? <div>{login} - <button onClick={logoutTC}>Log out</button></div>\n                    : <NavLink to={'/login'}>Login</NavLink>}\n            </div>\n        </>\n    )\n}\n\nexport default Header;","import {authAPI, ResultCodesEnum} from \"../api/api\";\nimport {Dispatch} from \"redux\";\nimport {stopSubmit} from \"redux-form\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {AppStateType} from \"./redux-store\";\n\n\n//typing\nexport type photoType = {\n    small: string,\n    large: string\n}\n\nexport type authType = {\n    id: number | null,\n    email: string | null,\n    login: string | null,\n    isAuth: boolean\n    photo: photoType\n}\n\nexport type setUserDataType = ReturnType<typeof setUserData>\nexport type setUserPhotoType = ReturnType<typeof setUserPhoto>\n\ntype ActionType = setUserDataType | setUserPhotoType\n\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionType>\n//typing\n\nexport const SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA'\nexport const SET_USER_PHOTO = 'samurai-network/auth/SET_USER_PHOTO'\n\nexport const initialState: authType = {\n    id: null as number | null,\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false,\n    photo: {\n        small: \"\",\n        large: \"\"\n    }\n}\n\nexport const authReducer = (state = initialState, action: ActionType): authType => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.payload\n            }\n\n        case SET_USER_PHOTO:\n            return {\n                ...state,\n                ...action.data\n            }\n\n        default:\n            return state\n    }\n}\n\n//id: number | null, email: string | null, login: string | null, isAuth: boolean\n//action creator\n//object\nconst setUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n    type: SET_USER_DATA,\n    payload: {id, email, login, isAuth}\n} as const)\n\n\n//small: string, large: string\n//action creator\n//object\nconst setUserPhoto = (small: string, large: string) => ({\n    type: SET_USER_PHOTO,\n    data: {small, large}\n} as const)\n\n//return function\n//dispatch\n//server request, dispatch action creator\nexport const getUserAuthData = (): ThunkType => async (dispatch: Dispatch) => {\n    let res = await authAPI.me()\n    if (res.resultCode === ResultCodesEnum.Success) {\n        let id = res.data.id\n        let email = res.data.email\n        let login = res.data.login\n        dispatch(setUserData(id, email, login, true))\n    }\n}\n\nconsole.log(\"getUserAuthData\", getUserAuthData())\n\n//userId: string\n//return function\n//dispatch\n//server request, dispatch action creator\nexport const getUserPhoto = (userId: string) => (dispatch: Dispatch) => {\n    /*usersAPI.getProfile(userId).then(response => {\n        if (response.data.resultCode === 0) {\n            let small = response.data.photos.small\n            let large = response.data.photos.large\n            dispatch(setUserPhoto(small, large))\n        }\n    })*/\n}\n\n//email: string, password: string, rememberMe: boolean, captcha?: boolean\n//return function\n//dispatch\n//server request, dispatch action creator\nexport const loginTC = (email: string, password: string, rememberMe: boolean, captcha?: boolean): ThunkType =>\n    async (dispatch) => {\n        let response = await authAPI.login(email, password, rememberMe, captcha)\n        if (response.data.resultCode === 0) {\n            dispatch(getUserAuthData() as any)\n        } else {\n            let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\"\n            //@ts-ignore\n            dispatch(stopSubmit(\"login\", {_error: message}))\n        }\n    }\n\n\n//return function\n//dispatch\n//server request, dispatch action creator\nexport const logoutTC = (): ThunkType => async (dispatch) => {\n    let response = await authAPI.logout()\n    if (response.data.resultCode === 0) {\n        dispatch(setUserData(null, null, null, false))\n    }\n}","import React from 'react'\nimport Header from \"./Header\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {getUserPhoto, logoutTC, photoType} from \"../../redux/auth-reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\n\ntype ParamsType = {\n    userId: string\n}\n\ntype mapStateToPropsType = {\n    id: number | null,\n    email: string | null,\n    login: string | null,\n    isAuth: boolean,\n    photo: photoType\n}\n\ntype mapDispatchToPropsType = {\n    /*getUserAuthData: () => void*/\n    getUserPhoto: (userId: string) => void\n    logoutTC: () => void\n}\n\ntype OwnHeaderContainerType = mapStateToPropsType & mapDispatchToPropsType\ntype HeaderContainerType = RouteComponentProps<ParamsType> & OwnHeaderContainerType\n\n\nclass HeaderContainer extends React.Component<HeaderContainerType> {\n    componentDidMount() {\n        /*//запрашиваем авторизационные данные\n        this.props.getUserAuthData()\n*/\n        //запрашиваем фото авторизованного пользователя\n        let userId = this.props.match.params.userId\n        this.props.getUserPhoto(userId)\n    }\n\n    render = () => <Header {...this.props}/>\n}\n\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        id: state.auth.id,\n        email: state.auth.email,\n        login: state.auth.login,\n        isAuth: state.auth.isAuth,\n        photo: state.auth.photo\n    }\n}\n\n\nlet WithUrlUsersDataContainerComponent = withRouter(HeaderContainer)\n\nexport default connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps,\n    {\n        /*getUserAuthData,*/\n        getUserPhoto,\n        logoutTC\n    })(WithUrlUsersDataContainerComponent)\n\n","import React from \"react\"\nimport s from './Login.module.sass'\nimport {reduxForm, InjectedFormProps} from \"redux-form\";\nimport {Field} from \"redux-form\";\nimport {Input} from \"../common/FormsControls/FormsControls\";\nimport {requiredField} from \"../../utils/validators/validators\";\nimport {connect} from \"react-redux\";\nimport {loginTC} from \"../../redux/auth-reducer\";\nimport {Redirect} from \"react-router-dom\";\nimport {AppStateType} from \"../../redux/redux-store\";\n\n\nconst Login = (props: any) => {\n    const onSubmit = (formData: FormDataType) => {\n        let email = formData.email\n        let password = formData.password\n        let rememberMe = formData.rememberMe\n        let captcha = formData.captcha\n        props.loginTC(email, password, rememberMe, captcha)\n    }\n\n    if (props.isAuth) {\n        <Redirect to={\"/profile\"}/>\n    }\n\n    return (\n        <div>\n            <h1 className={s.h1}>Login</h1>\n            <LoginReduxForm onSubmit={onSubmit}/>\n        </div>\n    )\n}\n\n\ntype mapDispatchToPropsType = {\n    loginTC: (email: string, password: string, rememberMe: boolean, captcha?: boolean) => void\n}\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport default connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {loginTC})(Login)\n\n\nexport type FormDataType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: boolean\n}\n\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}: any) => {\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div><Field component={Input}\n                        placeholder={\"Login\"}\n                        name={\"email\"}\n                        validate={[requiredField]}/>\n            </div>\n            <div><Field component={Input}\n                        placeholder={\"Password\"}\n                        name={\"password\"}\n                        validate={[requiredField]}\n                        type={\"password\"}/>\n            </div>\n            <div><Field component={Input}\n                        type={\"checkbox\"}\n                        name={\"rememberMe\"}/>\n                remember me\n            </div>\n            {error && <div className={s.formSummaryError}>{error}</div>}\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n}\n\n\nexport const LoginReduxForm = reduxForm<FormDataType>({\n    form: 'login'\n})(LoginForm)","let initialState = {\n    dialogs: [\n        {\n            id: 1,\n            name: \"Человек-1\",\n            lastMessage: \"Привет!\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 2,\n            name: \"Человек-2\",\n            lastMessage: \"Хочу предложить тебе новый способ заработать, сидя на диване\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 3,\n            name: \"Человек-3\",\n            lastMessage: \"Скинь фотки\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 4,\n            name: \"Человек-4\",\n            lastMessage: \"Сотку когда вернешь?\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 5,\n            name: \"Человек-5\",\n            lastMessage: \"Жрать охота\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        }\n    ]\n}\n\nexport function dialogsReducer(state = initialState, action: any) {\n    return state\n}\n","let initialState = {\n    friends: [\n        {\n            id: 1,\n            name: \"Друг-1\",\n            avatar: \"https://www.liga.net/images/general/2019/02/14/20190214174619-9721.png\"\n        },\n        {\n            id: 2,\n            name: \"Друг-2\",\n            avatar: \"https://www.liga.net/images/general/2019/02/14/20190214174624-8569.png\"\n        },\n        {\n            id: 3,\n            name: \"Друг-3\",\n            avatar: \"https://bugaga.ru/uploads/posts/2019-10/1569918369_lica-3.jpg\"\n        },\n\n        {\n            id: 4,\n            name: \"Друг-1\",\n            avatar: \"https://the-steppe.com/new_loc_2/files/Molya/fake-person-twitter-tesla.webp\"\n        },\n        {\n            id: 5,\n            name: \"Друг-2\",\n            avatar: \"https://texterra.ru/upload/img/10-08-2019/1.jpg\"\n        },\n        {\n            id: 6,\n            name: \"Друг-3\",\n            avatar: \"https://cs9.pikabu.ru/post_img/big/2019/05/12/5/1557646415132392289.png\"\n        }\n    ]\n}\n\nexport const sidebarReducer = (state = initialState, action: any) => {\n    return state\n}","export const updateObInArray = (item: any, itemId: any, objPropName: any, newObjProps: any) => {\n    return item.map((u: any) => {\n        return itemId === u[objPropName] ? {...u, ...newObjProps} : u\n    })\n}","import {ResultCodesEnum, usersAPI} from \"../api/api\";\nimport {Dispatch} from \"redux\";\nimport {updateObInArray} from \"../utils/object-helpers\";\nimport {UserType} from \"../types/types\";\nimport {AppStateType} from \"./redux-store\";\nimport {ThunkAction} from \"redux-thunk\";\n\n//typing\n/*export type UsersType = {\n    users: Array<UserType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number | string\n    isFetching: boolean\n    followingInProgress: Array<number>\n}*/\n\nexport type followACType = ReturnType<typeof followSuccess>\nexport type unfollowACType = ReturnType<typeof unfollowSuccess>\nexport type setUsersACType = ReturnType<typeof setUsers>\nexport type setCurrentPageACType = ReturnType<typeof setCurrentPage>\nexport type setTotalUsersCountACType = ReturnType<typeof setTotalUsersCount>\nexport type toggleIsFetchingACType = ReturnType<typeof setToggleIsFetching>\nexport type toggleFollowingProgressACType = ReturnType<typeof toggleFollowingProgress>\n\nexport type ActionType =\n    followACType\n    | unfollowACType\n    | setUsersACType\n    | setCurrentPageACType\n    | setTotalUsersCountACType\n    | toggleIsFetchingACType\n    | toggleFollowingProgressACType\n\ntype initialStateType = typeof initialState\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionType>\n//typing\n\nexport const FOLLOW = \"samurai-network/users/FOLLOW\"\nexport const UNFOLLOW = \"samurai-network/users/UNFOLLOW\"\nexport const SET_USERS = \"samurai-network/users/SET_USERS\"\nexport const SET_CURRENT_PAGE = \"samurai-network/users/SET_CURRENT_PAGE\"\nexport const SET_TOTAL_USERS_COUNT = \"samurai-network/users/SET_TOTAL_USERS_COUNT\"\nexport const TOGGLE_IS_FETCHING = \"samurai-network/users/TOGGLE_IS_FETCHING\"\nexport const TOGGLE_FOLLOWING_PROGRESS = \"samurai-network/users/TOGGLE_FOLLOWING_PROGRESS\"\n\nexport const initialState = {\n    users: [] as Array<UserType>,\n    pageSize: 50,\n    totalUsersCount: 0,\n    currentPage: 2 as number | string,\n    isFetching: false,\n    followingInProgress: [] as Array<number> // array of users id\n}\n\nexport const usersReducer = (state = initialState, action: ActionType): initialStateType => {\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: updateObInArray(state.users, action.id, \"id\", {followed: true})\n            }\n\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: updateObInArray(state.users, action.id, \"id\", {followed: false})\n            }\n\n        case SET_USERS:\n            return {\n                ...state,\n                users: action.users\n            }\n\n        case SET_CURRENT_PAGE:\n            return {\n                ...state,\n                currentPage: action.currentPage\n            }\n\n        case SET_TOTAL_USERS_COUNT:\n            return {\n                ...state,\n                totalUsersCount: action.totalCount\n            }\n\n        case TOGGLE_IS_FETCHING:\n            return {\n                ...state,\n                isFetching: action.isFetching\n            }\n\n        case TOGGLE_FOLLOWING_PROGRESS:\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : [...state.followingInProgress.filter(id => id !== action.userId)]\n            }\n        default:\n            return state\n    }\n}\n\n//id: number\n//action creator\n//object\nexport const followSuccess = (id: number) => ({\n    type: FOLLOW,\n    id\n} as const)\n\n//id: number\n//action creator\n//object\nexport const unfollowSuccess = (id: number) => ({\n    type: UNFOLLOW,\n    id\n} as const)\n\n//users: Array<UserType>\n//action creator\n//object\nexport const setUsers = (users: Array<UserType>) => ({\n    type: SET_USERS,\n    users\n} as const)\n\n//currentPage: number | string\n//action creator\n//object\nexport const setCurrentPage = (currentPage: number | string) => ({\n    type: SET_CURRENT_PAGE,\n    currentPage\n} as const)\n\n//totalCount: number\n//action creator\n//object\nexport const setTotalUsersCount = (totalCount: number) => ({\n    type: SET_TOTAL_USERS_COUNT,\n    totalCount\n} as const)\n\n//isFetching: boolean\n//action creator\n//object\nexport const setToggleIsFetching = (isFetching: boolean) => ({\n    type: TOGGLE_IS_FETCHING,\n    isFetching\n} as const)\n\n//isFetching: boolean, userId: number\n//action creator\n//object\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => ({\n    type: TOGGLE_FOLLOWING_PROGRESS,\n    isFetching,\n    userId\n} as const)\n\n//page: number | string, pageSize: number\n//return function\n//Dispatch<ActionType>, getState: () => AppStateType\n//server request getUsers, dispatch action creator\nexport const requestUsers = (page: number | string, pageSize: number): ThunkType =>\n    async (dispatch, getState) => {\n        dispatch(setToggleIsFetching(true))\n        dispatch(setCurrentPage(page))\n        let data = await usersAPI.getUsers(page, pageSize)\n        dispatch(setUsers(data.items))\n        dispatch(setTotalUsersCount(data.totalCount))\n        dispatch(setToggleIsFetching(false))\n    }\n\n//id: number, dispatch: Dispatch, apiMethod: any, actionCreator: any\n//server request follow-unfollow, dispatch action creator\nconst _followUnfollowFlow = async (id: number,\n                                   dispatch: Dispatch<ActionType>,\n                                   apiMethod: any,\n                                   actionCreator: (userId: number) => followACType | unfollowACType) => {\n\n    dispatch(toggleFollowingProgress(true, id))\n    let response = await apiMethod(id)\n    if (response.data.resultCode === ResultCodesEnum.Success) {\n        dispatch(actionCreator(id))\n    }\n    dispatch(toggleFollowingProgress(false, id))\n}\n\n//id: number\n//return function\n//dispatch\n//function followUnfollowFlow\nexport const follow = (id: number): ThunkType =>\n    async (dispatch) => {\n        _followUnfollowFlow(id, dispatch, usersAPI.follow.bind(usersAPI), followSuccess)\n    }\n\n//id: number\n//return function\n//dispatch\n//function followUnfollowFlow\nexport const unfollow = (id: number): ThunkType => async (dispatch) => {\n    _followUnfollowFlow(id, dispatch, usersAPI.unfollow.bind(usersAPI), unfollowSuccess)\n}\n","import {getUserAuthData} from \"./auth-reducer\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {AppStateType} from \"./redux-store\";\n\n//typing\ntype InitialStateType = {\n    initialized: boolean\n}\n\nexport type initializedSuccessType = ReturnType<typeof initializedSuccess>\ntype ActionType = initializedSuccessType\n\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionType>\n//typing\n\nexport const INITIALIZED_SUCCESS = 'samurai-network/app/INITIALIZED_SUCCESS'\n\nexport const initialState: InitialStateType = {\n    initialized: false\n}\n\n//state, action\n//change state\n//new state\nexport const appReducer = (state = initialState, action: ActionType): InitialStateType => {\n    switch (action.type) {\n        case INITIALIZED_SUCCESS:\n            return {\n                ...state,\n                initialized: true\n            }\n\n        default:\n            return state\n    }\n}\n\n//create action\n//object {type: INITIALIZED_SUCCESS}\nconst initializedSuccess = () => ({\n    type: INITIALIZED_SUCCESS\n} as const)\n\n\nexport const initializeApp = (): ThunkType => async (dispatch) => {\n    let promise = await dispatch(getUserAuthData() as any)\n    Promise.all([promise]).then(() =>\n        dispatch(initializedSuccess() as any)\n    )\n}\n\n","import {applyMiddleware, combineReducers, createStore, Store} from \"redux\";\nimport {profileReducer} from \"./profile-reducer\";\nimport {dialogsReducer} from \"./dialogs-reducer\";\nimport {messageReducer} from \"./message-reducer\";\nimport {sidebarReducer} from \"./sidebar-reducer\";\nimport {usersReducer} from \"./users-reducer\";\nimport {authReducer} from \"./auth-reducer\";\nimport thunkMiddleware from \"redux-thunk\";\nimport {reducer as formReducer} from 'redux-form';\nimport {appReducer} from \"./app-reducer\";\n\nlet rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    messagesPage: messageReducer,\n    sidebar: sidebarReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer\n})\n\n//типизируем reducers\nexport type RootReducerType = typeof rootReducer\n//типизируем state\nexport type AppStateType = ReturnType<RootReducerType>\n\nexport type StoreType = Store<AppStateType>\n/*export type StoreType = Store<AppStateType, actionType>*/\n\n//@ts-ignore\n/*const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nexport let store: StoreType = createStore(reducer, composeEnhancers(applyMiddleware(thunkMiddleware)));*/\n//создаем store\nexport let store: StoreType = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\n\n/*------------------------------------------------------*/\n\nexport type FriendType = {\n    id: number,\n    name: string,\n    avatar: string\n}\n\nexport type UsersLocationType = {\n    city: string\n    country: string\n}\n\n\nexport type SidebarFriendsType = {\n    friends: Array<FriendType>\n}\n\n\n/*---------------------------Users----------------------------*/\n/*export type UserType = {\n    id: number\n    name: string\n    status: string\n    photos: {\n        small: string\n        large: string\n    },\n    followed: boolean\n}\n\nexport type UsersType = {\n    users: Array<UserType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number | string\n    isFetching: boolean\n    followingInProgress: Array<number>\n}*/\n\n/*export type photoType = {\n    small: string,\n    large: string\n}*/\n/*---------------------------Users----------------------------*/\n\n/*---------------------------Auth----------------------------*/\n/*export type authType = {\n    id: number | null,\n    email: string | null,\n    login: string | null,\n    isAuth: boolean\n    photo: photoType\n}*/\n/*---------------------------Auth----------------------------*/\n\n\n\n","import {Preloader} from \"../components/common/Preloader/Preloader\";\nimport React, {Suspense} from \"react\";\n\nexport const withSuspense = (Component: any) => {\n    return (props: any) => {\n        return <Suspense fallback={<Preloader/>}>\n            <Component {...props}/>\n        </Suspense>\n    }\n\n\n}","import {Field, reduxForm} from \"redux-form\";\nimport {Input, Textarea} from \"../../common/FormsControls/FormsControls\";\nimport React from \"react\";\nimport s from './ProfileInfoForm.module.sass'\nimport avatar from \"../../../assets/image/ufo-2.png\";\n\n\ntype ProfileInfoFormType = {\n    profile: any\n    isOwner: boolean\n    savePhoto?: (photo: string) => void\n    refreshProfile: () => void\n}\n\n\nexport const ProfileInfoForm = ({profile, isOwner, handleSubmit, savePhoto, error}: any) => {\n\n    const onMainPhotoSelected = (e: any) => {\n        if (e.target.files.length) {\n            savePhoto(e.target.files[0])\n        }\n    }\n\n    return (\n        <div>\n            <div className={s.avatar}><img src={profile.photos.large || avatar}\n                                           alt=\"user avatar\"\n                                           width=\"180\"\n                                           height=\"180\"/></div>\n            <input type=\"file\" onChange={onMainPhotoSelected}/>\n\n            <form onSubmit={handleSubmit}>\n                <span className={s.item_form}> fullName:\n                    <Field component={Input}\n                           name={\"fullName\"}\n                           placeholder={\"Full name\"}\n                    />\n                </span>\n\n                <div className={s.item_form}> lookingForAJobDescription:\n                    <Field component={Input}\n                           name={\"lookingForAJobDescription\"}\n                           placeholder={\"Empty\"}\n                    />\n                </div>\n\n                <div className={s.item_form}> lookingForAJob:\n                    <Field component={Input}\n                           name={\"lookingForAJob\"}\n                           placeholder={\"Empty\"}\n                           type={\"checkbox\"}\n                    />\n                </div>\n\n                <div className={s.item_form}> AboutMe:\n                    <Field component={Textarea}\n                           name={\"aboutMe\"}\n                           placeholder={\"Empty\"}\n                    />\n                </div>\n\n\n                <div className={s.info_contacts}>contacts:\n                    {\n                        Object.keys(profile.contacts).map(c => <div>{c}<Field key={c}\n                                                                              component={Input}\n                                                                              name={\"contacts.\" + c}\n                                                                              placeholder={\"Empty\"}\n\n                        /></div>)\n                    }\n                </div>\n\n                {error && <div className={s.formSummaryError}>{error}</div>}\n\n                <button>Save</button>\n            </form>\n        </div>\n\n    )\n}\n\nexport const ProfileInfoFormRedux = reduxForm<ProfileInfoFormType>({\n    form: 'edit-profile'\n})(ProfileInfoForm)","import React, {useEffect, useState} from 'react'\nimport {ProfileInfoFormRedux} from \"../Profile/ProfileInfoForm/ProfileInfoForm\";\nimport {ProfileInfoDescription} from \"../Profile/ProfileInfo/ProfileInfoDescription/ProfileInfoDescription\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getUserProfile, updateProfile} from \"../../redux/profile-reducer\";\nimport {withRouter} from \"react-router-dom\";\nimport {ProfileType} from \"../../types/types\";\nimport {AppStateType} from \"../../redux/redux-store\";\n\n\ntype PathParamsType = {\n    userId: string\n}\n\n//@ts-ignore\nexport const Settings: React.FC<any> = withRouter(({savePhoto, match, history}) => {\n\n        let profileState = useSelector<AppStateType, ProfileType>(state => state.profilePage.profile)\n        let authorizedUserId = useSelector<AppStateType>(state => state.auth.id)\n\n        let [editMode, setEditMode] = useState<boolean>(false)\n        let dispatch = useDispatch()\n\n        let submitProfileInfoReduxForm = (dataForm: ProfileType) => {\n            dispatch(updateProfile(dataForm))\n            setEditMode(!editMode)\n        }\n\n        let userId = match.params.userId;\n\n        useEffect(() => {\n            dispatch(getUserProfile(userId));\n        }, [])\n\n\n        if (!userId) {\n            userId = authorizedUserId;\n            if (!userId) {\n                //Не самое лучшее решение, но по-быструхе можно так сделать\n                history.push(\"/login\");\n            }\n        }\n\n        return (\n            <div>\n                {\n                    editMode\n                        /*//@ts-ignore*/\n                        ? <div><ProfileInfoFormRedux initialValues={profileState}\n                                                     isOwner={match.params.userId}\n                                                     profile={profileState}\n                            //@ts-ignore\n                                                     onSubmit={submitProfileInfoReduxForm}\n                                                     savePhoto={savePhoto}\n                                                     setEditMode={setEditMode}\n                                                     editMode={editMode}\n                        />\n\n                        </div>\n                        : <div>\n                            <ProfileInfoDescription profile={profileState}/>\n                            {/*{isOwner && <button onClick={() => setEditMode(!editMode)}>Edit</button>}*/}\n                            <button onClick={() => setEditMode(!editMode)}>Edit</button>\n                        </div>\n                }\n            </div>\n        )\n    }\n)","import {AppStateType} from \"./redux-store\";\nimport {createSelector} from \"reselect\";\n\nexport const getUsers = (state: AppStateType) => {\n    return state.usersPage.users\n}\n\nexport const getUsersSelector = createSelector(getUsers, (users) => {\n    return users\n})\n\nexport const getPageSize = (state: AppStateType) => {\n    return state.usersPage.pageSize\n}\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n    return state.usersPage.totalUsersCount\n}\n\nexport const getCurrentPage = (state: AppStateType) => {\n    return state.usersPage.currentPage\n}\n\nexport const getIsFetching = (state: AppStateType) => {\n    return state.usersPage.isFetching\n}\n\nexport const getFollowingInProgress = (state: AppStateType) => {\n    return state.usersPage.followingInProgress\n}","import React, {useState} from 'react'\nimport s from \"../Paginator/Paginator.module.sass\"\n\nlet classNames = require('classnames')\n\ntype PropsType = {\n    pageSize: number\n    totalItemsCount: number\n    currentPage: number | string\n    onPageChanged: (pageNumber: number) => void\n    portionSize?: number\n}\n\nexport const Paginator: React.FC<PropsType> = (\n    {\n        totalItemsCount,\n        pageSize,\n        currentPage,\n        onPageChanged,\n        portionSize = 10\n    }) => {\n\n    //totalItemsCount -\n\n    //pagesCount - все странички\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\n    let pages: Array<number> = []\n    for (let i = 1; i < pagesCount; i++) {\n        pages.push(i)\n    }\n\n    //portionSize - размер порции\n    //portionCount - количество порций\n    let portionCount = Math.ceil(pagesCount / portionSize);\n    let [portionNumber, setPortionNumber] = useState<number>(1);\n    //левая граница порции\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n    //правая граница порции\n    let rightPortionPageNumber = portionNumber * portionSize;\n\n    return (\n        <div className={s.users_paginator}>\n\n            {\n                portionNumber > 1 &&\n                <button onClick={() => {\n                    setPortionNumber(portionNumber - 1)\n                }}>PREV</button>\n            }\n\n            {pages\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\n                .map((p) => {\n                    return (\n                        <div className={s.number}>\n                            <span className={classNames({\n                                [s.selectPage]: currentPage === p\n                            }, s.pageNumber)}\n                                  key={p}\n                                  onClick={() => {\n                                      onPageChanged(p);\n                                  }}>{p}</span>\n                        </div>\n                    )\n                })}\n\n            {\n                portionCount > portionNumber &&\n                <button onClick={() => {\n                    setPortionNumber(portionNumber + 1)\n                }}>NEXT</button>}\n\n        </div>\n    )\n}\n\n","import React from 'react'\nimport s from \"../Users.module.sass\"\nimport avatar from '../../../assets/image/ufo-2.png'\nimport {NavLink} from \"react-router-dom\";\nimport {UserType} from \"../../../types/types\";\n\ntype UsersType = {\n    user: UserType\n    follow: (id: number) => void\n    unfollow: (id: number) => void\n    followingInProgress: Array<number>\n}\n\nexport const User = ({user, followingInProgress, unfollow, follow}: UsersType) => {\n    return (\n        <div className={s.users}>\n\n            <div key={user.id} className={s.user}>\n\n                <div className={s.user_avatar}>\n                    <NavLink to={\"/profile/\" + user.id}>\n                        <img className={s.avatar}\n                             src={user.photos.large !== null ? user.photos.large : `${avatar}`}\n                             alt={user.name}\n                        />\n                    </NavLink>\n                </div>\n\n                <div className={s.button_followed}>\n                    {user.followed ?\n                        <button className={s.follow_unfollow_button}\n                                disabled={followingInProgress.some(id => id === user.id)}\n                                onClick={() => {\n                                    unfollow(user.id)\n                                }}>\n                            Unfollow\n                        </button>\n                        : <button className={s.follow_unfollow_button}\n                                  disabled={followingInProgress.some(id => id === user.id)}\n                                  onClick={() => {\n                                      follow(user.id)\n                                  }}>\n                            Follow\n                        </button>\n                    }\n                </div>\n\n                <div className={s.user_info}>\n                    <div className={s.user_info_name}>\n                        <div className={s.user_name}>{user.name}</div>\n                        <div className={s.user_status}>{user.status}</div>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\n","import React from 'react'\nimport s from \"./Users.module.sass\"\nimport {Paginator} from \"../common/Paginator/Paginator\";\nimport {User} from \"./User/User\";\nimport {UserType} from \"../../types/types\";\n\ntype PropsType = {\n    users: Array<UserType>\n    follow: (id: number) => void\n    unfollow: (id: number) => void\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number | string\n    onPageChanged: (pageNumber: number) => void\n    followingInProgress: Array<number>\n}\n\nexport const Users: React.FC<PropsType> = (\n    {\n        users,\n        totalUsersCount,\n        pageSize,\n        currentPage,\n        onPageChanged,\n        followingInProgress,\n        unfollow,\n        follow\n    }) => {\n\n    return (\n        <div className={s.users}>\n\n            <Paginator currentPage={currentPage}\n                       onPageChanged={onPageChanged}\n                       totalItemsCount={totalUsersCount}\n                       pageSize={pageSize}/>\n\n            <div className={s.users_list}>\n                {\n                    users.map(u => <User user={u} key={u.id}\n                                         followingInProgress={followingInProgress}\n                                         unfollow={unfollow}\n                                         follow={follow}/>)\n                }\n\n            </div>\n\n        </div>\n    )\n}\n","import {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {\n    follow,\n    unfollow,\n    requestUsers\n} from \"../../redux/users-reducer\";\nimport React from \"react\";\nimport {Preloader} from \"../common/Preloader/Preloader\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {\n    getCurrentPage, getFollowingInProgress,\n    getIsFetching,\n    getPageSize,\n    getTotalUsersCount,\n    getUsersSelector\n} from \"../../redux/users-selectors\";\nimport {Users} from \"./Users\";\nimport {UserType} from \"../../types/types\";\n\n\ntype PathParamsType = {\n    userId: string\n}\n\ntype mapStateToPropsType = {\n    users: Array<UserType>\n    totalUsersCount: number\n    currentPage: number | string\n    pageSize: number\n    isFetching: boolean\n    followingInProgress: Array<number>\n}\n\ntype mapDispatchToPropsType = {\n    follow: (id: number) => void\n    unfollow: (id: number) => void\n    getUsers: (currentPage: number | string, pageSize: number) => void\n}\n\ntype UsersContainerType = mapStateToPropsType & mapDispatchToPropsType\ntype ContainerType = RouteComponentProps<PathParamsType> & UsersContainerType\n\n\nclass UsersContainer extends React.Component<ContainerType> {\n    componentDidMount() {\n        //запрашиваем юзеров\n        let {currentPage, pageSize} = this.props\n        this.props.getUsers(currentPage, pageSize)\n    }\n\n    onPageChanged = (pageNumber: number) => {\n        //запрашиваем юзеров\n        let {pageSize} = this.props\n        this.props.getUsers(pageNumber, pageSize)\n    }\n\n    render = () =>\n        <>\n            {this.props.isFetching ? <Preloader/> : null}\n\n            <Users users={this.props.users}\n                   follow={this.props.follow}\n                   unfollow={this.props.unfollow}\n                   pageSize={this.props.pageSize}\n                   totalUsersCount={this.props.totalUsersCount}\n                   currentPage={this.props.currentPage}\n                   onPageChanged={this.onPageChanged}\n                   followingInProgress={this.props.followingInProgress}\n            />\n        </>\n}\n\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        users: getUsersSelector(state),\n        pageSize: getPageSize(state),\n        totalUsersCount: getTotalUsersCount(state),\n        currentPage: getCurrentPage(state),\n        isFetching: getIsFetching(state),\n        followingInProgress: getFollowingInProgress(state)\n    }\n}\n\n\nlet WithUrlDataContainerComponent = withRouter(UsersContainer)\n\nexport default connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps,\n    {\n        follow,\n        unfollow,\n        getUsers: requestUsers\n    }\n)(WithUrlDataContainerComponent)\n\n\n","import React, {Suspense} from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport {BrowserRouter, Redirect, Route} from \"react-router-dom\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport {MessagesContainer} from \"./components/Dialogs/Messages/MessagesContainer\";\nimport {FriendsContainer} from \"./components/Navbar/Friends/FriendsContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Login from \"./components/Login/Login\";\nimport {connect, Provider} from \"react-redux\";\nimport {AppStateType, store} from \"./redux/redux-store\";\nimport {compose} from \"redux\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport {Preloader} from \"./components/common/Preloader/Preloader\";\nimport {withSuspense} from \"./hoc/withSuspense\";\nimport {Settings} from \"./components/Settings/Settings\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\n\n\ntype AppContainerType = mapStateToPropsType & mapDispatchToPropsType\ntype mapDispatchToPropsType = {\n    initializeApp: () => void\n}\n\ntype mapStateToPropsType = {\n    initialized: boolean\n}\n\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        initialized: state.app.initialized\n    }\n}\n\nexport class App extends React.Component<AppContainerType> {\n    componentDidMount() {\n        //запрашиваем авторизационные данные\n        this.props.initializeApp()\n    }\n\n    render() {\n\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n\n        return (\n\n            <div className='app-wrapper'>\n                <header className=\"header\">\n                    <HeaderContainer/>\n                </header>\n                <div className=\"app-wrapper-content\">\n                    <main className=\"content\">\n                        <div className=\"\">\n                            <Navbar/>\n                        </div>\n                        <Suspense fallback={<Preloader/>}>\n                            <div className=\"main_content\">\n                                <div className=\"main\">\n                                    <Route exact path=\"/\" render={() => <Redirect to={'/profile'}/>}/>\n                                    <Route path=\"/profile/:userId?\" render={withSuspense(ProfileContainer)}/>\n                                    <Route path=\"/dialogs\" render={withSuspense(DialogsContainer)}/>\n                                    <Route path=\"/messages\" render={() => <MessagesContainer/>}/>\n                                    <Route path=\"/news\" render={() => <News/>}/>\n                                    <Route path=\"/music\" render={() => <Music/>}/>\n                                    <Route path=\"/users\" render={() => <UsersContainer/>}/>\n                                    <Route path=\"/settings\" render={() => <Settings/>}/>\n                                    <Route path=\"/login\" component={() => <Login/>}/>\n                                    <Route path=\"*\" render={() => <div>404 NOT FOUND</div>}/>\n                                </div>\n                            </div>\n                        </Suspense>\n\n                        <div className=\"main_content_friends\">\n                            <FriendsContainer/>\n                        </div>\n                    </main>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nlet AppContainer = compose(\n    connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {initializeApp})(App)\n);\n\nexport const MainApp = () => {\n    return <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <AppContainer/>\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport  {MainApp} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <MainApp/>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog_window\":\"Messages_dialog_window__NGXtj\",\"dialog_header\":\"Messages_dialog_header__2NTHl\",\"dialog_footer\":\"Messages_dialog_footer__3sNge\",\"button\":\"Messages_button__B4QTR\",\"dialog_footer_textarea\":\"Messages_dialog_footer_textarea__2wUAq\",\"dialog_body\":\"Messages_dialog_body__eTCSO\",\"message_one\":\"Messages_message_one__158ii\",\"message_two\":\"Messages_message_two__1bHxW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item_form\":\"ProfileInfoForm_item_form__3nt98\",\"info_contacts\":\"ProfileInfoForm_info_contacts__2Qd81\",\"formSummaryError\":\"ProfileInfoForm_formSummaryError__1uWbT\"};","export default __webpack_public_path__ + \"static/media/preloader.02e8bfc4.svg\";","import React from 'react'\nimport preloader from \"./../../../assets/image/preloader.svg\"\n\nexport const Preloader = () => {\n    return (\n        <>\n            <img src={preloader} alt=\"preloader\"/>\n        </>\n    )\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2G49n\",\"nav_list\":\"Navbar_nav_list__195P5\",\"nav_item\":\"Navbar_nav_item__l_UkN\",\"nav_item_link\":\"Navbar_nav_item_link__2kja5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ProfileInfoDescription_list__3P-_a\",\"item\":\"ProfileInfoDescription_item__14t3s\",\"item_fullName\":\"ProfileInfoDescription_item_fullName__1hW3I\"};","export default __webpack_public_path__ + \"static/media/ufo-2.3c1ecb26.png\";","export const requiredField = (value: string) => {\n    if(value) return undefined\n    return \"Field is required\"\n}\n\n\nexport const maxLengthCreator = (maxLength: number)=> (value: string) => {\n    if(value.length > maxLength) return `Max length is ${maxLength} symbols`\n    return undefined\n}\n\n","import {profileAPI, ResultCodesEnum, usersAPI} from \"../api/api\";\nimport {Dispatch} from \"redux\";\nimport {stopSubmit} from \"redux-form\";\nimport {photoType} from \"./auth-reducer\";\nimport {PostType, ProfileType} from \"../types/types\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {AppStateType} from \"./redux-store\";\nimport {FormAction} from \"redux-form/lib/actions\";\n\n//typing\nexport type addPostAC = ReturnType<typeof addPostAC>\nexport type setUserProfileType = ReturnType<typeof setUserProfile>\nexport type setUserStatus = ReturnType<typeof setUserStatus>\nexport type updateUserStatus = ReturnType<typeof updateUserStatus>\nexport type savePhotoACType = ReturnType<typeof savePhotoAC>\n\ntype ActionType = addPostAC | setUserProfileType | setUserStatus | updateUserStatus | savePhotoACType\n\ntype initialStateType = typeof initialState\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionType>\n//typing\n\n\nconst ADD_POST = \"samurai-network/profile/ADD_POST\"\nconst SET_PROFILE_INFO = \"samurai-network/profile/SET_PROFILE_INFO\"\nconst SET_STATUS = \"samurai-network/profile/SET_STATUS\"\nconst UPDATE_STATUS = \"samurai-network/profile/UPDATE_STATUS\"\nconst SAVE_PHOTO = \"samurai-network/profile/SAVE_PHOTO\"\n\nlet initialState = {\n    posts: [\n        {id: 1, message: \"Сегодня был чудесный день!\", like: 25},\n        {id: 2, message: \"Я покушал и поспал\", like: 40},\n        {id: 3, message: \"Но не выспался\", like: 1}\n    ] as Array<PostType>,\n    /* profile: {\n         userId: null,\n         lookingForAJob: false,\n         lookingForAJobDescription: null,\n         fullName: null,\n         contacts: {\n             github: null,\n             vk: null,\n             facebook: null,\n             instagram: null,\n             twitter: null,\n             website: null,\n             youtube: null,\n             mainLink: null\n         },\n         photos: {\n             small: null,\n             large: null\n         }\n     },*/\n\n    profile: null as ProfileType | null,\n\n    status: \"\"\n}\n\nexport const profileReducer = (state = initialState, action: ActionType): initialStateType => {\n    switch (action.type) {\n        case ADD_POST:\n            return {\n                ...state,\n                posts: [{id: 5, message: action.newPostText, like: 25}, ...state.posts],\n            }\n\n        case SET_PROFILE_INFO:\n            return {\n                ...state,\n                profile: action.profile\n            }\n\n        case SET_STATUS:\n            return {\n                ...state,\n                status: action.status\n            }\n\n        case UPDATE_STATUS:\n            return {\n                ...state,\n                status: action.status\n            }\n\n        case SAVE_PHOTO:\n            return {\n                ...state, profile: {...state.profile, photos: action.photo} as ProfileType\n            }\n\n        default:\n            return state\n    }\n}\n\n//newPostText: string\n//action creator\n//object\nexport const addPostAC = (newPostText: string) => ({type: ADD_POST, newPostText} as const)\n\n//profile: ProfileType\n//action creator\n//object\nexport const setUserProfile = (profile: ProfileType) => ({\n    type: SET_PROFILE_INFO,\n    profile\n} as const)\n\n//status: string\n//action creator\n//object\nexport const setUserStatus = (status: string) => ({\n    type: SET_STATUS,\n    status\n} as const)\n\n//status: string\n//action creator\n//object\nexport const updateUserStatus = (status: string) => ({\n    type: UPDATE_STATUS,\n    status\n} as const)\n\n//photo: string\n//action creator\n//object\nexport const savePhotoAC = (photo: photoType) => ({\n    type: SAVE_PHOTO,\n    photo\n} as const)\n\n//userId: string\n//return function\n//dispatch\n//server request, dispatch action creator\nexport const getUserProfile = (userId: string): ThunkType => async (dispatch) => {\n    let data = await usersAPI.getProfile(userId)\n    dispatch(setUserProfile(data))\n}\n//ThunkAction<Promise<void>, AppStateType, unknown, ActionType>\n//userId: string\n//return function\n//dispatch\n//server request, dispatch action creator\nexport const getStatus = (userId: string): ThunkType=> async (dispatch) => {\n    let res = await profileAPI.getStatus(userId)\n    dispatch(setUserStatus(res.data))\n}\n\n//status: string\n//return function\n//dispatch\n//server request, dispatch action creator\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\n    let res = await profileAPI.updateStatus(status)\n    if (res.data.resultCode === ResultCodesEnum.Success) {\n        dispatch(updateUserStatus(status))\n    }\n}\n\n//photo: string\n//return function\n//dispatch\n//server request, dispatch action creator\nexport const savePhoto = (photo: string): ThunkType => async (dispatch) => {\n    let res = await profileAPI.savePhoto(photo)\n    if (res.data.resultCode === ResultCodesEnum.Success) {\n        console.log(\"res.data.data\",res.data.data)\n        //@ts-ignore\n        dispatch(savePhotoAC(res.data.data))\n    }\n}\n\n//dataForm: ProfileType\n//return function\n//dispatch, getState\n//server request, dispatch action creator\nexport const updateProfile = (dataForm: ProfileType): ThunkType => async (dispatch, getState) => {\n    let userId = getState().auth.id\n    let res = await profileAPI.updateProfile(dataForm)\n    if (res.data.resultCode === ResultCodesEnum.Success) {\n        //@ts-ignore\n        dispatch(getUserProfile(userId))\n    } else {\n        //@ts-ignore\n        dispatch(stopSubmit(\"edit-profile\", {_error: res.data.messages[0]}))\n        return Promise.reject(res.data.messages[0])\n    }\n}\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friends_list\":\"Friends_friends_list__3NkUf\",\"friends_item\":\"Friends_friends_item__1J0bI\",\"friends_item_photo\":\"Friends_friends_item_photo__3P5pY\",\"avatar\":\"Friends_avatar__3Qndj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users_paginator\":\"Paginator_users_paginator__2NMhY\",\"selectPage\":\"Paginator_selectPage__BqcPI\",\"page\":\"Paginator_page__3OIl6\"};"],"sourceRoot":""}