{"version":3,"sources":["components/Navbar/Navbar.module.sass","components/Users/Users.module.sass","components/Profile/MyPosts/MyPosts.module.sass","components/Dialogs/Messages/Messages.module.sass","components/Dialogs/Dialogs.module.sass","components/Profile/ProfileInfo/ProfileInfo.module.sass","components/Profile/Profile.module.sass","components/Profile/MyPosts/Post/MyPost.module.sass","components/Header/Header.module.sass","components/Navbar/Friends/Friends.module.sass","components/Header/Header.tsx","assets/image/background-image.jpeg","components/Navbar/Navbar.tsx","assets/image/avatar.jpeg","components/Profile/ProfileInfo/ProfileInfo.tsx","redux/profile-reducer.ts","components/Profile/MyPosts/Post/MyPost.tsx","components/Navbar/Friends/FriendsContainer.tsx","components/Navbar/Friends/Friends.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/News/News.tsx","components/Music/Music.tsx","redux/message-reducer.ts","components/Dialogs/Messages/Messages.tsx","components/Dialogs/Messages/MessagesContainer.tsx","components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","redux/users-reducer.ts","components/Users/UsersContainer.tsx","components/Users/Users.tsx","App.tsx","serviceWorker.ts","redux/dialogs-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","index.tsx"],"names":["module","exports","Header","className","s","icon_search","search","type","Navbar","props","nav","nav_list","nav_item","nav_item_link","to","activeClassName","active","href","ProfileInfo","profile_info","img_block","src","background_image","alt","menu_info","avatar_block","avatar","width","height","menu_list","ADD_POST","UPDATE_NEW_POST_TEXT","initialState","posts","id","message","like","newPostText","MyPost","post_block","post","Avatar","FormControlLabel","control","Checkbox","icon","FavoriteBorder","checkedIcon","Favorite","name","label","post_text","FriendsContainer","connect","state","friends","sidebar","dispatch","map","f","MyPostsContainer","profilePage","addPost","onPostChange","text","updateNewPostTextAC","newPosts","p","newPostElement","React","createRef","my_post","friends_block","posts_block","TextareaAutosize","ref","rows","value","onChange","current","aria-label","placeholder","posts_textarea","button_block","posts_button","onClick","info_block","Profile","main_profile","profile","News","Music","ADD_MESSAGE","UPDATE_NEW_MESSAGE_TEXT","messages","textMessage","newMessageText","Messages","newMessages","m","dialog_body","message_one","message_two","newElement","dialog_window","dialog_header","Button","variant","color","dialog_footer","onChangeMessage","dialog_footer_textarea","fullWidth","addMessage","button","MessagesContainer","messagesPage","word","DialogsItem","link","item","user_name","last_message","lastMessage","Dialogs","newData","dialogs","d","list","DialogsContainer","dialogsPage","FOLLOW","UNFOLLOW","SET_USERS","users","UsersContainer","usersPage","follow","followAC","unfollow","unfollowAC","setUsers","setUsersAC","length","fullName","followed","status","location","city","country","u","user","user_avatar","follow_unfollow_button","user_info","user_info_name","user_status","App","path","render","exact","Boolean","window","hostname","match","unregister","navigator","serviceWorker","ready","then","registration","catch","error","console","reducers","combineReducers","action","store","createStore","ReactDOM","StrictMode","ScopedCssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.a2805a5f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2G49n\",\"nav_list\":\"Navbar_nav_list__195P5\",\"nav_item\":\"Navbar_nav_item__l_UkN\",\"nav_item_link\":\"Navbar_nav_item_link__2kja5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"Users_user__12P5P\",\"user_avatar\":\"Users_user_avatar__1PI_a\",\"avatar\":\"Users_avatar__28Uw_\",\"follow_unfollow_button\":\"Users_follow_unfollow_button__2kgTj\",\"user_info\":\"Users_user_info__jMX1k\",\"user_info_name\":\"Users_user_info_name__YGCc9\",\"user_name\":\"Users_user_name__1Vq5z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"my_post\":\"MyPosts_my_post__2wB-l\",\"friends_block\":\"MyPosts_friends_block__2Ox91\",\"posts_block\":\"MyPosts_posts_block__27Mfj\",\"info_block\":\"MyPosts_info_block__2Z-Z7\",\"posts\":\"MyPosts_posts__3hM2t\",\"button_block\":\"MyPosts_button_block__awp2T\",\"posts_button\":\"MyPosts_posts_button__192L8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog_window\":\"Messages_dialog_window__NGXtj\",\"dialog_header\":\"Messages_dialog_header__2NTHl\",\"dialog_footer\":\"Messages_dialog_footer__3sNge\",\"button\":\"Messages_button__B4QTR\",\"dialog_footer_textarea\":\"Messages_dialog_footer_textarea__2wUAq\",\"dialog_body\":\"Messages_dialog_body__eTCSO\",\"message_one\":\"Messages_message_one__158ii\",\"message_two\":\"Messages_message_two__1bHxW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Dialogs_list__2o-TF\",\"item\":\"Dialogs_item__1Rw8z\",\"message\":\"Dialogs_message__1qS-S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile_info\":\"ProfileInfo_profile_info__142Ew\",\"avatar\":\"ProfileInfo_avatar__2-RVm\",\"img_block\":\"ProfileInfo_img_block__3-bAQ\",\"menu_info\":\"ProfileInfo_menu_info__2-ms0\",\"avatar_block\":\"ProfileInfo_avatar_block__1Q2Q0\",\"menu_list\":\"ProfileInfo_menu_list__1efc0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_profile\":\"Profile_main_profile__2-65N\",\"profile_info\":\"Profile_profile_info__eZd_e\",\"profile\":\"Profile_profile__BfM_w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post_block\":\"MyPost_post_block__1cDSp\",\"post\":\"MyPost_post__1TfQL\",\"post_text\":\"MyPost_post_text__3GQ1t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__JleW2\",\"search\":\"Header_search__3b3zI\",\"icon_search\":\"Header_icon_search__25CaU\",\"logo\":\"Header_logo__3Yyyg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friends_block\":\"Friends_friends_block__1T6CQ\"};","import React from \"react\";\nimport s from \"./Header.module.sass\";\nimport logo from '../../assets/image/logo.png';\n\nconst Header = () => {\n    return (\n        <>\n            <span className={s.icon_search}>Search</span>\n            <input className={s.search} type=\"search\"/>\n            {/*<img className={s.logo} src={logo} alt=\"\"/>*/}\n        </>\n    )\n}\n\nexport default Header;","export default __webpack_public_path__ + \"static/media/background-image.c89a0cbc.jpeg\";","import React from \"react\";\nimport s from \"./Navbar.module.sass\";\nimport {NavLink} from \"react-router-dom\";\nimport {FriendsContainer} from \"./Friends/FriendsContainer\";\n\ntype NavbarType = {\n    /*state: SidebarFriendsType*/\n}\n\nconst Navbar: React.FC<NavbarType> = (props) => {\n    return (\n        <nav className={s.nav}>\n            <ul className={s.nav_list}>\n                {/*NavLink - не перезагружая страницу, меняем адресную строку*/}\n                <li className={s.nav_item}><NavLink className={s.nav_item_link} to=\"/profile\" activeClassName={s.active}>Profile</NavLink></li>\n                <li className={s.nav_item}><NavLink className={s.nav_item_link} to=\"/dialogs\">Dialogs</NavLink></li>\n                <li className={s.nav_item}><NavLink className={s.nav_item_link} to=\"/news\" href=\"#\">News</NavLink></li>\n                <li className={s.nav_item}><NavLink className={s.nav_item_link} to=\"/music\">Music</NavLink></li>\n                <li className={s.nav_item}><NavLink className={s.nav_item_link} to=\"/settings\">Settings</NavLink></li>\n                <li className={s.nav_item}><NavLink className={s.nav_item_link} to=\"/users\">Users</NavLink></li>\n            </ul>\n\n\n        </nav>\n    )\n}\n\nexport default Navbar;","export default __webpack_public_path__ + \"static/media/avatar.2679a7bf.jpeg\";","import s from \"./ProfileInfo.module.sass\";\nimport React from \"react\";\nimport background_image from './../../../assets/image/background-image.jpeg'\nimport Navbar from \"../../Navbar/Navbar\";\nimport avatar from \"./../../../assets/image/avatar.jpeg\"\n\nexport const ProfileInfo = () => {\n    return (\n        <div className={s.profile_info}>\n            <div className={s.img_block}>\n                <img src={background_image} alt=\"background_image\"/>\n            </div>\n            <div className={s.menu_info}>\n                <div className={s.avatar_block}>\n                    <div className={s.avatar}>\n                        <img src={avatar} alt=\"\" width=\"180\" height=\"180\"/>\n                    </div>\n                    <div>Еда Вкусная</div>\n                </div>\n\n                <div className={s.menu_list}>\n                    <Navbar/>\n                </div>\n            </div>\n        </div>\n    )\n}","const ADD_POST = \"ADD_POST\"\nconst UPDATE_NEW_POST_TEXT = \"UPDATE_NEW_POST_TEXT\"\n\nexport type addPostAC = ReturnType<typeof addPostAC>\nexport type updateNewPostTextAC = ReturnType<typeof updateNewPostTextAC>\n\nlet initialState = {\n    posts: [\n        {id: 1, message: \"Это передача сдохни или умри!\", like: 25},\n        {id: 2, message: \"Или сдохни\", like: 40},\n        {id: 3, message: \"Или умри\", like: 1}\n    ],\n\n    newPostText: \"\"\n}\n\nexport function profileReducer(state = initialState, action: addPostAC | updateNewPostTextAC) {\n    switch (action.type) {\n        case ADD_POST:\n            return {\n                ...state,\n                posts: [{id: 5, message: state.newPostText, like: 25}, ...state.posts],\n                newPostText: \"\"\n            }\n\n        case UPDATE_NEW_POST_TEXT:\n            return {\n                ...state,\n                newPostText: action.text\n            };\n\n        default:\n            return state\n    }\n}\n\nexport const addPostAC = () => ({type: ADD_POST} as const)\nexport const updateNewPostTextAC = (text: string) => ({type: UPDATE_NEW_POST_TEXT, text: text} as const)\n","import React from \"react\";\nimport s from \"./MyPost.module.sass\";\nimport logo from \"../../../../assets/image/logo.png\";\nimport {PostType} from \"../../../../redux/redux-store\";\nimport {Avatar, Checkbox, FormControlLabel} from \"@material-ui/core\";\nimport {Favorite, FavoriteBorder} from \"@material-ui/icons\";\n\n\nconst MyPost: React.FC<PostType> = (props) => {\n\n    return (\n        <div className={s.post_block}>\n            <div className={s.post}>\n                <Avatar src=\"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\" alt=\"Аватарка\"/>\n                <FormControlLabel control={<Checkbox\n                    icon={<FavoriteBorder/>}\n                    checkedIcon={<Favorite/>}\n                    name=\"checkedH\"/>}\n                                  label={props.like}\n\n                />\n            </div>\n            <div className={s.post_text}>{props.message}</div>\n        </div>\n    )\n}\n\nexport default MyPost;","import React from \"react\";\nimport {Friends} from \"./Friends\";\nimport {connect} from \"react-redux\";\nimport {AppStateType, FriendType} from \"../../../redux/redux-store\";\n\n\ntype mapStateToPropsType = {\n    friends: Array<FriendType>\n}\n\ntype mapDispatchToPropsType = {\n\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        friends: state.sidebar.friends\n    }\n}\n\n/*https://stackoverflow.com/questions/49808004/parameter-dispatch-implicitly-has-an-any-type*/\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n\n    }\n}\nexport const FriendsContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(Friends)\n","import React from \"react\";\nimport {FriendType} from \"../../../redux/redux-store\";\nimport {Avatar} from \"@material-ui/core\";\nimport s from \"./Friends.module.sass\";\n/*import { AvatarGroup } from '@material-ui/lab';*/\n\ntype FriendsType = {\n    friends: Array<FriendType>\n}\n\n\nexport const Friends: React.FC<FriendsType> = (props) => {\n\n    let friendsList = props.friends.map(f => <div key={f.id}>\n        <Avatar className={s.avatar} src={f.avatar} alt={f.name}/>\n    </div>)\n\n    return (\n        <div></div>\n        /*<AvatarGroup className={s.friends_block} spacing={0} max={3}>\n            {friendsList}\n        </AvatarGroup>*/\n    )\n}","import React from \"react\";\nimport {addPostAC, updateNewPostTextAC} from \"../../../redux/profile-reducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType, PostType} from \"../../../redux/redux-store\";\nimport {Dispatch} from \"redux\";\n\n\ntype mapStateToPropsType = {\n    posts: Array<PostType>\n    newPostText: string\n}\n\ntype mapDispatchToPropsType = {\n    addPost: () => void\n    onPostChange: (text: string) => void\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        addPost: () => {\n            dispatch(addPostAC());\n        },\n\n        onPostChange: (text: string) => {\n            dispatch(updateNewPostTextAC(text));\n        }\n    }\n}\n\nexport const MyPostsContainer = connect<mapStateToPropsType,mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from \"react\";\nimport MyPost from \"./Post/MyPost\";\nimport s from \"./MyPosts.module.sass\"\nimport {TextareaAutosize} from \"@material-ui/core\";\nimport {PostType} from \"../../../redux/redux-store\";\nimport {FriendsContainer} from \"../../Navbar/Friends/FriendsContainer\";\n\n\nexport type MyPostsType = {\n    posts: Array<PostType>\n    onPostChange: (text: string) => void\n    addPost: () => void\n    newPostText: string\n}\n\n\nexport const MyPosts: React.FC<MyPostsType> = (props) => {\n    let newPosts = props.posts.map(p => <MyPost key={p.id} id={p.id} message={p.message} like={p.like}/>)\n    /*Создаем ссылку на какой-то элемент из jsx*/\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\n    /*let [post, setPost] = useState()\n    let [changePost, setChangePost] = useState()*/\n    let addPost = () => {\n        /*setPost(props.addPost(changePost))*/\n        props.addPost();\n    }\n\n    let onPostChange = () => {\n        /*if (newPostElement.current) {\n            props.updateNewPostText(newPostElement.current.value)\n        }*/\n        /*newPostElement.current && props.updateNewPostText(newPostElement.current.value)*/\n        props.onPostChange(newPostElement.current ? newPostElement.current.value : \"----\")\n    }\n\n    return (\n        <div className={s.my_post}>\n            <div className={s.friends_block}>\n                <FriendsContainer />\n            </div>\n            <div className={s.posts_block}>\n                <div className={s.posts}>\n                    <TextareaAutosize ref={newPostElement}\n                                      rows={5}\n                                      value={props.newPostText}\n                                      onChange={onPostChange}\n                                      aria-label=\"empty textarea\"\n                                      placeholder=\"Empty\"\n                                      className={s.posts_textarea}\n                    />\n                    <div className={s.button_block}>\n                        <button className={s.posts_button} onClick={addPost}>Add post</button>\n                    </div>\n                </div>\n                <div>\n                    {newPosts}\n                </div>\n            </div>\n\n            <div className={s.info_block}>Info</div>\n\n        </div>\n    )\n}\n","import React from \"react\";\nimport s from \"./Profile.module.sass\";\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\n\n/*<div className=\"Photo - main_photo\">\n    <div className=\"Photo-Profile\"></div>\n    <div className=\"Меню-профайл\"></div>\n</div>\n<div className=\"ыы\"></div>\n<div className=\"ввы\"></div>\n<div className=\"ыыы\"></div>*/\n\nexport const Profile = () => {\n    return (\n        <main className={s.main_profile}>\n            <div className={s.profile_info}>\n                <ProfileInfo/>\n            </div>\n            <div className={s.profile}>\n                <MyPostsContainer/>\n            </div>\n        </main>\n    )\n}\n","import React from \"react\";\nimport s from \"./News.module.sass\";\n\nconst News = () => {\n    return (\n        <div>\n            Dialogs\n        </div>\n    )\n}\n\nexport default News;","import React from \"react\";\nimport s from \"./Music.module.sass\";\n\nconst Music = () => {\n    return (\n        <div>\n            Music\n        </div>\n    )\n}\n\nexport default Music;","export const ADD_MESSAGE = \"ADD_MESSAGE\"\nexport const UPDATE_NEW_MESSAGE_TEXT = \"UPDATE_NEW_MESSAGE_TEXT\"\n\nexport type addMessageACType = ReturnType<typeof addMessageAC>\nexport type updateNewMessageTextACType = ReturnType<typeof updateNewMessageTextAC>\n\nlet initialState = {\n    messages: [\n        {id: 1, name: \"Он\", textMessage: \"Hello\"},\n        {id: 2, name: \"Ты\", textMessage: \"Hello\"},\n        {id: 1, name: \"Он\", textMessage: \"Ты такая хорошая! Ты даже лучше, чем сахар!\"},\n        {id: 2, name: \"Ты\", textMessage: \"Спасибо! Приходи сегодня\"},\n    ],\n\n    newMessageText: \"\"\n}\n\nexport function messageReducer(state = initialState, action: addMessageACType | updateNewMessageTextACType) {\n    switch (action.type) {\n        case ADD_MESSAGE:\n            return {\n                ...state,\n                messages: [...state.messages, {id: 2, name: \"Ты\", textMessage: state.newMessageText}],\n                newMessageText: \"\"\n            };\n\n        case UPDATE_NEW_MESSAGE_TEXT:\n            return {\n                ...state,\n                newMessageText: action.word\n            };\n\n        default:\n            return state\n    }\n}\n\nexport const addMessageAC = () => ({type: ADD_MESSAGE} as const)\nexport const updateNewMessageTextAC = (word: string) => ({type: UPDATE_NEW_MESSAGE_TEXT, word: word} as const)","import React from \"react\";\nimport s from \"./Messages.module.sass\";\nimport {NavLink} from \"react-router-dom\";\nimport Button from '@material-ui/core/Button';\nimport {MessageType} from \"../../../redux/redux-store\";\nimport {TextareaAutosize} from \"@material-ui/core\";\n\ntype MessagesType = {\n    messages: Array<MessageType>\n    addMessage: () => void\n    onChangeMessage: (text: string) => void\n    newMessageText: string\n}\n\nconst Messages: React.FC<MessagesType> = (props) => {\n    let newMessages = props.messages.map(m => <div key={m.id} className={s.dialog_body}>\n        {/*Не охота верстать, сделать потом*/}\n\n        <div className={m.id === 1 ? s.message_one : \"\"}>\n            <div>{m.id === 1 ? m.name : null}</div>\n            <div>{m.id === 1 ? m.textMessage : null}</div>\n        </div>\n        <div className={m.id === 2 ? s.message_two : \"\"}>\n            <div>{m.id === 2 ? m.name : null}</div>\n            <div>{m.id === 2 ? m.textMessage : null}</div>\n        </div>\n\n\n    </div>)\n\n    let newElement = React.createRef<HTMLTextAreaElement>();\n\n    /* let [message, setMessage] = useState()\n     let [change, setChange] = useState()\n */\n    const addMessage = () => {\n        /*setMessage(props.addMessage(change))*/\n        //Чтобы вынести в отдельную переменную, нужно типизировать эту переменную\n        //так как action определяется как {type: string\n        props.addMessage();\n    }\n\n    const onChangeMessage = () => {\n        props.onChangeMessage(newElement.current ? newElement.current.value : \"----\")\n    }\n\n    return (\n        <div className={s.dialog_window}>\n            <div className={s.dialog_header}>\n                <NavLink to=\"/dialogs\">\n                    <Button variant=\"contained\" color=\"default\">Exit</Button>\n                </NavLink>\n                <div>Avatar + name</div>\n            </div>\n            {newMessages}\n            <div className={s.dialog_footer}>\n                <TextareaAutosize ref={newElement}\n                                  rows={5}\n                                  value={props.newMessageText}\n                                  onChange={onChangeMessage}\n                                  aria-label=\"empty textarea\"\n                                  placeholder=\"Empty\"\n                                  className={s.dialog_footer_textarea}\n                />\n                {/*\n                <textarea ref={newElement} value={props.newMessageText} onChange={onChangeMessage} rows={5}></textarea>\n*/}\n                {/*value={message} onChange={(e) => {setChange(e.currentTarget.value)}}*/}\n                <Button\n                    fullWidth={true}\n                    onClick={addMessage}\n                    variant=\"contained\"\n                    color=\"default\"\n                    className={s.button}\n                    /*endIcon={<Icon>send</Icon>}*/\n                >Send\n                </Button>\n                {/*<button onClick={addMessage}>Send</button>*/}\n            </div>\n        </div>\n    )\n}\n\nexport default Messages;","import React from \"react\";\nimport {addMessageAC, updateNewMessageTextAC} from \"../../../redux/message-reducer\";\nimport Messages from \"./Messages\";\nimport {connect} from \"react-redux\";\nimport {AppStateType, MessageType} from \"../../../redux/redux-store\";\nimport {Dispatch} from \"redux\";\n\n\ntype mapStateToPropsType = {\n    messages: Array<MessageType>\n    newMessageText: string\n}\n\ntype mapDispatchToPropsType = {\n    addMessage: () => void\n    onChangeMessage: (text: string) => void\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        messages: state.messagesPage.messages,\n        newMessageText: state.messagesPage.newMessageText\n    }\n}\n\n/*https://stackoverflow.com/questions/49808004/parameter-dispatch-implicitly-has-an-any-type*/\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        addMessage: () => {\n            dispatch(addMessageAC());\n        },\n\n        onChangeMessage: (text: string) => {\n            dispatch(updateNewMessageTextAC(text))\n        }\n    }\n}\n\nexport const MessagesContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(Messages)\n","import {NavLink} from \"react-router-dom\";\nimport s from \"../Dialogs.module.sass\";\nimport React from \"react\";\nimport {Avatar} from \"@material-ui/core\";\nimport {DialogsItemType} from \"../../../redux/redux-store\";\n\n\nexport const DialogsItem: React.FC<DialogsItemType> = (props) => {\n    return (\n        <NavLink className={s.link} to={\"/messages/\" + props.id}>\n            <li className={s.item}>\n                <Avatar alt=\"Remy Sharp\" src={props.avatar} />\n                <div className={s.message}>\n                    <div className={s.user_name}>{props.name}</div>\n                    <div className={s.last_message}>{props.lastMessage}</div>\n                </div>\n            </li>\n        </NavLink>\n    )\n}\n\n\n\n","import React from \"react\";\nimport s from \"./Dialogs.module.sass\";\nimport {DialogsItem} from \"./DialogsItem/DialogsItem\";\nimport {DialogsItemType} from \"../../redux/redux-store\";\n\ntype DialogsType = {\n    dialogs: Array<DialogsItemType>\n}\n\nconst Dialogs: React.FC<DialogsType> = (props) => {\n\n    let newData = props.dialogs.map(d => <DialogsItem key={d.id} id = {d.id} name={d.name} lastMessage={d.lastMessage} avatar={d.avatar}/>)\n\n    return (\n        <ul className={s.list}>\n            {newData}\n        </ul>\n    )\n}\n\nexport default Dialogs;\n","import React from \"react\";\nimport {AppStateType, DialogsItemType} from \"../../redux/redux-store\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\n\n\ntype mapStateToPropsType = {\n    dialogs: Array<DialogsItemType>\n}\n\ntype mapDispatchToPropsType = {\n\n}\n\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        dialogs: state.dialogsPage.dialogs\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n\n    }\n}\n\nexport const DialogsContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(Dialogs)\n","import {UsersType, UserType} from \"./redux-store\";\n\nexport const FOLLOW = \"FOLLOW\"\nexport const UNFOLLOW = \"UNFOLLOW\"\nexport const SET_USERS = \"SET_USERS\"\n\nexport const initialState: UsersType = {\n    users: []\n}\n\nexport type followACType = ReturnType<typeof followAC>\nexport type unfollowACType = ReturnType<typeof unfollowAC>\nexport type setUsersACType = ReturnType<typeof setUsersAC>\n\nexport function usersReducer(state = initialState, action: followACType | unfollowACType | setUsersACType) {\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    return action.id === u.id ? {...u, followed: true} : u\n                })\n            }\n\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    return action.id === u.id ? {...u, followed: false} : u\n                })\n            }\n\n        case SET_USERS:\n            return {\n                ...state,\n                users: [...state.users, ...action.users]\n            }\n\n        default:\n            /*throw new Error(\"Bad action type\")*/\n            return state\n    }\n}\n\nexport const followAC = (id: number) => ({type: FOLLOW, id: id} as const)\nexport const unfollowAC = (id: number) => ({type: UNFOLLOW, id: id} as const)\nexport const setUsersAC = (users: Array<UserType>) => ({type: SET_USERS, users: users} as const)","import {connect} from \"react-redux\";\nimport {Users} from \"./Users\";\nimport {AppStateType, UserType} from \"../../redux/redux-store\";\nimport {Dispatch} from \"redux\";\nimport {followAC, setUsersAC, unfollowAC} from \"../../redux/users-reducer\";\n\ntype mapStateToPropsType = {\n    users: Array<UserType>\n}\n\ntype mapDispatchToPropsType = {\n    follow: (id: number) => void\n    unfollow: (id: number) => void\n    setUsers: (users: Array<UserType>) => void\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        users: state.usersPage.users\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\n    return {\n        follow: (id) => {\n            dispatch(followAC(id))\n        },\n\n        unfollow: (id) => {\n            dispatch(unfollowAC(id))\n        },\n\n        setUsers: (users) => {\n            dispatch(setUsersAC(users))\n        }\n    }\n}\n\n\nexport const UsersContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(Users)","import React from 'react'\nimport s from \"./Users.module.sass\"\nimport {UserType} from \"../../redux/redux-store\";\nimport {Avatar} from \"@material-ui/core\";\n\ntype UsersType = {\n    users: Array<UserType>\n    follow: (id: number) => void\n    unfollow: (id: number) => void\n    setUsers: (users: Array<UserType>) => void\n}\n\nexport function Users(props: UsersType) {\n\n    if (props.users.length === 0) {\n        props.setUsers([\n                {\n                    id: 1,\n                    avatar: \"\",\n                    fullName: \"person-1\",\n                    followed: false,\n                    status: \"Человек-1-status\",\n                    location: {city: \"Ekaterinburg\", country: \"Russia\"}\n                },\n                {\n                    id: 2,\n                    avatar: \"\",\n                    fullName: \"person-2\",\n                    followed: false,\n                    status: \"Человек-2-status\",\n                    location: {city: \"Ekaterinburg\", country: \"Russia\"}\n                },\n                {\n                    id: 3,\n                    avatar: \"\",\n                    fullName: \"person-3\",\n                    followed: false,\n                    status: \"Человек-3-status\",\n                    location: {city: \"Ekaterinburg\", country: \"Russia\"}\n                }\n            ]\n        )\n    }\n\n    return (\n        <div className={s.users}>\n            {\n                props.users.map(u =>\n                    <div key={u.id} className={s.user}>\n                        <div className={s.user_avatar}>\n                            <Avatar variant='rounded'\n                                    className={s.avatar}\n                                    src={u.avatar}\n                                    alt={u.fullName}\n\n                            />\n                            {u.followed ?\n                                <button className={s.follow_unfollow_button}\n                                        onClick={() => props.unfollow(u.id)}>\n                                    Unfollow\n                                </button>\n                                : <button className={s.follow_unfollow_button}\n                                          onClick={() => props.follow(u.id)}>\n                                    Follow\n                                </button>\n                            }\n                        </div>\n                        <div className={s.user_info}>\n                            <div className={s.user_info_name}>\n                                <div className={s.user_name}>{u.fullName}</div>\n                                <div className={s.user_status}>{u.status}</div>\n                            </div>\n                            <div>\n                                <div>{u.location.city}</div>\n                                <div>{u.location.country}</div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n        </div>\n    )\n}","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport {Profile} from \"./components/Profile/Profile\";\nimport {Route} from \"react-router-dom\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport {MessagesContainer} from \"./components/Dialogs/Messages/MessagesContainer\";\nimport {DialogsContainer} from \"./components/Dialogs/DialogsContainer\";\nimport {Users} from \"./components/Users/Users\";\nimport {UsersContainer} from \"./components/Users/UsersContainer\";\n\n\nconst App = () => {\n    return (\n        <div className='app-wrapper grid-container'>\n            <div className=\"main_link\">Главная</div>\n            <header className=\"header\">\n                <Header/>\n            </header>\n\n            <div className=\"menu\">\n\n            </div>\n\n            <div className=\"app-wrapper-content main\">\n                <Route path=\"/profile\" render={() => <Profile/>}/>\n                <Route path=\"/dialogs\" render={() => <DialogsContainer/>}/>\n                <Route path=\"/messages\" render={() => <MessagesContainer/>}/>\n                <Route exact path=\"/news\" render={() => <News/>}/>\n                <Route path=\"/music\" render={() => <Music/>}/>\n                <Route path=\"/users\" render={() => <UsersContainer/>}/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let initialState = {\n    dialogs: [\n        {\n            id: 1,\n            name: \"Человек-1\",\n            lastMessage: \"Привет!\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 2,\n            name: \"Человек-2\",\n            lastMessage: \"Хочу предложить тебе новый способ заработать, сидя на диване\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 3,\n            name: \"Человек-3\",\n            lastMessage: \"Скинь фотки\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 4,\n            name: \"Человек-4\",\n            lastMessage: \"Сотку когда вернешь?\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 5,\n            name: \"Человек-5\",\n            lastMessage: \"Жрать охота\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        }\n    ]\n}\n\nexport function dialogsReducer(state = initialState, action: any) {\n    return state\n}\n","let initialState = {\n    friends: [\n        {\n            id: 1,\n            name: \"Друг-1\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 2,\n            name: \"Друг-2\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 3,\n            name: \"Друг-3\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        }\n    ]\n}\n\nexport const sidebarReducer = (state = initialState, action: any) => {\n    return state\n}","import {combineReducers, createStore, Store} from \"redux\";\nimport {addPostAC, profileReducer, updateNewPostTextAC} from \"./profile-reducer\";\nimport {dialogsReducer} from \"./dialogs-reducer\";\nimport {addMessageAC, messageReducer, updateNewMessageTextAC} from \"./message-reducer\";\nimport {sidebarReducer} from \"./sidebar-reducer\";\nimport {usersReducer} from \"./users-reducer\";\n\n/*------------------------------------------------------*/\n/*Типизируем каждый подобьект, начинаем с низшего уровня*/\n\nexport type PostType = {\n    id: number\n    message: string\n    like: number\n}\n\nexport type DialogsItemType = {\n    id: number\n    name: string\n    lastMessage: string\n    avatar: string\n}\n\nexport type MessageType = {\n    id: number\n    name: string\n    textMessage: string\n}\nexport type FriendType = {\n    id: number,\n    name: string,\n    avatar: string\n}\n\nexport type UsersLocationType = {\n    city: string,\n    country: string\n}\n\nexport type UserType = {\n    id: number,\n    avatar: string\n    fullName: string,\n    followed: boolean,\n    status: string,\n    location: UsersLocationType\n}\n\n\n/*-------------------------------------------------------*/\n/*Типизируем каждую ветку*/\nexport type ProfilePageType = {\n    posts: Array<PostType>\n    newPostText: string\n}\n\nexport type DialogsPageType = {\n    dialogs: Array<DialogsItemType>\n}\n\nexport type MessagesPageType = {\n    messages: Array<MessageType>\n    newMessageText: string\n}\n\nexport type SidebarFriendsType = {\n    friends: Array<FriendType>\n}\n\nexport type UsersType = {\n    users: Array<UserType>\n}\n\n\n/*-------------------------------------------------------*/\n/*Собираем все ветки в один обьект для state*/\n/*export type RootStateType = {\n    profilePage: ProfilePageType\n    dialogsPage: DialogsPageType\n    messagesPage: MessagesPageType\n    sidebar: SidebarFriendsType\n}*/\n/*-------------------------------------------------------*/\n\n/*export type StoreType = {\n    _state: RootStateType\n    subscribe: (observer: () => void) => void\n    _callSubscriber: () => void\n    getState: () => RootStateType\n    dispatch: (action: actionType) => void\n}*/\n\n/*\nexport type actionType = addPostAC | updateNewPostTextAC | addMessageAC | updateNewMessageTextAC\n*/\n/*\nexport type addPostAC = ReturnType<typeof addPostAC>\nexport type updateNewPostTextAC = ReturnType<typeof updateNewPostTextAC>\n*/\n/*\nexport type addMessageAC = ReturnType<typeof addMessageAC>\nexport type updateNewMessageTextAC = ReturnType<typeof updateNewMessageTextAC>\n*/\n\nlet reducers = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    messagesPage: messageReducer,\n    sidebar: sidebarReducer,\n    usersPage: usersReducer\n})\n\n//типизируем reducers\nexport type RootReducerType = typeof reducers\n//типизируем state\nexport type AppStateType = ReturnType<RootReducerType>\n\nexport type StoreType = Store<AppStateType>\n/*export type StoreType = Store<AppStateType, actionType>*/\n\n//создаем store\nexport let store: StoreType = createStore(reducers);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ScopedCssBaseline from \"@material-ui/core/ScopedCssBaseline\";\n\nimport {store} from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <ScopedCssBaseline>\n                    <App/>\n                </ScopedCssBaseline>\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}