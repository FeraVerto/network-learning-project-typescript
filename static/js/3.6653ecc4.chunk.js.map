{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/Profile.module.sass","components/Profile/MyPosts/Post/MyPost.module.sass","components/Profile/MyPosts/MyPosts.module.sass","components/Profile/ProfileInfo/ProfileInfo.module.sass","components/Profile/MyPosts/Post/MyPost.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHook.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","MyPost","className","s","post_block","post","Avatar","src","alt","FormControlLabel","control","Checkbox","icon","FavoriteBorder","checkedIcon","Favorite","name","label","like","post_text","message","maxLength10","maxLengthCreator","MyPosts","React","memo","posts","addPostAC","newPosts","map","p","id","PostsFormRedux","onSubmit","value","newPostText","reduxForm","form","handleSubmit","posts_form","Field","component","Textarea","placeholder","posts_textarea","validate","requiredField","button_block","posts_button","MyPostsContainer","profilePage","ProfileStatusWithHook","useState","editMode","setEditMode","status","setValue","useEffect","autoFocus","onBlur","updateStatus","onChange","e","target","onDoubleClick","ProfileInfo","isOwner","profile","contact","undefined","Object","values","contacts","filter","item","a","rel","href","profile_info","photos","large","avatar","width","height","info_name","fullName","button","info","lookingForAJobDescription","info_description","lookingForAJob","info_job","info_contacts","Preloader","Profile","main_profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","compose","withRouter"],"mappings":"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","file":"static/js/3.6653ecc4.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\nimport {AppStateType} from \"../redux/redux-store\";\nimport {connect} from \"react-redux\";\nimport {Redirect} from \"react-router-dom\";\n\ntype MapStatePropsType = {\n    isAuth: boolean | null\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n    const RedirectComponent = (props: MapStatePropsType) => {\n        let {isAuth, ...restProps} = props\n        if (!props.isAuth) return <Redirect to={\"/login\"}/>\n        return <Component {...restProps as T}/>\n    }\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n\n    return ConnectedRedirectComponent\n}\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_profile\":\"Profile_main_profile__2-65N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post_block\":\"MyPost_post_block__1cDSp\",\"post\":\"MyPost_post__1TfQL\",\"post_text\":\"MyPost_post_text__3GQ1t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts_form\":\"MyPosts_posts_form__1CsEi\",\"button_block\":\"MyPosts_button_block__awp2T\",\"posts_textarea\":\"MyPosts_posts_textarea__3kZWx\",\"posts_button\":\"MyPosts_posts_button__192L8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"ProfileInfo_profile__1GIDg\",\"profile_info\":\"ProfileInfo_profile_info__142Ew\",\"info\":\"ProfileInfo_info__mPdgt\",\"info_name\":\"ProfileInfo_info_name__3FNdF\",\"contact\":\"ProfileInfo_contact__2ZooF\",\"button_block\":\"ProfileInfo_button_block__3QeFp\",\"button\":\"ProfileInfo_button__WeC7y\",\"avatar\":\"ProfileInfo_avatar__2-RVm\"};","import React from \"react\";\nimport s from \"./MyPost.module.sass\";\nimport {PostType} from \"../../../../redux/redux-store\";\nimport {Avatar, Checkbox, FormControlLabel} from \"@material-ui/core\";\nimport {Favorite, FavoriteBorder} from \"@material-ui/icons\";\n\n\nconst MyPost: React.FC<PostType> = (props) => {\n\n    return (\n        <div className={s.post_block}>\n            <div className={s.post}>\n                <Avatar src=\"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\" alt=\"Аватарка\"/>\n                <FormControlLabel control={<Checkbox\n                    icon={<FavoriteBorder/>}\n                    checkedIcon={<Favorite/>}\n                    name=\"checkedH\"/>}\n                                  label={props.like}\n\n                />\n            </div>\n            <div className={s.post_text}>{props.message}</div>\n        </div>\n    )\n}\n\nexport default MyPost;","import React, {useMemo} from \"react\";\nimport MyPost from \"./Post/MyPost\";\nimport s from \"./MyPosts.module.sass\"\nimport {PostType} from \"../../../redux/redux-store\";\nimport {Redirect} from \"react-router-dom\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\n\nexport type MyPostsType = {\n    posts: Array<PostType>\n    addPostAC: (formData: string) => void\n    isAuth: boolean | null\n}\n\nconst maxLength10 = maxLengthCreator(10)\n\nconst MyPosts = React.memo(({posts, addPostAC, isAuth}: MyPostsType) => {\n    let newPosts = posts.map(p => <MyPost key={p.id} id={p.id} message={p.message} like={p.like}/>)\n\n    const onSubmit = (value: PostsFormType) => {\n        addPostAC(value.newPostText)\n    }\n\n    if (!isAuth) return <Redirect to={\"/login\"}/>\n\n    return (\n        <div className={s.posts}>\n            <PostsFormRedux onSubmit={onSubmit}/>\n            <div>\n                {newPosts}\n            </div>\n        </div>\n    )\n})\n\nexport type PostsFormType = {\n    newPostText: string\n}\n\nexport const PostsForm: React.FC<InjectedFormProps<PostsFormType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div className={s.posts_form}>\n                <Field\n                    component={Textarea}\n                    name={\"newPostText\"}\n                    placeholder={\"Empty\"}\n                    className={s.posts_textarea}\n                    validate={[requiredField, maxLength10]}\n                />\n                <div className={s.button_block}>\n                    <button className={s.posts_button}>Add post</button>\n                </div>\n            </div>\n        </form>\n    )\n}\n\nexport const PostsFormRedux = reduxForm<PostsFormType>({\n    form: 'newPostText'\n})(PostsForm)\n\nexport default MyPosts\n\n","import React from \"react\";\nimport {addPostAC} from \"../../../redux/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType, PostType} from \"../../../redux/redux-store\";\n\ntype mapStateToPropsType = {\n    posts: Array<PostType>\n    isAuth: boolean | null\n}\n\ntype mapDispatchToPropsType = {\n    addPostAC: (newPostText: string) => void\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        posts: state.profilePage.posts,\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport const MyPostsContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\n    addPostAC\n})(MyPosts)","import React, {ChangeEvent, useEffect, useState} from 'react'\n\ntype ProfileStatusType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileStatusWithHook = (props: ProfileStatusType) => {\n    let [editMode, setEditMode] = useState(false)\n    let [value, setValue] = useState(props.status)\n\n    let onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\n        setValue(e.target ? e.target.value : \"\")\n    }\n\n    useEffect(() => {\n        setValue(props.status)\n    }, [props.status])\n\n    return (\n        <div>\n            {\n                editMode\n                    ? <div>\n                        <input autoFocus={true}\n                               onBlur={() => {\n                                   setEditMode(!editMode)\n                                   props.updateStatus(value)\n                               } }\n                               value={value}\n                               onChange={onChangeStatus}\n                        />\n                    </div>\n                    : <div>\n                        <span onDoubleClick={() => setEditMode(!editMode)}>\n                            {props.status || \"No status\"}\n                        </span>\n                    </div>\n            }\n        </div>\n    )\n}\n\n\n\n\n/*\nexport const ProfileStatusWithHook = (props: any) => {\n    let [editMode, setEditMode] = useState(false)\n    let [status, setStatus] = useState(props.status)\n\n    let changeStatus = (e: any) => {\n        setStatus(e.target.value)\n    }\n\n    return (\n        <div>\n            {\n                !editMode && <div>\n            <span onDoubleClick={() => setEditMode(true)}>\n            {props.status || \"No status\"}\n            </span>\n                </div>\n            }\n            {\n                editMode && <div>\n                    <input autoFocus={true}\n                           onBlur={() => {\n                               setEditMode(false)\n                               props.updateStatus(status)\n                           }}\n                           value={status}\n                           onChange={changeStatus}\n                    />\n                </div>\n            }\n        </div>\n    )\n}*/\n","import s from \"./ProfileInfo.module.sass\";\nimport React from \"react\";\nimport {Preloader} from \"../../common/Preloader/Preloader\";\nimport avatar from \"./../../../assets/image/ufo-2.png\"\nimport {ProfileStatusWithHook} from \"./ProfileStatusWithHook\";\nimport {NavLink} from \"react-router-dom\";\n\ntype ProfileInfoType = {\n    profile: any\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: string\n}\n\nexport const ProfileInfo = ({isOwner, profile, status, updateStatus}: ProfileInfoType) => {\n    //достаем значения из объекта и складываем в массив\n    //фильтруем массив\n    //возвращаем разметку со значениями из массива\n    let contact = profile !== null && profile !== undefined && Object\n        .values(profile.contacts)\n        .filter(item => item !== null)\n        .map((a: any) => {\n            return <div key={a} className={s.contact}>\n                <a rel=\"stylesheet\" href={a}>{a} </a>\n            </div> //6326\n        })\n\n    if (!profile) return <Preloader/>\n\n    return (\n        <div className={s.profile}>\n\n            <div className={s.profile_info}>\n                <div>\n                    {\n                        profile.photos.large\n                            ? <div className={s.avatar}><img src={profile.photos.large}\n                                                             alt=\"user avatar\"\n                                                             width=\"180\"\n                                                             height=\"180\"/></div>\n                            : <div className={s.avatar}><img src={avatar}\n                                                             alt=\"no avatar\"\n                                                             width=\"180\"\n                                                             height=\"240\"/></div>\n\n                    }\n                    <div className={s.info_name}>{profile.fullName}</div>\n                    <div>\n                        <ProfileStatusWithHook status={status} updateStatus={updateStatus}/>\n                    </div>\n                    <div className={s.button_block}>\n                        <button className={s.button}><NavLink to={\"/dialogs\"}>Dialog</NavLink></button>\n                        <button className={s.button}>Follow</button>\n                    </div>\n                </div>\n\n\n                <div className={s.info}>\n\n                    {\n                        profile.lookingForAJobDescription === null\n                            ?\n                            <div\n                                className={s.info_description}>Description: {profile.lookingForAJobDescription}</div>\n                            : null\n                    }\n\n                    {\n                        profile.lookingForAJob === null\n                            ? <div className={s.info_job}>lookingForAJob: {profile.lookingForAJob}</div>\n                            : null\n                    }\n                    <div className={s.info_contacts}>contacts:{contact}</div>\n\n                </div>\n            </div>\n            <div>\n            </div>\n        </div>\n    )\n}\n\n\n\n\n\n\n\n\n\n\n\n","import React from \"react\";\nimport s from \"./Profile.module.sass\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\n\nexport const Profile = ({isOwner, profile, status, updateStatus}: any) => {\n    return (\n        <main className={s.main_profile}>\n            <ProfileInfo\n                isOwner={isOwner}\n                profile={profile}\n                status={status}\n                updateStatus={updateStatus}\n            />\n            <MyPostsContainer/>\n        </main>\n    )\n}\n","import React from 'react';\nimport {getUserProfile, getStatus, updateStatus} from '../../redux/profile-reducer';\nimport {connect} from 'react-redux';\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\nimport {compose} from 'redux';\nimport {AppStateType, ProfilePageType} from \"../../redux/redux-store\";\nimport {Profile} from \"./Profile\";\n\nclass ProfileContainer extends React.Component<Type> {\n\n    refreshProfile() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                //Не самое лучшее решение, но по-быструхе можно так сделать\n                this.props.history.push(\"/login\");\n            }\n        }\n        this.props.getUserProfile(userId);\n        this.props.getStatus(userId);\n    }\n\n    componentDidMount() {\n        this.refreshProfile();\n    }\n\n    componentDidUpdate(prevProps: any) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile();\n        }\n    }\n\n    render() {\n        return <Profile {...this.props}\n                        isOwner={!this.props.match.params.userId}\n                        profile={this.props.profile}\n                        status={this.props.status}\n                        updateStatus={this.props.updateStatus}\n                        /*savePhoto={this.props.savePhoto}*//>\n    }\n}\n\n\ntype ParamsType = {\n    userId: any\n}\n\nexport type ContactsType = {\n    github: string\n    vk: string\n    facebook: string\n    instagram: string\n    twitter: string\n    website: string\n    youtube: string\n    mainLink: string\n}\n\nexport type PhotosType = {\n    small: string\n    large: string\n}\n\nexport type ProfileType = {\n    userId: number\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    fullName: string\n    contacts: ContactsType\n    photos: PhotosType\n}\n\ntype mapStateToPropsType = {\n    profile: ProfilePageType\n    status: string\n    authorizedUserId: number | null\n}\n\ntype mapDispatchToPropsType = {\n    getUserProfile: (userId: string) => void\n    getStatus: (userId: string) => void\n    updateStatus: (status: string) => void\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorizedUserId: state.auth.id\n    }\n}\n\n\ntype ProfileInfoContainerType = mapStateToPropsType & mapDispatchToPropsType\ntype Type = RouteComponentProps<ParamsType> & ProfileInfoContainerType\n\n\nexport default compose<React.ComponentType>(\n    withRouter,\n    withAuthRedirect,\n    connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\n        getUserProfile,\n        getStatus,\n        updateStatus\n    })\n)(ProfileContainer)\n\n"],"sourceRoot":""}