{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/Header/Header.module.sass","components/Login/Login.module.sass","components/Navbar/Friends/Friends.module.sass","components/Users/Users.module.sass","api/api.ts","components/Navbar/MenuItem/MenuItem.tsx","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","redux/message-reducer.ts","components/Dialogs/Messages/Messages.tsx","components/Dialogs/Messages/MessagesContainer.tsx","components/Navbar/Friends/FriendsContainer.tsx","components/Navbar/Friends/Friends.tsx","utils/object-helpers.ts","redux/users-reducer.ts","redux/users-selectors.ts","components/common/Paginator/Paginator.tsx","components/Users/User/User.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Header/Header.tsx","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/dialogs-reducer.ts","redux/sidebar-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Dialogs/Messages/Messages.module.sass","assets/image/preloader.svg","components/common/Preloader/Preloader.jsx","components/Navbar/Navbar.module.sass","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","components/common/Paginator/Paginator.module.sass","redux/profile-reducer.ts","assets/image/ufo-2.png"],"names":["module","exports","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","getUsersPage","pageNumber","getProfile","userId","console","warn","profileAPI","follow","id","post","unfollow","delete","getStatus","updateStatus","status","put","authAPI","me","login","email","password","rememberMe","captcha","logout","MenuItem","props","className","s","nav_item","nav_item_link","to","activeClassName","active","item","Navbar","nav","nav_list","News","Music","ADD_MESSAGE","initialState","messages","name","textMessage","maxLength50","maxLengthCreator","Messages","addMessage","newMessages","map","m","dialog_body","message_one","message_two","dialog_window","dialog_header","Button","variant","color","MessagesReduxForm","onSubmit","formData","newMessageText","reduxForm","form","handleSubmit","dialog_footer","Field","component","Textarea","placeholder","dialog_footer_textarea","validate","requiredField","button","MessagesContainer","connect","state","messagesPage","dispatch","type","addMessageAC","FriendsContainer","friends","sidebar","f","Avatar","avatar","src","alt","updateObInArray","itemId","objPropName","newObjProps","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setCurrentPage","setToggleIsFetching","toggleFollowingProgress","followUnfollowFlow","apiMethod","actionCreator","a","resultCode","getUsersSelector","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","classNames","require","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","users_paginator","onClick","filter","p","number","selectPage","User","user","user_avatar","photos","large","button_followed","followed","follow_unfollow_button","disabled","some","user_info","user_info_name","user_name","user_status","Users","users_list","UsersContainer","render","Preloader","this","React","Component","WithUrlDataContainerComponent","withRouter","bind","setUserProfile","page","items","totalCount","Header","photo","logoutTC","isAuth","site_name","small","width","height","SET_USER_DATA","SET_USER_PHOTO","setUserData","payload","getUserAuthData","res","HeaderContainer","match","params","getUserPhoto","WithUrlUsersDataContainerComponent","auth","loginTC","message","length","stopSubmit","_error","h1","LoginReduxForm","error","Input","formSummaryError","dialogs","lastMessage","INITIALIZED_SUCCESS","initialized","reducer","combineReducers","profilePage","profileReducer","dialogsPage","action","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","fallback","DialogsContainer","lazy","ProfileContainer","App","initializeApp","exact","path","AppContainer","promise","Promise","all","MainApp","StrictMode","Boolean","location","hostname","unregister","navigator","serviceWorker","ready","registration","catch","ReactDOM","document","getElementById","preloader","FormControl","input","meta","touched","children","child","el","hasError","formControl","restProps","value","maxLength","ADD_POST","SET_PROFILE_INFO","SET_STATUS","UPDATE_STATUS","posts","like","profile","newPostText","addPostAC","updateUserStatus","getUserProfile"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,+B,oBCA3ED,EAAOC,QAAU,CAAC,UAAY,0BAA0B,MAAQ,wB,oBCAhED,EAAOC,QAAU,CAAC,GAAK,kBAAkB,iBAAmB,kC,oBCA5DD,EAAOC,QAAU,CAAC,cAAgB,iC,yCCAlCD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,WAAa,0BAA0B,KAAO,oBAAoB,YAAc,2BAA2B,OAAS,sBAAsB,uBAAyB,sCAAsC,UAAY,yBAAyB,eAAiB,8BAA8B,UAAY,2B,sDCDxV,mHAGIC,EAHJ,OAGeC,EAAMC,OAAO,CAExBC,iBAAiB,EACjBC,QAAS,gDACTC,QAAS,CACL,UAAW,0CAKNC,EAAW,CACpBC,SADoB,SACXC,EAA8BC,GACnC,OAAOT,EAASU,IAAT,qBAA2BF,EAA3B,kBAAgDC,IAAYE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAGjGC,aALoB,SAKPC,EAA6BN,GACtC,OAAOT,EAASU,IAAT,qBAA2BK,EAA3B,kBAA+CN,IAAYE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAGhGG,WAToB,SASTC,GAEP,OADAC,QAAQC,KAAK,6CACNC,EAAWJ,WAAWC,IAGjCI,OAdoB,SAcbC,GACH,OAAOtB,EAASuB,KAAT,8DAAqED,KAGhFE,SAlBoB,SAkBXF,GACL,OAAOtB,EAASyB,OAAT,8DAAuEH,MAIzEF,EAAa,CACtBJ,WADsB,SACXC,GAEP,OADAC,QAAQC,KAAK,6CACNnB,EAASU,IAAT,kBAAwBO,IAAUN,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAGvEa,UANsB,SAMZT,GACN,OAAOjB,EAASU,IAAI,kBAAoBO,IAG5CU,aAVsB,SAUTC,GACT,OAAO5B,EAAS6B,IAAT,iBAA+B,CAACD,OAAQA,MAI1CE,EAAU,CACnBC,GADmB,WAEf,OAAO/B,EAASU,IAAI,YAGxBsB,MALmB,SAKbC,EAAeC,EAAkBC,EAAqBC,GACxD,OAAOpC,EAASuB,KAAK,cAAe,CAACU,QAAOC,WAAUC,aAAYC,aAGtEC,OATmB,WAUf,OAAOrC,EAASyB,OAAO,kB,+JCpDlBa,EAAW,SAACC,GACrB,OACI,oBAAIC,UAAWC,IAAEC,SAAjB,SACI,cAAC,IAAD,CAASF,UAAWC,IAAEE,cACbC,GAAIL,EAAMK,GACVC,gBAAiBJ,IAAEK,OAF5B,SAII,+BAAOP,EAAMQ,YCKdC,EAjBU,WAErB,OACI,qBAAKR,UAAWC,IAAEQ,IAAlB,SACI,qBAAIT,UAAWC,IAAES,SAAjB,UAEI,cAAC,EAAD,CAAUN,GAAI,WAAYG,KAAM,YAChC,cAAC,EAAD,CAAUH,GAAI,WAAYG,KAAM,YAChC,cAAC,EAAD,CAAUH,GAAI,QAASG,KAAM,SAC7B,cAAC,EAAD,CAAUH,GAAI,SAAUG,KAAM,UAC9B,cAAC,EAAD,CAAUH,GAAI,YAAaG,KAAM,aACjC,cAAC,EAAD,CAAUH,GAAI,SAAUG,KAAM,gB,QCJ/BI,EARF,WACT,OACI,2CCMOC,EARD,WACV,OACI,yC,eCLKC,EAAc,sCAKvBC,EAAe,CACfC,SAAU,CACN,CAACjC,GAAI,EAAGkC,KAAM,eAAMC,YAAa,SACjC,CAACnC,GAAI,EAAGkC,KAAM,eAAMC,YAAa,SACjC,CAACnC,GAAI,EAAGkC,KAAM,eAAMC,YAAa,oNACjC,CAACnC,GAAI,EAAGkC,KAAM,eAAMC,YAAa,uIAkBlC,I,4DCdDC,EAAcC,YAAiB,IAqCtBC,EAnC0B,SAAC,GAA4B,IAA3BL,EAA0B,EAA1BA,SAAUM,EAAgB,EAAhBA,WAC7CC,EAAcP,EAASQ,KAAI,SAAAC,GAAC,OAAI,sBAAgBxB,UAAWC,IAAEwB,YAA7B,UAGhC,sBAAKzB,UAAoB,IAATwB,EAAE1C,GAAWmB,IAAEyB,YAAc,GAA7C,UACI,8BAAe,IAATF,EAAE1C,GAAW0C,EAAER,KAAO,OAC5B,8BAAe,IAATQ,EAAE1C,GAAW0C,EAAEP,YAAc,UAEvC,sBAAKjB,UAAoB,IAATwB,EAAE1C,GAAWmB,IAAE0B,YAAc,GAA7C,UACI,8BAAe,IAATH,EAAE1C,GAAW0C,EAAER,KAAO,OAC5B,8BAAe,IAATQ,EAAE1C,GAAW0C,EAAEP,YAAc,YATGO,EAAE1C,OAmBhD,OACI,sBAAKkB,UAAWC,IAAE2B,cAAlB,UACI,sBAAK5B,UAAWC,IAAE4B,cAAlB,UACI,cAAC,IAAD,CAASzB,GAAG,WAAZ,SACI,cAAC0B,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAlC,oBAEJ,mDAEHV,EACD,cAACW,EAAD,CAAmBC,SAbV,SAACC,GACdd,EAAWc,EAASC,uBA2CfH,EAAoBI,YAAiC,CAC9DC,KAAM,kBADuBD,EAnB+C,SAAC,GAAoB,IAAnBE,EAAkB,EAAlBA,aAE9E,OACI,sBAAML,SAAUK,EAAhB,SACI,sBAAKvC,UAAWC,IAAEuC,cAAlB,UACI,cAACC,EAAA,EAAD,CACIC,UAAWC,IACX3B,KAAM,iBACN4B,YAAa,qBACb5C,UAAWC,IAAE4C,uBACbC,SAAU,CAACC,IAAe7B,KAG9B,wBAAQlB,UAAWC,IAAE+C,OAArB,0B,QCxCHC,EAAoBC,aAfT,SAACC,GACrB,MAAO,CACHpC,SAAUoC,EAAMC,aAAarC,aAKV,SAACsC,GACxB,MAAO,CACHhC,WAAY,SAACe,GACTiB,EFGgB,SAACjB,GAAD,MAA6B,CAACkB,KAAMzC,EAAauB,kBEHxDmB,CAAanB,QAKDc,CAA4G9B,G,2BCJhIoC,EAAmBN,aAZR,SAACC,GACrB,MAAO,CACHM,QAASN,EAAMO,QAAQD,YAKJ,SAACJ,GACxB,MAAO,KAIqBH,ECfc,SAACnD,GAEzBA,EAAM0D,QAAQlC,KAAI,SAAAoC,GAAC,OAAI,8BACrC,cAACC,EAAA,EAAD,CAAQ5D,UAAWC,IAAE4D,OAAQC,IAAKH,EAAEE,OAAQE,IAAKJ,EAAE3C,QADJ2C,EAAE7E,OAIrD,OACI,2B,iCClBKkF,EAAkB,SAACzD,EAAW0D,EAAaC,EAAkBC,GACtE,OAAO5D,EAAKgB,KAAI,SAAC6C,GACb,OAAOH,IAAWG,EAAEF,GAAb,2BAAgCE,GAAMD,GAAeC,MCGvDC,EAAS,+BACTC,EAAW,iCACXC,EAAY,kCACZC,EAAmB,yCACnBC,EAAwB,8CACxBC,EAAqB,2CACrBC,EAA4B,kDAE5B7D,EAA0B,CACnC8D,MAAO,GACP3G,SAAU,GACV4G,gBAAiB,EACjB7G,YAAa,EACb8G,YAAY,EACZC,oBAAqB,IAuElB,IAAMC,EAAgB,SAAClG,GAAD,MAAiB,CAC1CwE,KAAMe,EACNvF,OAGSmG,GAAkB,SAACnG,GAAD,MAAiB,CAC5CwE,KAAMgB,EACNxF,OAQSoG,GAAiB,SAAClH,GAAD,MAAmC,CAC7DsF,KAAMkB,EACNxG,gBAQSmH,GAAsB,SAACL,GAAD,MAA0B,CACzDxB,KAAMoB,EACNI,eAGSM,GAA0B,SAACN,EAAqBrG,GAAtB,MAA0C,CAC7E6E,KAAMqB,EACNG,aACArG,WAYE4G,GAAkB,uCAAG,WAAOvG,EAAYuE,EAAoBiC,EAAgBC,GAAvD,SAAAC,EAAA,6DAEvBnC,EAAS+B,IAAwB,EAAMtG,IAFhB,SAGFwG,EAAUxG,GAHR,OAIU,IAJV,OAIVT,KAAKoH,YACdpC,EAASkC,EAAczG,IAE3BuE,EAAS+B,IAAwB,EAAOtG,IAPjB,2CAAH,4D,4BChIX4G,GAAmBC,cAJR,SAACxC,GACrB,OAAOA,EAAMyC,UAAUhB,SAG8B,SAACA,GACtD,OAAOA,KAGEiB,GAAc,SAAC1C,GACxB,OAAOA,EAAMyC,UAAU3H,UAGd6H,GAAqB,SAAC3C,GAC/B,OAAOA,EAAMyC,UAAUf,iBAGdkB,GAAiB,SAAC5C,GAC3B,OAAOA,EAAMyC,UAAU5H,aAGdgI,GAAgB,SAAC7C,GAC1B,OAAOA,EAAMyC,UAAUd,YAGdmB,GAAyB,SAAC9C,GACnC,OAAOA,EAAMyC,UAAUb,qB,2DCvBvBmB,GAAaC,EAAQ,KAUZC,GAAY,SAAC,GAOtB,IAPgH,IAAzFC,EAAwF,EAAxFA,gBAAiBpI,EAAuE,EAAvEA,SAAUD,EAA6D,EAA7DA,YAAasI,EAAgD,EAAhDA,cAAgD,IAAjCC,mBAAiC,MAAnB,GAAmB,EAK3GC,EAAaC,KAAKC,KAAKL,EAAkBpI,GACzC0I,EAAQ,GACHC,EAAI,EAAGA,EAAIJ,EAAYI,IAC5BD,EAAME,KAAKD,GAKf,IAAIE,EAAeL,KAAKC,KAAKF,EAAaD,GAbqE,EAcvEQ,mBAAS,GAd8D,oBAc1GC,EAd0G,KAc3FC,EAd2F,KAiB3GC,GAAyBF,EAAgB,GAAKT,EAAc,EAE5DY,EAAyBH,EAAgBT,EAE7C,OAEI,sBAAKvG,UAAWC,KAAEmH,gBAAlB,UAGQJ,EAAgB,GAChB,wBAAQK,QAAS,WACbJ,EAAiBD,EAAgB,IADrC,kBAKHL,EACIW,QAAO,SAAAC,GAAC,OAAIA,GAAKL,GAAyBK,GAAKJ,KAC/C5F,KAAI,SAACgG,GACF,OACI,qBAAKvH,UAAWC,KAAEuH,OAAlB,SACI,sBAAMxH,UAAWkG,GAAW,gBACvBjG,KAAEwH,WAAazJ,IAAgBuJ,GACjCtH,KAAE1B,YAEC8I,QAAS,WACLf,EAAciB,IALxB,SAMUA,GAHCA,QASvBT,EAAeE,GACf,wBAAQK,QAAS,WACbJ,EAAiBD,EAAgB,IADrC,sB,SCpDHU,GAAO,SAAC,GAA8D,IAA7DC,EAA4D,EAA5DA,KAAM5C,EAAsD,EAAtDA,oBAAqB/F,EAAiC,EAAjCA,SAAUH,EAAuB,EAAvBA,OACvD,OACI,qBAAKmB,UAAWC,KAAE2E,MAAlB,SAEI,sBAAmB5E,UAAWC,KAAE0H,KAAhC,UAEI,qBAAK3H,UAAWC,KAAE2H,YAAlB,SACI,cAAC,IAAD,CAASxH,GAAI,YAAcuH,EAAK7I,GAAhC,SACI,qBAAKkB,UAAWC,KAAE4D,OACbC,IAA2B,OAAtB6D,EAAKE,OAAOC,MAAiBH,EAAKE,OAAOC,MAAzC,UAAoDjE,MACzDE,IAAK4D,EAAK3G,WAKvB,qBAAKhB,UAAWC,KAAE8H,gBAAlB,SACKJ,EAAKK,SACF,wBAAQhI,UAAWC,KAAEgI,uBACbC,SAAUnD,EAAoBoD,MAAK,SAAArJ,GAAE,OAAIA,IAAO6I,EAAK7I,MACrDuI,QAAS,WACLrI,EAAS2I,EAAK7I,KAH1B,sBAOE,wBAAQkB,UAAWC,KAAEgI,uBACbC,SAAUnD,EAAoBoD,MAAK,SAAArJ,GAAE,OAAIA,IAAO6I,EAAK7I,MACrDuI,QAAS,WACLxI,EAAO8I,EAAK7I,KAHxB,sBAUV,qBAAKkB,UAAWC,KAAEmI,UAAlB,SACI,sBAAKpI,UAAWC,KAAEoI,eAAlB,UACI,qBAAKrI,UAAWC,KAAEqI,UAAlB,SAA8BX,EAAK3G,OACnC,qBAAKhB,UAAWC,KAAEsI,YAAlB,SAAgCZ,EAAKvI,gBAjCvCuI,EAAK7I,OCAd0J,GAAQ,SAAC,GAAsH,IAArH5D,EAAoH,EAApHA,MAAOC,EAA6G,EAA7GA,gBAAiB5G,EAA4F,EAA5FA,SAAUD,EAAkF,EAAlFA,YAAasI,EAAqE,EAArEA,cAAevB,EAAsD,EAAtDA,oBAAqB/F,EAAiC,EAAjCA,SAAUH,EAAuB,EAAvBA,OAEhH,OACI,sBAAKmB,UAAWC,KAAE2E,MAAlB,UAEI,cAAC,GAAD,CAAW5G,YAAaA,EACbsI,cAAeA,EACfD,gBAAiBxB,EACjB5G,SAAUA,IAErB,qBAAK+B,UAAWC,KAAEwI,WAAlB,SAEQ7D,EAAMrD,KAAI,SAAA6C,GAAC,OAAI,cAAC,GAAD,CAAMuD,KAAMvD,EACNW,oBAAqBA,EACrB/F,SAAUA,EACVH,OAAQA,GAHMuF,EAAEtF,aCkBnD4J,G,4MAOFpC,cAAgB,SAAC/H,GAAuB,IAEhCN,EAAY,EAAK8B,MAAjB9B,SACJ,EAAK8B,MAAMhC,SAASQ,EAAYN,I,EAGpC0K,OAAS,kBACL,qCACK,EAAK5I,MAAM+E,WAAa,cAAC8D,GAAA,EAAD,IAAe,KAExC,cAAC,GAAD,CAAOhE,MAAO,EAAK7E,MAAM6E,MAClB/F,OAAQ,EAAKkB,MAAMlB,OACnBG,SAAU,EAAKe,MAAMf,SACrBf,SAAU,EAAK8B,MAAM9B,SACrB4G,gBAAiB,EAAK9E,MAAM8E,gBAC5B7G,YAAa,EAAK+B,MAAM/B,YACxBsI,cAAe,EAAKA,cACpBvB,oBAAqB,EAAKhF,MAAMgF,0B,kEAvB3B,MAEa8D,KAAK9I,MAA9B/B,EAFY,EAEZA,YAAaC,EAFD,EAECA,SACjB4K,KAAK9I,MAAMhC,SAASC,EAAaC,O,GAJZ6K,IAAMC,WA0C/BC,GAAgCC,YAAWP,IAEhCxF,gBAdS,SAACC,GACrB,MAAO,CACHyB,MAAOc,GAAiBvC,GACxBlF,SAAU4H,GAAY1C,GACtB0B,gBAAiBiB,GAAmB3C,GACpCnF,YAAa+H,GAAe5C,GAC5B2B,WAAYkB,GAAc7C,GAC1B4B,oBAAqBkB,GAAuB9C,MAQhD,CACItE,OLoDc,SAACC,GAAD,8CAAgB,WAAOuE,GAAP,SAAAmC,EAAA,sDAClCH,GAAmBvG,EAAIuE,EAAUvF,IAASe,OAAOqK,KAAKpL,KAAWkH,GAD/B,2CAAhB,uDKnDdhG,SLuDgB,SAACF,GAAD,8CAAgB,WAAOuE,GAAP,SAAAmC,EAAA,sDACpCH,GAAmBvG,EAAIuE,EAAUvF,IAASkB,SAASkK,KAAKpL,KAAWmH,IAD/B,2CAAhB,uDKtDhBC,kBACAiE,oBACApL,SL6BoB,SAACqL,EAAuBnL,GAAxB,8CAA6C,WAAOoF,GAAP,eAAAmC,EAAA,6DACrEnC,EAAS8B,IAAoB,IAC7B9B,EAAS6B,GAAekE,IAF6C,SAGpDtL,IAASC,SAASqL,EAAMnL,GAH4B,OAGjEI,EAHiE,OAIrEgF,GA9BqBuB,EA8BHvG,EAAKgL,MA9B0B,CACjD/F,KAAMiB,EACNK,WA6BAvB,GArB+BiG,EAqBHjL,EAAKiL,WArBsB,CACvDhG,KAAMmB,EACN6E,gBAoBAjG,EAAS8B,IAAoB,IANwC,iCAhBvC,IAACmE,EAVV1E,IA0BgD,OAA7C,wDKnCb1B,CAQb8F,I,qBCzEaO,GAlBA,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,OAAQlK,EAAgB,EAAhBA,MACtC,OACI,qCACI,qBAAKQ,UAAWC,KAAE0J,UAAlB,uBAEA,sBAAK3J,UAAWC,KAAET,MAAlB,UACqB,KAAhBgK,EAAMI,MACD,qBAAK9F,IAAKD,KAAQgG,MAAM,OAAOC,OAAO,OAAO/F,IAAI,WACjD,qBAAKD,IAAK0F,EAAMI,MAAOC,MAAM,OAAOC,OAAO,OAAO/F,IAAI,WAE3D2F,EACK,gCAAMlK,EAAN,MAAe,wBAAQ6H,QAASoC,EAAjB,wBACf,cAAC,IAAD,CAASrJ,GAAI,SAAb,0B,SCfT2J,GAAgB,qCAChBC,GAAiB,sCAGjBlJ,GAAyB,CAClChC,GAAI,KACJW,MAAO,KACPD,MAAO,KACPkK,QAAQ,EACRF,MAAO,CACHI,MAAO,GACP9B,MAAO,KA0Bf,IAAMmC,GAAc,SAACnL,EAAmBW,EAAsBD,EAAsBkK,GAAhE,MAAqF,CACrGpG,KAAMyG,GACNG,QAAS,CAACpL,KAAIW,QAAOD,QAAOkK,YAanBS,GAAkB,yDAAM,WAAO9G,GAAP,qBAAAmC,EAAA,sEACjBlG,IAAQC,KADS,OAEL,KADxB6K,EAD6B,QAEzB/L,KAAKoH,aACL3G,EAAKsL,EAAI/L,KAAKA,KAAKS,GACnBW,EAAQ2K,EAAI/L,KAAKA,KAAKoB,MACtBD,EAAQ4K,EAAI/L,KAAKA,KAAKmB,MAC1B6D,EAAS4G,GAAYnL,EAAIW,EAAOD,GAAO,KANV,2CAAN,uDC5BzB6K,G,4MAUF1B,OAAS,kBAAM,cAAC,GAAD,eAAY,EAAK5I,S,kEAJ5B,IAAItB,EAASoK,KAAK9I,MAAMuK,MAAMC,OAAO9L,OACrCoK,KAAK9I,MAAMyK,aAAa/L,O,GAPFqK,IAAMC,WAwBhC0B,GAAqCxB,YAAWoB,IAErCnH,gBAbO,SAACC,GACnB,MAAO,CACHrE,GAAIqE,EAAMuH,KAAK5L,GACfW,MAAO0D,EAAMuH,KAAKjL,MAClBD,MAAO2D,EAAMuH,KAAKlL,MAClBkK,OAAQvG,EAAMuH,KAAKhB,OACnBF,MAAOrG,EAAMuH,KAAKlB,SAQtB,CAEIgB,aDSoB,SAAC/L,GAAD,OAAoB,SAAC4E,MCRzCoG,SD4BgB,yDAAM,WAAOpG,GAAP,SAAAmC,EAAA,sEACLlG,IAAQO,SADH,OAEO,IAFP,OAEbxB,KAAKoH,YACdpC,EAAS4G,GAAY,KAAM,KAAM,MAAM,IAHjB,2CAAN,wDChCT/G,CAKRuH,I,qBCZQvH,gBANS,SAACC,GACrB,MAAO,CACHuG,OAAQvG,EAAMuH,KAAKhB,UAI4E,CAACiB,QF6BjF,SAAClL,EAAeC,EAAkBC,EAAqBC,GAAvD,8CAA6E,WAAOyD,GAAP,iBAAAmC,EAAA,sEAC3ElG,IAAQE,MAAMC,EAAOC,EAAUC,EAAYC,GADgC,OAE/D,KAD7BxB,EAD4F,QAEnFC,KAAKoH,WACdpC,EAAS8G,OAELS,EAAUxM,EAASC,KAAK0C,SAAS8J,OAAS,EAAIzM,EAASC,KAAK0C,SAAS,GAAK,aAC9EsC,EAASyH,aAAW,QAAS,CAACC,OAAQH,MANsD,2CAA7E,wDE7BR1H,EApCD,SAACnD,GAaX,OAJIA,EAAM2J,QACL,IAID,gCACI,oBAAI1J,UAAWC,KAAE+K,GAAjB,mBACA,cAACC,GAAD,CAAgB/I,SAfP,SAACC,GACd,IAAI1C,EAAQ0C,EAAS1C,MACjBC,EAAWyC,EAASzC,SACpBC,EAAawC,EAASxC,WACtBC,EAAUuC,EAASvC,QACvBG,EAAM4K,QAAQlL,EAAOC,EAAUC,EAAYC,YAqEtCqL,GAAiB5I,YAAwB,CAClDC,KAAM,SADoBD,EA7BsC,SAAC,GAAgC,IAA/BE,EAA8B,EAA9BA,aAAc2I,EAAgB,EAAhBA,MAEhF,OACI,uBAAMhJ,SAAUK,EAAhB,UACI,8BAAK,cAACE,EAAA,EAAD,CAAOC,UAAWyI,IACXvI,YAAa,QACb5B,KAAM,QACN8B,SAAU,CAACC,SAEvB,8BAAK,cAACN,EAAA,EAAD,CAAOC,UAAWyI,IACXvI,YAAa,WACb5B,KAAM,WACN8B,SAAU,CAACC,KACXO,KAAM,eAElB,gCAAK,cAACb,EAAA,EAAD,CAAOC,UAAWyI,IACX7H,KAAM,WACNtC,KAAM,eAFlB,iBAKCkK,GAAS,qBAAKlL,UAAWC,KAAEmL,iBAAlB,SAAqCF,IAC/C,8BACI,mD,SChFZpK,GAAe,CACfuK,QAAS,CACL,CACIvM,GAAI,EACJkC,KAAM,+CACNsK,YAAa,wCACbzH,OAAQ,2EAEZ,CACI/E,GAAI,EACJkC,KAAM,+CACNsK,YAAa,8TACbzH,OAAQ,2EAEZ,CACI/E,GAAI,EACJkC,KAAM,+CACNsK,YAAa,gEACbzH,OAAQ,2EAEZ,CACI/E,GAAI,EACJkC,KAAM,+CACNsK,YAAa,4GACbzH,OAAQ,2EAEZ,CACI/E,GAAI,EACJkC,KAAM,+CACNsK,YAAa,gEACbzH,OAAQ,6EC9BpB,IAAI/C,GAAe,CACf2C,QAAS,CACL,CACI3E,GAAI,EACJkC,KAAM,6BACN6C,OAAQ,2EAEZ,CACI/E,GAAI,EACJkC,KAAM,6BACN6C,OAAQ,2EAEZ,CACI/E,GAAI,EACJkC,KAAM,6BACN6C,OAAQ,6E,oBCZP0H,GAAsB,0CAGtBzK,GAAe,CACxB0K,aAAa,GAkBjB,ICdIC,GAAUC,aAAgB,CAC1BC,YAAaC,KACbC,YHsBG,WAA4D,IAApC1I,EAAmC,uDAA3BrC,GACnC,OAAOqC,GGtBPC,anBCG,WAAyE,IAAjDD,EAAgD,uDAAxCrC,EAAcgL,EAA0B,uCAC3E,OAAQA,EAAOxI,MACX,KAAKzC,EACD,OAAO,2BACAsC,GADP,IAEIpC,SAAS,GAAD,mBAAMoC,EAAMpC,UAAZ,CAAsB,CAACjC,GAAI,EAAGkC,KAAM,eAAMC,YAAa6K,EAAO1J,oBAG9E,QACI,OAAOe,ImBTfO,QFK0B,WAAwC,IAAvCP,EAAsC,uDAA9BrC,GACnC,OAAOqC,GELPyC,UbwBG,WAAiE,IAA3CzC,EAA0C,uDAAlCrC,EAAcgL,EAAoB,uCACnE,OAAQA,EAAOxI,MACX,KAAKe,EACD,OAAO,2BACAlB,GADP,IAEIyB,MAAOZ,EAAgBb,EAAMyB,MAAOkH,EAAOhN,GAAI,KAAM,CAACkJ,UAAU,MAGxE,KAAK1D,EACD,OAAO,2BACAnB,GADP,IAEIyB,MAAOZ,EAAgBb,EAAMyB,MAAOkH,EAAOhN,GAAI,KAAM,CAACkJ,UAAU,MAGxE,KAAKzD,EACD,OAAO,2BACApB,GADP,IAEIyB,MAAOkH,EAAOlH,QAGtB,KAAKJ,EACD,OAAO,2BACArB,GADP,IAEInF,YAAa8N,EAAO9N,cAG5B,KAAKyG,EACD,OAAO,2BACAtB,GADP,IAEI0B,gBAAiBiH,EAAOxC,aAGhC,KAAK5E,EACD,OAAO,2BACAvB,GADP,IAEI2B,WAAYgH,EAAOhH,aAG3B,KAAKH,EACD,OAAO,2BACAxB,GADP,IAEI4B,oBAAqB+G,EAAOhH,WAAP,sBACX3B,EAAM4B,qBADK,CACgB+G,EAAOrN,SADvB,YAEX0E,EAAM4B,oBAAoBuC,QAAO,SAAAxI,GAAE,OAAIA,IAAOgN,EAAOrN,aAEvE,QACI,OAAO0E,IarEfuH,KNMG,WAAwF,IAAnEvH,EAAkE,uDAA1DrC,GAAcgL,EAA4C,uCAC1F,OAAQA,EAAOxI,MACX,KAAKyG,GACD,OAAO,2BACA5G,GACA2I,EAAO5B,SAGlB,KAAKF,GACD,OAAO,2BACA7G,GACA2I,EAAOzN,MAGlB,QACI,OAAO8E,IMpBfb,KAAMyJ,KACNC,IDPG,WAA2E,IAAvD7I,EAAsD,uDAA9CrC,GAAcgL,EAAgC,uCAC7E,OAAQA,EAAOxI,MACX,KAAKiI,GACD,OAAO,2BACApI,GADP,IAEIqI,aAAa,IAGrB,QACI,OAAOrI,MCUb8I,GAAmBC,OAAOC,sCAAwCC,KAC7DC,GAAmBC,aAAYb,GAASQ,GAAiBM,aAAgBC,QC7BvEC,GAAe,SAAC1D,GACzB,OAAO,SAAChJ,GACJ,OAAO,cAAC,WAAD,CAAU2M,SAAU,cAAC9D,GAAA,EAAD,IAApB,SACH,cAACG,EAAD,eAAehJ,QCcrB4M,GAAmB7D,IAAM8D,MAAK,kBAAM,iCACpCC,GAAmB/D,IAAM8D,MAAK,kBAAM,uDAkB7BE,GAAb,kLAGQjE,KAAK9I,MAAMgN,kBAHnB,+BAQQ,OAAKlE,KAAK9I,MAAMyL,YAMZ,sBAAKxL,UAAU,cAAf,UACI,wBAAQA,UAAU,SAAlB,SACI,cAAC,GAAD,MAEJ,qBAAKA,UAAU,sBAAf,SACI,uBAAMA,UAAU,UAAhB,UACI,qBAAKA,UAAU,GAAf,SACI,cAAC,EAAD,MAEJ,cAAC,WAAD,CAAU0M,SAAU,cAAC9D,GAAA,EAAD,IAApB,SACI,qBAAK5I,UAAU,eAAf,SACI,sBAAKA,UAAU,OAAf,UACI,cAAC,IAAD,CAAOgN,OAAK,EAACC,KAAK,IAAItE,OAAQ,kBAAM,cAAC,IAAD,CAAUvI,GAAI,gBAClD,cAAC,IAAD,CAAO6M,KAAK,oBAAoBtE,OAAQ8D,GAAaI,MACrD,cAAC,IAAD,CAAOI,KAAK,WAAWtE,OAAQ8D,GAAaE,MAC5C,cAAC,IAAD,CAAOM,KAAK,YAAYtE,OAAQ,kBAAM,cAAC1F,EAAD,OACtC,cAAC,IAAD,CAAOgK,KAAK,QAAQtE,OAAQ,kBAAM,cAAC,EAAD,OAClC,cAAC,IAAD,CAAOsE,KAAK,SAAStE,OAAQ,kBAAM,cAAC,EAAD,OACnC,cAAC,IAAD,CAAOsE,KAAK,SAAStE,OAAQ,kBAAM,cAAC,GAAD,OACnC,cAAC,IAAD,CAAOsE,KAAK,SAASvK,UAAW,kBAAM,cAAC,GAAD,OACtC,cAAC,IAAD,CAAOuK,KAAK,IAAItE,OAAQ,kBAAM,0DAK1C,qBAAK3I,UAAU,uBAAf,0BAKR,cAACwD,EAAD,OAnCG,cAACoF,GAAA,EAAD,QATnB,GAAyBE,IAAMC,WAmD3BmE,GAAed,aACflJ,aA1DkB,SAACC,GACnB,MAAO,CACHqI,YAAarI,EAAM6I,IAAIR,eAwD6D,CAACuB,cH7DhE,yDAAM,WAAO1J,GAAP,eAAAmC,EAAA,sEACXnC,EAAS8G,MADE,OAC3BgD,EAD2B,OAE/BC,QAAQC,IAAI,CAACF,IAAUhP,MAAK,kBACxBkF,EAR0B,CAC9BC,KAAMiI,QAIyB,2CAAN,wDG6DzBrI,CAAyG4J,KAGhGQ,GAAU,WACnB,OAAO,cAAC,IAAMC,WAAP,UACH,cAAC,IAAD,UACI,cAAC,IAAD,CAAUlB,MAAOA,GAAjB,SACI,cAACa,GAAD,WCtFIM,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASpD,MACvB,2DAwHC,SAASqD,KACV,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3P,MAAK,SAAA4P,GACJA,EAAaJ,gBAEdK,OAAM,SAAA9C,GACLxM,QAAQwM,MAAMA,EAAMN,YC3I5BqD,IAAStF,OACL,cAAC,GAAD,IACAuF,SAASC,eAAe,SAG5BN,KAMAA,M,mBChBAvQ,EAAOC,QAAU,CAAC,cAAgB,gCAAgC,cAAgB,gCAAgC,cAAgB,gCAAgC,OAAS,yBAAyB,uBAAyB,yCAAyC,YAAc,8BAA8B,YAAc,8BAA8B,YAAc,gC,6ECD7V,G,KAAA,IAA0B,uCCG5BqL,EAAY,WACrB,OACI,mCACI,qBAAK9E,IAAKsK,EAAWrK,IAAI,kB,mBCLrCzG,EAAOC,QAAU,CAAC,IAAM,oBAAoB,SAAW,yBAAyB,SAAW,yBAAyB,cAAgB,gC,uJCGvH8Q,EAAc,SAAC,GAAwE,EAAvEC,MAAwE,IAAD,IAAhEC,KAAOrD,EAAyD,EAAzDA,MAAOsD,EAAkD,EAAlDA,QAAqBC,GAA6B,EAAxCC,MAAwC,EAAjCC,GAAiC,EAA7BF,UAC7DG,GAD0F,wDAC/E1D,GAASsD,GAC1B,OACI,sBAAKxO,UAAWC,IAAE4O,YAAc,KAAOD,EAAW3O,IAAEiL,MAAQ,IAA5D,UACI,8BACKuD,IAGJG,GAAY,+BAAO1D,QAKnBvI,EAAW,SAAC5C,GAAgB,IAC9BuO,EAAoCvO,EAApCuO,MAAuBQ,GAAa/O,EAA7BwO,KAA6BxO,EAAvB2O,MADgB,YACO3O,EADP,2BAEpC,OAAO,cAACsO,EAAD,2BAAiBtO,GAAjB,aAAwB,oDAAcuO,GAAWQ,QAG/C3D,EAAQ,SAACpL,GAAgB,IAC3BuO,EAAoCvO,EAApCuO,MAAuBQ,GAAa/O,EAA7BwO,KAA6BxO,EAAvB2O,MADa,YACU3O,EADV,2BAEjC,OAAO,cAACsO,EAAD,2BAAiBtO,GAAjB,aAAwB,iDAAWuO,GAAWQ,S,gCCxBzD,oEAAO,IAAM/L,EAAgB,SAACgM,GAC1B,IAAGA,EACH,MAAO,qBAIE5N,EAAmB,SAAC6N,GAAD,OAAsB,SAACD,GACnD,GAAGA,EAAMlE,OAASmE,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCNjC1R,EAAOC,QAAU,CAAC,gBAAkB,mCAAmC,WAAa,8BAA8B,KAAO,0B,gSCEnH0R,EAAW,mCACXC,EAAmB,2CACnBC,EAAa,qCACbC,EAAgB,wCASlBtO,EAAe,CACfuO,MAAO,CACH,CAACvQ,GAAI,EAAG8L,QAAS,wJAAiC0E,KAAM,IACxD,CAACxQ,GAAI,EAAG8L,QAAS,0DAAc0E,KAAM,IACrC,CAACxQ,GAAI,EAAG8L,QAAS,8CAAY0E,KAAM,IAEvCC,QAAS,KACTnQ,OAAQ,IAGL,SAASwM,IAAiH,IAAlGzI,EAAiG,uDAAzFrC,EAAcgL,EAA2E,uCAC5H,OAAQA,EAAOxI,MACX,KAAK2L,EACD,OAAO,2BACA9L,GADP,IAEIkM,MAAM,CAAE,CAACvQ,GAAI,EAAG8L,QAASkB,EAAO0D,YAAaF,KAAM,KAA9C,mBAAsDnM,EAAMkM,UAGzE,KAAKH,EACD,OAAO,2BACA/L,GADP,IAEIoM,QAASzD,EAAOyD,UAGxB,KAAKJ,EAML,KAAKC,EACD,OAAO,2BACAjM,GADP,IAEI/D,OAAQ0M,EAAO1M,SAGvB,QACI,OAAO+D,GAIZ,IAAMsM,EAAY,SAACD,GAAD,MAA0B,CAAClM,KAAM2L,EAAUO,gBACvDrG,EAAiB,SAACoG,GAAD,MAAmB,CAC7CjM,KAAM4L,EACNK,YAQSG,EAAmB,SAACtQ,GAAD,MAAqB,CACjDkE,KAAM8L,EACNhQ,WAGSuQ,EAAiB,SAAClR,GAAD,8CAAoB,WAAO4E,GAAP,eAAAmC,EAAA,sEAC7B1H,IAASU,WAAWC,GADS,OAC1CJ,EAD0C,OAE9CgF,EAAS8F,EAAe9K,IAFsB,2CAApB,uDAKjBa,EAAY,SAACT,GAAD,8CAAoB,WAAO4E,GAAP,eAAAmC,EAAA,sEACzB5G,IAAWM,UAAUT,GADI,OACrC2L,EADqC,OAEzC/G,GAjB0BjE,EAiBHgL,EAAI/L,KAjBmB,CAC9CiF,KAAM6L,EACN/P,YAayC,iCAfhB,IAACA,IAee,OAApB,uDAKZD,EAAe,SAACC,GAAD,8CAAoB,WAAOiE,GAAP,SAAAmC,EAAA,sEAC5B5G,IAAWO,aAAaC,GADI,OAEhB,IAFgB,OAEpCf,KAAKoH,YACTpC,EAASqM,EAAiBtQ,IAHc,2CAApB,wD,gCClFb,QAA0B,oC","file":"static/js/main.8b307f30.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3oI2W\",\"error\":\"FormsControls_error__9lcue\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"site_name\":\"Header_site_name__1fFFR\",\"login\":\"Header_login__31kC2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"h1\":\"Login_h1__3d9UL\",\"formSummaryError\":\"Login_formSummaryError__3l-5r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friends_block\":\"Friends_friends_block__1T6CQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__2Whu_\",\"users_list\":\"Users_users_list__3DzG6\",\"user\":\"Users_user__12P5P\",\"user_avatar\":\"Users_user_avatar__1PI_a\",\"avatar\":\"Users_avatar__28Uw_\",\"follow_unfollow_button\":\"Users_follow_unfollow_button__2kgTj\",\"user_info\":\"Users_user_info__jMX1k\",\"user_info_name\":\"Users_user_info_name__YGCc9\",\"user_name\":\"Users_user_name__1Vq5z\"};","import axios from \"axios\";\nimport {FormDataType} from \"../components/Login/Login\";\n\nlet instance = axios.create({\n\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        \"API-KEY\": \"60b88672-b40f-4a98-87f4-2eaf9580a4aa\"\n    }\n\n})\n\nexport const usersAPI = {\n    getUsers(currentPage: string | number, pageSize: number) {\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data)\n    },\n\n    getUsersPage(pageNumber: string | number, pageSize: number) {\n        return instance.get(`users?page=${pageNumber}&count=${pageSize}`).then(response => response.data)\n    },\n\n    getProfile(userId: string) {\n        console.warn(\"Obsolete method. Please profileAPI object\")\n        return profileAPI.getProfile(userId)\n    },\n\n    follow(id: number) {\n        return instance.post(`https://social-network.samuraijs.com/api/1.0/follow/${id}`)\n    },\n\n    unfollow(id: number) {\n        return instance.delete(`https://social-network.samuraijs.com/api/1.0/follow/${id}`)\n    }\n}\n\nexport const profileAPI = {\n    getProfile(userId: string) {\n        console.warn(\"Obsolete method. Please profileAPI object\")\n        return instance.get(`profile/${userId}`).then(response => response.data)\n    },\n\n    getStatus(userId: string) {\n        return instance.get(`profile/status/` + userId)\n    },\n\n    updateStatus(status: string) {\n        return instance.put(`profile/status`, {status: status})\n    }\n}\n\nexport const authAPI = {\n    me() {\n        return instance.get('auth/me')\n    },\n\n    login(email: string, password: string, rememberMe: boolean, captcha?: boolean) {\n        return instance.post('/auth/login', {email, password, rememberMe, captcha})\n    },\n\n    logout() {\n        return instance.delete('/auth/login')\n    }\n}\n","import React from 'react'\nimport s from \"../Navbar.module.sass\";\nimport {NavLink} from \"react-router-dom\";\n\nexport type MenuItemType = {\n    to: string\n    item: string\n}\n\nexport const MenuItem = (props: MenuItemType) => {\n    return (\n        <li className={s.nav_item}>\n            <NavLink className={s.nav_item_link}\n                     to={props.to}\n                     activeClassName={s.active}>\n                {/*<img src={profile} alt=\"profile\"/>*/}\n                <span>{props.item}</span>\n            </NavLink>\n        </li>\n    )\n}","import React from \"react\";\nimport s from \"./Navbar.module.sass\";\nimport {MenuItem} from \"./MenuItem/MenuItem\";\n\nconst Navbar: React.FC = () => {\n\n    return (\n        <nav className={s.nav}>\n            <ul className={s.nav_list}>\n                {/*NavLink - не перезагружая страницу, меняем адресную строку*/}\n                <MenuItem to={\"/profile\"} item={\"Profile\"}/>\n                <MenuItem to={\"/dialogs\"} item={\"Dialogs\"}/>\n                <MenuItem to={\"/news\"} item={\"News\"}/>\n                <MenuItem to={\"/music\"} item={\"Music\"}/>\n                <MenuItem to={\"/settings\"} item={\"Settings\"}/>\n                <MenuItem to={\"/users\"} item={\"Users\"}/>\n            </ul>\n        </nav>\n    )\n}\n\nexport default Navbar;","import React from \"react\";\nimport s from \"./News.module.sass\";\n\nconst News = () => {\n    return (\n        <div>\n            Dialogs\n        </div>\n    )\n}\n\nexport default News;","import React from \"react\";\nimport s from \"./Music.module.sass\";\n\nconst Music = () => {\n    return (\n        <div>\n            Music\n        </div>\n    )\n}\n\nexport default Music;","export const ADD_MESSAGE = \"samurai-network/message/ADD_MESSAGE\"\n\n\nexport type addMessageACType = ReturnType<typeof addMessageAC>\n\nlet initialState = {\n    messages: [\n        {id: 1, name: \"Он\", textMessage: \"Hello\"},\n        {id: 2, name: \"Ты\", textMessage: \"Hello\"},\n        {id: 1, name: \"Он\", textMessage: \"Ты такая хорошая! Ты даже лучше, чем сахар!\"},\n        {id: 2, name: \"Ты\", textMessage: \"Спасибо! Приходи сегодня\"},\n    ]\n\n}\n\nexport function messageReducer(state = initialState, action: addMessageACType) {\n    switch (action.type) {\n        case ADD_MESSAGE:\n            return {\n                ...state,\n                messages: [...state.messages, {id: 2, name: \"Ты\", textMessage: action.newMessageText}]\n            };\n\n        default:\n            return state\n    }\n}\n\nexport const addMessageAC = (newMessageText: string) => ({type: ADD_MESSAGE, newMessageText} as const)","import React from \"react\";\nimport s from \"./Messages.module.sass\";\nimport {NavLink} from \"react-router-dom\";\nimport Button from '@material-ui/core/Button';\nimport {MessageType} from \"../../../redux/redux-store\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\n\ntype MessagesType = {\n    messages: Array<MessageType>\n    addMessage: (newMessageText: string) => void\n}\n\nconst maxLength50 = maxLengthCreator(50)\n\nconst Messages: React.FC<MessagesType> = ({messages, addMessage}) => {\n    let newMessages = messages.map(m => <div key={m.id} className={s.dialog_body}>\n        {/*Не охота верстать, сделать потом*/}\n\n        <div className={m.id === 1 ? s.message_one : \"\"}>\n            <div>{m.id === 1 ? m.name : null}</div>\n            <div>{m.id === 1 ? m.textMessage : null}</div>\n        </div>\n        <div className={m.id === 2 ? s.message_two : \"\"}>\n            <div>{m.id === 2 ? m.name : null}</div>\n            <div>{m.id === 2 ? m.textMessage : null}</div>\n        </div>\n\n\n    </div>)\n\n    const onSubmit = (formData: MessagesPropsFormType) => {\n        addMessage(formData.newMessageText)\n    }\n\n    return (\n        <div className={s.dialog_window}>\n            <div className={s.dialog_header}>\n                <NavLink to=\"/dialogs\">\n                    <Button variant=\"contained\" color=\"default\">Exit</Button>\n                </NavLink>\n                <div>Avatar + name</div>\n            </div>\n            {newMessages}\n            <MessagesReduxForm onSubmit={onSubmit}/>\n\n        </div>\n    )\n}\n\nexport default Messages;\n\nexport type MessagesPropsFormType = {\n    newMessageText: string\n}\n\nexport const MessagesForm: React.FC<InjectedFormProps<MessagesPropsFormType>> = ({handleSubmit}) => {\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className={s.dialog_footer}>\n                <Field\n                    component={Textarea}\n                    name={\"newMessageText\"}\n                    placeholder={\"Enter your message\"}\n                    className={s.dialog_footer_textarea}\n                    validate={[requiredField, maxLength50]}\n                />\n\n                <button className={s.button}>Send</button>\n            </div>\n        </form>\n    )\n}\n\nexport const MessagesReduxForm = reduxForm<MessagesPropsFormType>({\n    form: 'newMessageText'\n})(MessagesForm)","import React from \"react\";\nimport {addMessageAC} from \"../../../redux/message-reducer\";\nimport Messages from \"./Messages\";\nimport {connect} from \"react-redux\";\nimport {AppStateType, MessageType} from \"../../../redux/redux-store\";\nimport {Dispatch} from \"redux\";\n\ntype mapStateToPropsType = {\n    messages: Array<MessageType>\n}\n\ntype mapDispatchToPropsType = {\n    addMessage: (newMessageText: string) => void\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        messages: state.messagesPage.messages\n    }\n}\n\n/*https://stackoverflow.com/questions/49808004/parameter-dispatch-implicitly-has-an-any-type*/\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        addMessage: (newMessageText: string) => {\n            dispatch(addMessageAC(newMessageText));\n        }\n    }\n}\n\nexport const MessagesContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(Messages)\n","import React from \"react\";\nimport {Friends} from \"./Friends\";\nimport {connect} from \"react-redux\";\nimport {AppStateType, FriendType} from \"../../../redux/redux-store\";\n\n\ntype mapStateToPropsType = {\n    friends: Array<FriendType>\n}\n\ntype mapDispatchToPropsType = {\n\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        friends: state.sidebar.friends\n    }\n}\n\n/*https://stackoverflow.com/questions/49808004/parameter-dispatch-implicitly-has-an-any-type*/\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n\n    }\n}\nexport const FriendsContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(Friends)\n","import React from \"react\";\nimport {FriendType} from \"../../../redux/redux-store\";\nimport {Avatar} from \"@material-ui/core\";\nimport s from \"./Friends.module.sass\";\n/*import { AvatarGroup } from '@material-ui/lab';*/\n\ntype FriendsType = {\n    friends: Array<FriendType>\n}\n\n\nexport const Friends: React.FC<FriendsType> = (props) => {\n\n    let friendsList = props.friends.map(f => <div key={f.id}>\n        <Avatar className={s.avatar} src={f.avatar} alt={f.name}/>\n    </div>)\n\n    return (\n        <div></div>\n        /*<AvatarGroup className={s.friends_block} spacing={0} max={3}>\n            {friendsList}\n        </AvatarGroup>*/\n    )\n}","export const updateObInArray = (item: any, itemId: any, objPropName: any, newObjProps: any) => {\n    return item.map((u: any) => {\n        return itemId === u[objPropName] ? {...u, ...newObjProps} : u\n    })\n}","import {UsersType, UserType} from \"./redux-store\";\nimport {usersAPI} from \"../api/api\";\nimport {Dispatch} from \"redux\";\nimport {updateObInArray} from \"../utils/object-helpers\";\n\nexport const FOLLOW = \"samurai-network/users/FOLLOW\"\nexport const UNFOLLOW = \"samurai-network/users/UNFOLLOW\"\nexport const SET_USERS = \"samurai-network/users/SET_USERS\"\nexport const SET_CURRENT_PAGE = \"samurai-network/users/SET_CURRENT_PAGE\"\nexport const SET_TOTAL_USERS_COUNT = \"samurai-network/users/SET_TOTAL_USERS_COUNT\"\nexport const TOGGLE_IS_FETCHING = \"samurai-network/users/TOGGLE_IS_FETCHING\"\nexport const TOGGLE_FOLLOWING_PROGRESS = \"samurai-network/users/TOGGLE_FOLLOWING_PROGRESS\"\n\nexport const initialState: UsersType = {\n    users: [],\n    pageSize: 50,\n    totalUsersCount: 0,\n    currentPage: 2,\n    isFetching: false,\n    followingInProgress: []\n}\n\nexport type followACType = ReturnType<typeof followSuccess>\nexport type unfollowACType = ReturnType<typeof unfollowSuccess>\nexport type setUsersACType = ReturnType<typeof setUsers>\nexport type setCurrentPageACType = ReturnType<typeof setCurrentPage>\nexport type setTotalUsersCountACType = ReturnType<typeof setTotalUsersCount>\nexport type toggleIsFetchingACType = ReturnType<typeof setToggleIsFetching>\nexport type toggleFollowingProgressACType = ReturnType<typeof toggleFollowingProgress>\n\nexport type ActionType =\n    followACType\n    | unfollowACType\n    | setUsersACType\n    | setCurrentPageACType\n    | setTotalUsersCountACType\n    | toggleIsFetchingACType\n    | toggleFollowingProgressACType\n\n\nexport function usersReducer(state = initialState, action: ActionType) {\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: updateObInArray(state.users, action.id, \"id\", {followed: true})\n            }\n\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: updateObInArray(state.users, action.id, \"id\", {followed: false})\n            }\n\n        case SET_USERS:\n            return {\n                ...state,\n                users: action.users\n            }\n\n        case SET_CURRENT_PAGE:\n            return {\n                ...state,\n                currentPage: action.currentPage\n            }\n\n        case SET_TOTAL_USERS_COUNT:\n            return {\n                ...state,\n                totalUsersCount: action.totalCount\n            }\n\n        case TOGGLE_IS_FETCHING:\n            return {\n                ...state,\n                isFetching: action.isFetching\n            }\n\n        case TOGGLE_FOLLOWING_PROGRESS:\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : [...state.followingInProgress.filter(id => id !== action.userId)]\n            }\n        default:\n            return state\n    }\n}\n\nexport const followSuccess = (id: number) => ({\n    type: FOLLOW,\n    id\n} as const)\n\nexport const unfollowSuccess = (id: number) => ({\n    type: UNFOLLOW,\n    id\n} as const)\n\nexport const setUsers = (users: Array<UserType>) => ({\n    type: SET_USERS,\n    users\n} as const)\n\nexport const setCurrentPage = (currentPage: number | string) => ({\n    type: SET_CURRENT_PAGE,\n    currentPage\n} as const)\n\nexport const setTotalUsersCount = (totalCount: number) => ({\n    type: SET_TOTAL_USERS_COUNT,\n    totalCount\n} as const)\n\nexport const setToggleIsFetching = (isFetching: boolean) => ({\n    type: TOGGLE_IS_FETCHING,\n    isFetching\n} as const)\n\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => ({\n    type: TOGGLE_FOLLOWING_PROGRESS,\n    isFetching,\n    userId\n} as const)\n\nexport const requestUsers = (page: number | string, pageSize: number) => async (dispatch: Dispatch) => {\n    dispatch(setToggleIsFetching(true))\n    dispatch(setCurrentPage(page))\n    let data = await usersAPI.getUsers(page, pageSize)\n    dispatch(setUsers(data.items))\n    dispatch(setTotalUsersCount(data.totalCount))\n    dispatch(setToggleIsFetching(false))\n}\n\nconst followUnfollowFlow = async (id: number, dispatch: Dispatch, apiMethod: any, actionCreator: any) => {\n\n    dispatch(toggleFollowingProgress(true, id))\n    let response = await apiMethod(id)\n    if (response.data.resultCode === 0) {\n        dispatch(actionCreator(id))\n    }\n    dispatch(toggleFollowingProgress(false, id))\n}\n\nexport const follow = (id: number) => async (dispatch: Dispatch) => {\n    followUnfollowFlow(id, dispatch, usersAPI.follow.bind(usersAPI), followSuccess)\n}\n\nexport const unfollow = (id: number) => async (dispatch: Dispatch) => {\n    followUnfollowFlow(id, dispatch, usersAPI.unfollow.bind(usersAPI), unfollowSuccess)\n}\n","import {AppStateType} from \"./redux-store\";\nimport {createSelector} from \"reselect\";\n\nexport const getUsers = (state: AppStateType) => {\n    return state.usersPage.users\n}\n\nexport const getUsersSelector = createSelector(getUsers, (users) => {\n    return users\n})\n\nexport const getPageSize = (state: AppStateType) => {\n    return state.usersPage.pageSize\n}\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n    return state.usersPage.totalUsersCount\n}\n\nexport const getCurrentPage = (state: AppStateType) => {\n    return state.usersPage.currentPage\n}\n\nexport const getIsFetching = (state: AppStateType) => {\n    return state.usersPage.isFetching\n}\n\nexport const getFollowingInProgress = (state: AppStateType) => {\n    return state.usersPage.followingInProgress\n}","import React, {useState} from 'react'\nimport s from \"../Paginator/Paginator.module.sass\"\n/*\nimport classNames from \"classnames\";\n*/\nlet classNames = require('classnames')\n\ntype UsersType = {\n    pageSize: number\n    totalItemsCount: number\n    currentPage: number | string\n    onPageChanged: (pageNumber: number) => void\n    portionSize?: number\n}\n\nexport const Paginator = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}: UsersType) => {\n\n    //totalItemsCount -\n\n    //pagesCount - все странички\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\n    let pages = []\n    for (let i = 1; i < pagesCount; i++) {\n        pages.push(i)\n    }\n\n    //portionSize - размер порции\n    //portionCount - количество порций\n    let portionCount = Math.ceil(pagesCount / portionSize);\n    let [portionNumber, setPortionNumber] = useState(1);\n\n    //левая граница порции\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n    //правая граница порции\n    let rightPortionPageNumber = portionNumber * portionSize;\n\n    return (\n\n        <div className={s.users_paginator}>\n\n            {\n                portionNumber > 1 &&\n                <button onClick={() => {\n                    setPortionNumber(portionNumber - 1)\n                }}>PREV</button>\n            }\n\n            {pages\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\n                .map((p) => {\n                    return (\n                        <div className={s.number}>\n                            <span className={classNames({\n                                [s.selectPage]: currentPage === p\n                            }, s.pageNumber)}\n                                  key={p}\n                                  onClick={() => {\n                                      onPageChanged(p);\n                                  }}>{p}</span>\n                        </div>\n                    )\n                })}\n\n            {\n                portionCount > portionNumber &&\n                <button onClick={() => {\n                    setPortionNumber(portionNumber + 1)\n                }}>NEXT</button>}\n\n        </div>\n    )\n}\n\n","import React from 'react'\nimport s from \"../Users.module.sass\"\nimport avatar from '../../../assets/image/ufo-2.png'\nimport {NavLink} from \"react-router-dom\";\nimport {UserType} from \"../../../redux/redux-store\";\n\ntype UsersType = {\n    user: UserType\n    follow: (id: number) => void\n    unfollow: (id: number) => void\n    followingInProgress: Array<number>\n}\n\nexport const User = ({user, followingInProgress, unfollow, follow}: UsersType) => {\n    return (\n        <div className={s.users}>\n\n            <div key={user.id} className={s.user}>\n\n                <div className={s.user_avatar}>\n                    <NavLink to={\"/profile/\" + user.id}>\n                        <img className={s.avatar}\n                             src={user.photos.large !== null ? user.photos.large : `${avatar}`}\n                             alt={user.name}\n                        />\n                    </NavLink>\n                </div>\n\n                <div className={s.button_followed}>\n                    {user.followed ?\n                        <button className={s.follow_unfollow_button}\n                                disabled={followingInProgress.some(id => id === user.id)}\n                                onClick={() => {\n                                    unfollow(user.id)\n                                }}>\n                            Unfollow\n                        </button>\n                        : <button className={s.follow_unfollow_button}\n                                  disabled={followingInProgress.some(id => id === user.id)}\n                                  onClick={() => {\n                                      follow(user.id)\n                                  }}>\n                            Follow\n                        </button>\n                    }\n                </div>\n\n                <div className={s.user_info}>\n                    <div className={s.user_info_name}>\n                        <div className={s.user_name}>{user.name}</div>\n                        <div className={s.user_status}>{user.status}</div>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\n","import React from 'react'\nimport s from \"./Users.module.sass\"\nimport {UserType} from \"../../redux/redux-store\";\nimport {Paginator} from \"../common/Paginator/Paginator\";\nimport {User} from \"./User/User\";\n\ntype UsersType = {\n    users: Array<UserType>\n    follow: (id: number) => void\n    unfollow: (id: number) => void\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number | string\n    onPageChanged: (pageNumber: number) => void\n    followingInProgress: Array<number>\n}\n\nexport const Users = ({users, totalUsersCount, pageSize, currentPage, onPageChanged, followingInProgress, unfollow, follow}: UsersType) => {\n\n    return (\n        <div className={s.users}>\n\n            <Paginator currentPage={currentPage}\n                       onPageChanged={onPageChanged}\n                       totalItemsCount={totalUsersCount}\n                       pageSize={pageSize}/>\n\n            <div className={s.users_list}>\n                {\n                    users.map(u => <User user={u} key={u.id}\n                                         followingInProgress={followingInProgress}\n                                         unfollow={unfollow}\n                                         follow={follow}/>)\n                }\n\n            </div>\n\n        </div>\n    )\n}\n","import {connect} from \"react-redux\";\nimport {AppStateType, UserType} from \"../../redux/redux-store\";\nimport {\n    follow,\n    setCurrentPage,\n    unfollow,\n    requestUsers\n} from \"../../redux/users-reducer\";\nimport React from \"react\";\nimport {Preloader} from \"../common/Preloader/Preloader\";\nimport {setUserProfile} from \"../../redux/profile-reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {\n    getCurrentPage, getFollowingInProgress,\n    getIsFetching,\n    getPageSize,\n    getTotalUsersCount,\n    getUsersSelector\n} from \"../../redux/users-selectors\";\nimport {Users} from \"./Users\";\n\n\ntype PathParamsType = {\n    userId: string\n}\n\ntype mapStateToPropsType = {\n    users: Array<UserType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number | string\n    isFetching: boolean\n    followingInProgress: Array<number>\n}\n\ntype mapDispatchToPropsType = {\n    follow: (id: number) => void\n    unfollow: (id: number) => void\n    setCurrentPage: (pageNumber: number) => void\n    setUserProfile: (userId: number) => void\n    getUsers: (currentPage: number | string, pageSize: number) => void\n}\n\ntype UsersContainerType = mapStateToPropsType & mapDispatchToPropsType\ntype ContainerType = RouteComponentProps<PathParamsType> & UsersContainerType\n\n\nclass UsersContainer extends React.Component<ContainerType> {\n    componentDidMount() {\n        //запрашиваем юзеров\n        let{currentPage, pageSize} = this.props\n        this.props.getUsers(currentPage, pageSize)\n    }\n\n    onPageChanged = (pageNumber: number) => {\n        //запрашиваем юзеров\n        let{pageSize} = this.props\n        this.props.getUsers(pageNumber, pageSize)\n    }\n\n    render = () =>\n        <>\n            {this.props.isFetching ? <Preloader/> : null}\n\n            <Users users={this.props.users}\n                   follow={this.props.follow}\n                   unfollow={this.props.unfollow}\n                   pageSize={this.props.pageSize}\n                   totalUsersCount={this.props.totalUsersCount}\n                   currentPage={this.props.currentPage}\n                   onPageChanged={this.onPageChanged}\n                   followingInProgress={this.props.followingInProgress}\n            />\n        </>\n}\n\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        users: getUsersSelector(state),\n        pageSize: getPageSize(state),\n        totalUsersCount: getTotalUsersCount(state),\n        currentPage: getCurrentPage(state),\n        isFetching: getIsFetching(state),\n        followingInProgress: getFollowingInProgress(state)\n    }\n}\n\n\nlet WithUrlDataContainerComponent = withRouter(UsersContainer)\n\nexport default connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps,\n    {\n        follow,\n        unfollow,\n        setCurrentPage,\n        setUserProfile,\n        getUsers: requestUsers\n    }\n)(WithUrlDataContainerComponent)\n\n\n","import React from \"react\";\nimport s from \"./Header.module.sass\";\nimport {NavLink} from \"react-router-dom\";\nimport {authType} from \"../../redux/redux-store\";\nimport avatar from \"./../../assets/image/ufo-2.png\"\n\ntype HeaderType = authType\n\nconst Header = ({photo, logoutTC, isAuth, login}: any) => {\n    return (\n        <>\n            <div className={s.site_name}>Spacebook</div>\n\n            <div className={s.login}>\n                {photo.small === \"\"\n                    ? <img src={avatar} width=\"40px\" height=\"40px\" alt=\"avatar\"/>\n                    : <img src={photo.small} width=\"40px\" height=\"40px\" alt=\"avatar\"/>}\n\n                {isAuth\n                    ? <div>{login} - <button onClick={logoutTC}>Log out</button></div>\n                    : <NavLink to={'/login'}>Login</NavLink>}\n            </div>\n        </>\n    )\n}\n\nexport default Header;","import {authType} from \"./redux-store\";\nimport {authAPI} from \"../api/api\";\nimport {Dispatch} from \"redux\";\nimport {stopSubmit} from \"redux-form\";\n\nexport const SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA'\nexport const SET_USER_PHOTO = 'samurai-network/auth/SET_USER_PHOTO'\n\n\nexport const initialState: authType = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    photo: {\n        small: \"\",\n        large: \"\"\n    }\n}\n\nexport type setUserDataType = ReturnType<typeof setUserData>\nexport type setUserPhotoType = ReturnType<typeof setUserPhoto>\n\nexport function authReducer(state = initialState, action: setUserDataType | setUserPhotoType) {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.payload\n            }\n\n        case SET_USER_PHOTO:\n            return {\n                ...state,\n                ...action.data\n            }\n\n        default:\n            return state\n    }\n}\n\nconst setUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n    type: SET_USER_DATA,\n    payload: {id, email, login, isAuth}\n} as const)\n\nconst setUserPhoto = (small: string, large: string) => ({\n    type: SET_USER_PHOTO,\n    data: {small, large}\n} as const)\n\n//асинхронная функция автоматом возвращает промис\n//если мы что-то возвращаем из thunk, то в том месте, где мы задиспатчили thunk\n//а точнее результат работы thunk creator,  если thunk что-то ретурнит, то этот\n//ретурн становится ретурном самого диспатча, то есть мы получим промис\n\nexport const getUserAuthData = () => async (dispatch: Dispatch) => {\n    let res = await authAPI.me()\n    if (res.data.resultCode === 0) {\n        let id = res.data.data.id\n        let email = res.data.data.email\n        let login = res.data.data.login\n        dispatch(setUserData(id, email, login, true))\n    }\n}\n\nexport const getUserPhoto = (userId: string) => (dispatch: Dispatch) => {\n    /*usersAPI.getProfile(userId).then(response => {\n        if (response.data.resultCode === 0) {\n            let small = response.data.photos.small\n            let large = response.data.photos.large\n            dispatch(setUserPhoto(small, large))\n        }\n    })*/\n}\n\nexport const loginTC = (email: string, password: string, rememberMe: boolean, captcha?: boolean) => async (dispatch: Dispatch) => {\n    let response = await authAPI.login(email, password, rememberMe, captcha)\n    if (response.data.resultCode === 0) {\n        dispatch(getUserAuthData() as any)\n    } else {\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\"\n        dispatch(stopSubmit(\"login\", {_error: message}))\n    }\n}\n\nexport const logoutTC = () => async (dispatch: Dispatch) => {\n    let response = await authAPI.logout()\n    if (response.data.resultCode === 0) {\n        dispatch(setUserData(null, null, null, false))\n    }\n}","import React from 'react'\nimport Header from \"./Header\";\nimport {connect} from \"react-redux\";\nimport {AppStateType, photoType} from \"../../redux/redux-store\";\nimport {getUserPhoto, logoutTC} from \"../../redux/auth-reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\n\ntype ParamsType = {\n    userId: string\n}\n\ntype mapStateToPropsType = {\n    id: number | null,\n    email: string | null,\n    login: string | null,\n    isAuth: boolean,\n    photo: photoType\n}\n\ntype mapDispatchToPropsType = {\n    /*getUserAuthData: () => void*/\n    getUserPhoto: (userId: string) => void\n    logoutTC: () => void\n}\n\ntype OwnHeaderContainerType = mapStateToPropsType & mapDispatchToPropsType\ntype HeaderContainerType = RouteComponentProps<ParamsType> & OwnHeaderContainerType\n\n\nclass HeaderContainer extends React.Component<HeaderContainerType> {\n    componentDidMount() {\n        /*//запрашиваем авторизационные данные\n        this.props.getUserAuthData()\n*/\n        //запрашиваем фото авторизованного пользователя\n        let userId = this.props.match.params.userId\n        this.props.getUserPhoto(userId)\n    }\n\n    render = () => <Header {...this.props}/>\n}\n\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        id: state.auth.id,\n        email: state.auth.email,\n        login: state.auth.login,\n        isAuth: state.auth.isAuth,\n        photo: state.auth.photo\n    }\n}\n\n\nlet WithUrlUsersDataContainerComponent = withRouter(HeaderContainer)\n\nexport default connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps,\n    {\n        /*getUserAuthData,*/\n        getUserPhoto,\n        logoutTC\n    })(WithUrlUsersDataContainerComponent)\n\n","import React from \"react\"\nimport s from './Login.module.sass'\nimport {reduxForm, InjectedFormProps} from \"redux-form\";\nimport {Field} from \"redux-form\";\nimport {Input} from \"../common/FormsControls/FormsControls\";\nimport {requiredField} from \"../../utils/validators/validators\";\nimport {connect} from \"react-redux\";\nimport {loginTC} from \"../../redux/auth-reducer\";\nimport {Redirect} from \"react-router-dom\";\nimport {AppStateType} from \"../../redux/redux-store\";\n\n\nconst Login = (props: any) => {\n    const onSubmit = (formData: FormDataType) => {\n        let email = formData.email\n        let password = formData.password\n        let rememberMe = formData.rememberMe\n        let captcha = formData.captcha\n        props.loginTC(email, password, rememberMe, captcha)\n    }\n\n    if (props.isAuth) {\n        <Redirect to={\"/profile\"}/>\n    }\n\n    return (\n        <div>\n            <h1 className={s.h1}>Login</h1>\n            <LoginReduxForm onSubmit={onSubmit}/>\n        </div>\n    )\n}\n\n\ntype mapDispatchToPropsType = {\n    loginTC: (email: string, password: string, rememberMe: boolean, captcha?: boolean) => void\n}\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport default connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {loginTC})(Login)\n\n\nexport type FormDataType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: boolean\n}\n\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}: any) => {\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div><Field component={Input}\n                        placeholder={\"Login\"}\n                        name={\"email\"}\n                        validate={[requiredField]}/>\n            </div>\n            <div><Field component={Input}\n                        placeholder={\"Password\"}\n                        name={\"password\"}\n                        validate={[requiredField]}\n                        type={\"password\"}/>\n            </div>\n            <div><Field component={Input}\n                        type={\"checkbox\"}\n                        name={\"rememberMe\"}/>\n                remember me\n            </div>\n            {error && <div className={s.formSummaryError}>{error}</div>}\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n}\n\n\nexport const LoginReduxForm = reduxForm<FormDataType>({\n    form: 'login'\n})(LoginForm)","let initialState = {\n    dialogs: [\n        {\n            id: 1,\n            name: \"Человек-1\",\n            lastMessage: \"Привет!\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 2,\n            name: \"Человек-2\",\n            lastMessage: \"Хочу предложить тебе новый способ заработать, сидя на диване\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 3,\n            name: \"Человек-3\",\n            lastMessage: \"Скинь фотки\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 4,\n            name: \"Человек-4\",\n            lastMessage: \"Сотку когда вернешь?\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 5,\n            name: \"Человек-5\",\n            lastMessage: \"Жрать охота\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        }\n    ]\n}\n\nexport function dialogsReducer(state = initialState, action: any) {\n    return state\n}\n","let initialState = {\n    friends: [\n        {\n            id: 1,\n            name: \"Друг-1\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 2,\n            name: \"Друг-2\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 3,\n            name: \"Друг-3\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        }\n    ]\n}\n\nexport const sidebarReducer = (state = initialState, action: any) => {\n    return state\n}","import {Dispatch} from \"redux\";\nimport {getUserAuthData} from \"./auth-reducer\";\n\nexport const INITIALIZED_SUCCESS = 'samurai-network/app/INITIALIZED_SUCCESS'\n\n\nexport const initialState = {\n    initialized: false\n}\n\nexport type initializedSuccessType = ReturnType<typeof initializedSuccess>\n\nexport function appReducer(state = initialState, action: initializedSuccessType) {\n    switch (action.type) {\n        case INITIALIZED_SUCCESS:\n            return {\n                ...state,\n                initialized: true\n            }\n\n        default:\n            return state\n    }\n}\n\nconst initializedSuccess = () => ({\n    type: INITIALIZED_SUCCESS\n} as const)\n\n\nexport const initializeApp = () => async (dispatch: Dispatch) => {\n    let promise = await dispatch(getUserAuthData() as any)\n    Promise.all([promise]).then(() =>\n        dispatch(initializedSuccess() as any)\n    )\n}\n\n","import {applyMiddleware, combineReducers, compose, createStore, Store} from \"redux\";\nimport {profileReducer} from \"./profile-reducer\";\nimport {dialogsReducer} from \"./dialogs-reducer\";\nimport {messageReducer} from \"./message-reducer\";\nimport {sidebarReducer} from \"./sidebar-reducer\";\nimport {usersReducer} from \"./users-reducer\";\nimport {authReducer} from \"./auth-reducer\";\nimport thunkMiddleware from \"redux-thunk\";\nimport {reducer as formReducer} from 'redux-form';\nimport {appReducer} from \"./app-reducer\";\n\nlet reducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    messagesPage: messageReducer,\n    sidebar: sidebarReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer\n})\n\n//типизируем reducers\nexport type RootReducerType = typeof reducer\n//типизируем state\nexport type AppStateType = ReturnType<RootReducerType>\n\nexport type StoreType = Store<AppStateType>\n/*export type StoreType = Store<AppStateType, actionType>*/\n\n//@ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nexport let store: StoreType = createStore(reducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\n//создаем store\n/*\nexport let store: StoreType = createStore(reducer, applyMiddleware(thunkMiddleware));\n*/\n\n\n/*------------------------------------------------------*/\n\nexport type PostType = {\n    id: number\n    message: string\n    like: number\n}\n\nexport type DialogsItemType = {\n    id: number\n    name: string\n    lastMessage: string\n    avatar: string\n}\n\nexport type MessageType = {\n    id: number\n    name: string\n    textMessage: string\n}\nexport type FriendType = {\n    id: number,\n    name: string,\n    avatar: string\n}\n\nexport type UsersLocationType = {\n    city: string\n    country: string\n}\n\nexport type UserType = {\n    id: number\n    name: string\n    status: string\n    photos: {\n        small: string\n        large: string\n    },\n    followed: boolean\n}\n\n\n/*-------------------------------------------------------*/\n/*Типизируем каждую ветку*/\nexport type ProfilePageType = {\n    posts: Array<PostType>\n    profile: any,\n    status: any\n}\n\nexport type DialogsPageType = {\n    dialogs: Array<DialogsItemType>\n}\n\nexport type MessagesPageType = {\n    messages: Array<MessageType>\n}\n\nexport type SidebarFriendsType = {\n    friends: Array<FriendType>\n}\n\nexport type UsersType = {\n    users: Array<UserType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number | string\n    isFetching: boolean\n    followingInProgress: Array<number>\n}\n\nexport type photoType = {\n    small: string,\n    large: string\n}\n\nexport type authType = {\n    id: number | null,\n    email: string | null,\n    login: string | null,\n    isAuth: boolean\n    photo: photoType\n}\n\n\n\n","import {Preloader} from \"../components/common/Preloader/Preloader\";\nimport React, {Suspense} from \"react\";\n\nexport const withSuspense = (Component: any) => {\n    return (props: any) => {\n        return <Suspense fallback={<Preloader/>}>\n            <Component {...props}/>\n        </Suspense>\n    }\n\n\n}","import React, {Suspense} from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport {BrowserRouter, Redirect, Route} from \"react-router-dom\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport {MessagesContainer} from \"./components/Dialogs/Messages/MessagesContainer\";\n/*import {DialogsContainer} from \"./components/Dialogs/DialogsContainer\";*/\nimport {FriendsContainer} from \"./components/Navbar/Friends/FriendsContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Login from \"./components/Login/Login\";\nimport {connect, Provider} from \"react-redux\";\nimport {AppStateType, store} from \"./redux/redux-store\";\nimport {compose} from \"redux\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport {Preloader} from \"./components/common/Preloader/Preloader\";\nimport {withSuspense} from \"./hoc/withSuspense\";\n/*import {ProfileContainer} from \"./components/Profile/ProfileContainer\";*/\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\n\n\ntype AppContainerType = mapStateToPropsType & mapDispatchToPropsType\ntype mapDispatchToPropsType = {\n    initializeApp: () => void\n}\n\ntype mapStateToPropsType = {\n    initialized: boolean\n}\n\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        initialized: state.app.initialized\n    }\n}\n\nexport class App extends React.Component<AppContainerType> {\n    componentDidMount() {\n        //запрашиваем авторизационные данные\n        this.props.initializeApp()\n    }\n\n    render() {\n\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n\n        return (\n\n            <div className='app-wrapper'>\n                <header className=\"header\">\n                    <HeaderContainer/>\n                </header>\n                <div className=\"app-wrapper-content\">\n                    <main className=\"content\">\n                        <div className=\"\">\n                            <Navbar/>\n                        </div>\n                        <Suspense fallback={<Preloader/>}>\n                            <div className=\"main_content\">\n                                <div className=\"main\">\n                                    <Route exact path=\"/\" render={() => <Redirect to={'/profile'}/>}/>\n                                    <Route path=\"/profile/:userId?\" render={withSuspense(ProfileContainer)}/>\n                                    <Route path=\"/dialogs\" render={withSuspense(DialogsContainer)}/>\n                                    <Route path=\"/messages\" render={() => <MessagesContainer/>}/>\n                                    <Route path=\"/news\" render={() => <News/>}/>\n                                    <Route path=\"/music\" render={() => <Music/>}/>\n                                    <Route path=\"/users\" render={() => <UsersContainer/>}/>\n                                    <Route path=\"/login\" component={() => <Login/>}/>\n                                    <Route path=\"*\" render={() => <div>404 NOT FOUND</div>}/>\n                                </div>\n                            </div>\n                        </Suspense>\n\n                        <div className=\"main_content_friends\">\n                            Friends\n                        </div>\n                    </main>\n                </div>\n                <FriendsContainer/>\n            </div>\n\n        );\n    }\n}\n\nlet AppContainer = compose(\n    connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {initializeApp})(App)\n);\n\nexport const MainApp = () => {\n    return <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <AppContainer/>\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport  {MainApp} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <MainApp/>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog_window\":\"Messages_dialog_window__NGXtj\",\"dialog_header\":\"Messages_dialog_header__2NTHl\",\"dialog_footer\":\"Messages_dialog_footer__3sNge\",\"button\":\"Messages_button__B4QTR\",\"dialog_footer_textarea\":\"Messages_dialog_footer_textarea__2wUAq\",\"dialog_body\":\"Messages_dialog_body__eTCSO\",\"message_one\":\"Messages_message_one__158ii\",\"message_two\":\"Messages_message_two__1bHxW\"};","export default __webpack_public_path__ + \"static/media/preloader.02e8bfc4.svg\";","import React from 'react'\nimport preloader from \"./../../../assets/image/preloader.svg\"\n\nexport const Preloader = () => {\n    return (\n        <>\n            <img src={preloader} alt=\"preloader\"/>\n        </>\n    )\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2G49n\",\"nav_list\":\"Navbar_nav_list__195P5\",\"nav_item\":\"Navbar_nav_item__l_UkN\",\"nav_item_link\":\"Navbar_nav_item_link__2kja5\"};","import React from 'react'\nimport s from './FormsControls.module.css'\n\n\nexport const FormControl = ({input, meta: {error, touched}, child, el, children, ...props}: any) => {\n    const hasError = error && touched\n    return (\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\n            <div>\n                {children}\n                {/*{React.createElement(el, {...input, ...props})}*/}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea = (props: any) => {\n    const {input, meta, child, ...restProps} = props\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\n}\n\nexport const Input = (props: any) => {\n    const {input, meta, child, ...restProps} = props\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\n\n}\n","export const requiredField = (value: string) => {\n    if(value) return undefined\n    return \"Field is required\"\n}\n\n\nexport const maxLengthCreator = (maxLength: number)=> (value: string) => {\n    if(value.length > maxLength) return `Max length is ${maxLength} symbols`\n    return undefined\n}\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users_paginator\":\"Paginator_users_paginator__2NMhY\",\"selectPage\":\"Paginator_selectPage__BqcPI\",\"page\":\"Paginator_page__3OIl6\"};","import {profileAPI, usersAPI} from \"../api/api\";\nimport {Dispatch} from \"redux\";\n\nconst ADD_POST = \"samurai-network/profile/ADD_POST\"\nconst SET_PROFILE_INFO = \"samurai-network/profile/SET_PROFILE_INFO\"\nconst SET_STATUS = \"samurai-network/profile/SET_STATUS\"\nconst UPDATE_STATUS = \"samurai-network/profile/UPDATE_STATUS\"\n\n\nexport type addPostAC = ReturnType<typeof addPostAC>\nexport type setUserProfileType = ReturnType<typeof setUserProfile>\nexport type setUserStatus = ReturnType<typeof setUserStatus>\nexport type updateUserStatus = ReturnType<typeof updateUserStatus>\n\n\nlet initialState = {\n    posts: [\n        {id: 1, message: \"Это передача сдохни или умри!\", like: 25},\n        {id: 2, message: \"Или сдохни\", like: 40},\n        {id: 3, message: \"Или умри\", like: 1}\n    ],\n    profile: null,\n    status: \"\"\n}\n\nexport function profileReducer(state = initialState, action: addPostAC | setUserProfileType | setUserStatus | updateUserStatus) {\n    switch (action.type) {\n        case ADD_POST:\n            return {\n                ...state,\n                posts: [{id: 5, message: action.newPostText, like: 25}, ...state.posts],\n            }\n\n        case SET_PROFILE_INFO:\n            return {\n                ...state,\n                profile: action.profile\n            }\n\n        case SET_STATUS:\n            return {\n                ...state,\n                status: action.status\n            }\n\n        case UPDATE_STATUS:\n            return {\n                ...state,\n                status: action.status\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const addPostAC = (newPostText: string) => ({type: ADD_POST, newPostText} as const)\nexport const setUserProfile = (profile: any) => ({\n    type: SET_PROFILE_INFO,\n    profile\n} as const)\n\nexport const setUserStatus = (status: string) => ({\n    type: SET_STATUS,\n    status\n} as const)\n\nexport const updateUserStatus = (status: string) => ({\n    type: UPDATE_STATUS,\n    status\n} as const)\n\nexport const getUserProfile = (userId: string) => async (dispatch: Dispatch) => {\n    let data = await usersAPI.getProfile(userId)\n    dispatch(setUserProfile(data))\n}\n\nexport const getStatus = (userId: string) => async (dispatch: Dispatch) => {\n    let res = await profileAPI.getStatus(userId)\n    dispatch(setUserStatus(res.data))\n}\n\nexport const updateStatus = (status: string) => async (dispatch: Dispatch) => {\n    let res = await profileAPI.updateStatus(status)\n    if (res.data.resultCode === 0) {\n        dispatch(updateUserStatus(status))\n    }\n}\n\n","export default __webpack_public_path__ + \"static/media/ufo-2.3c1ecb26.png\";"],"sourceRoot":""}