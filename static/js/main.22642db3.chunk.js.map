{"version":3,"sources":["components/Header/Header.tsx","assets/image/astronaut.png","assets/image/dialogs.png","assets/image/photo.png","assets/image/news.png","assets/image/setting.png","assets/image/users.png","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","redux/message-reducer.ts","components/Dialogs/Messages/Messages.tsx","components/Dialogs/Messages/MessagesContainer.tsx","components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/Navbar/Friends/FriendsContainer.tsx","components/Navbar/Friends/Friends.tsx","assets/image/ufo-2.png","components/Users/Users.tsx","redux/users-reducer.ts","assets/image/preloader.svg","components/common/Preloader/Preloader.jsx","redux/profile-reducer.ts","components/Users/UsersContainer.tsx","components/Profile/MyPosts/Post/MyPost.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/ProfileInfo/ProfileInfoContainer.tsx","App.tsx","serviceWorker.ts","redux/dialogs-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","index.tsx","components/Navbar/Navbar.module.sass","components/Users/Users.module.sass","components/Dialogs/Messages/Messages.module.sass","components/Dialogs/Dialogs.module.sass","components/Profile/MyPosts/MyPosts.module.sass","components/Profile/MyPosts/Post/MyPost.module.sass","components/Profile/ProfileInfo/ProfileInfo.module.sass","components/Header/Header.module.sass","components/Navbar/Friends/Friends.module.sass","components/Profile/Profile.module.sass"],"names":["Header","className","s","site_name","Navbar","props","nav","nav_list","nav_item","nav_item_link","to","activeClassName","active","src","profile","alt","dialogs","href","photo","news","setting","users","News","Music","ADD_MESSAGE","UPDATE_NEW_MESSAGE_TEXT","initialState","messages","id","name","textMessage","newMessageText","Messages","newMessages","map","m","dialog_body","message_one","message_two","newElement","React","createRef","dialog_window","dialog_header","Button","variant","color","dialog_footer","TextareaAutosize","ref","rows","value","onChange","onChangeMessage","current","aria-label","placeholder","dialog_footer_textarea","fullWidth","onClick","addMessage","button","MessagesContainer","connect","state","messagesPage","dispatch","type","text","word","DialogsItem","link","item","Avatar","avatar","message","user_name","last_message","lastMessage","Dialogs","newData","d","list","DialogsContainer","dialogsPage","FriendsContainer","friends","sidebar","f","Users","pagesCount","Math","ceil","totalUsersCount","pageSize","pages","i","push","users_paginator","p","e","onPageChanged","currentPage","selectPage","page","users_list","u","user","user_avatar","onClickUser","photos","small","button_followed","followed","follow_unfollow_button","unfollow","follow","user_info","user_info_name","user_status","status","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","isFetching","Preloader","preloader","ADD_POST","UPDATE_NEW_POST_TEXT","SET_PROFILE_INFO","posts","like","newPostText","setUserProfile","UsersContainer","pageNumber","setCurrentPage","setToggleIsFetching","axios","get","then","response","setUsers","data","items","userId","console","log","render","this","setTotalUsersCount","totalCount","Component","usersPage","MyPost","post_block","post","FormControlLabel","control","Checkbox","icon","FavoriteBorder","checkedIcon","Favorite","label","post_text","MyPostsContainer","profilePage","addPost","onPostChange","updateNewPostTextAC","newPosts","newPostElement","my_post","posts_block","posts_textarea","button_block","posts_button","Profile","main_profile","ProfileContainer","ProfileInfo","profile_info","large","width","height","fullName","lookingForAJobDescription","lookingForAJob","contacts","facebook","github","vk","instagram","twitter","website","youtube","mainLink","ProfileInfoContainer","App","path","exact","Boolean","window","location","hostname","match","unregister","navigator","serviceWorker","ready","registration","catch","error","reducers","combineReducers","action","store","createStore","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.22642db3.chunk.js","sourcesContent":["import React from \"react\";\nimport s from \"./Header.module.sass\";\nimport logo from '../../assets/image/logo.png';\n\nconst Header = () => {\n    return (\n        <>\n            <div className={s.site_name}>Spacebook</div>\n        </>\n    )\n}\n\nexport default Header;","export default __webpack_public_path__ + \"static/media/astronaut.cbb62ce6.png\";","export default __webpack_public_path__ + \"static/media/dialogs.1a5e5f2e.png\";","export default __webpack_public_path__ + \"static/media/photo.bf857649.png\";","export default __webpack_public_path__ + \"static/media/news.3350a595.png\";","export default __webpack_public_path__ + \"static/media/setting.9ed628b6.png\";","export default __webpack_public_path__ + \"static/media/users.ed5e25fc.png\";","import React from \"react\";\nimport s from \"./Navbar.module.sass\";\nimport {NavLink} from \"react-router-dom\";\nimport profile from \"./../../assets/image/astronaut.png\";\nimport dialogs from \"./../../assets/image/dialogs.png\";\nimport photo from \"./../../assets/image/photo.png\";\nimport news from \"./../../assets/image/news.png\";\nimport setting from \"./../../assets/image/setting.png\";\nimport users from \"./../../assets/image/users.png\";\n\ntype NavbarType = {\n    /*state: SidebarFriendsType*/\n}\n\nconst Navbar: React.FC<NavbarType> = (props) => {\n    return (\n        <nav className={s.nav}>\n            <ul className={s.nav_list}>\n                {/*NavLink - не перезагружая страницу, меняем адресную строку*/}\n                <li className={s.nav_item}>\n                    <NavLink className={s.nav_item_link}\n                             to=\"/profile\"\n                             activeClassName={s.active}>\n                        <img src={profile} alt=\"profile\"/>\n                        <span>Profile</span>\n                    </NavLink>\n                </li>\n                <li className={s.nav_item}>\n                    <NavLink className={s.nav_item_link}\n                             to=\"/dialogs\">\n                        <img src={dialogs} alt=\"\"/>\n                        <span>Dialogs</span>\n                    </NavLink>\n                </li>\n                <li className={s.nav_item}>\n                    <NavLink className={s.nav_item_link}\n                             to=\"/news\" href=\"#\">\n                        <img src={photo} alt=\"profile\"/>\n                        <span>Photo</span>\n                    </NavLink>\n                </li>\n                <li className={s.nav_item}>\n                    <NavLink className={s.nav_item_link} to=\"/music\">\n                        <img src={news} alt=\"profile\"/>\n                        <span>News</span>\n                    </NavLink>\n                </li>\n                <li className={s.nav_item}>\n                    <NavLink className={s.nav_item_link}\n                             to=\"/settings\">\n                        <img src={setting} alt=\"profile\"/>\n                        <span>Settings</span>\n                    </NavLink>\n                </li>\n                <li className={s.nav_item}>\n                    <NavLink className={s.nav_item_link}\n                             to=\"/users\">\n                        <img src={users} alt=\"profile\"/>\n                        <span>Users</span>\n                    </NavLink>\n                </li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default Navbar;","import React from \"react\";\nimport s from \"./News.module.sass\";\n\nconst News = () => {\n    return (\n        <div>\n            Dialogs\n        </div>\n    )\n}\n\nexport default News;","import React from \"react\";\nimport s from \"./Music.module.sass\";\n\nconst Music = () => {\n    return (\n        <div>\n            Music\n        </div>\n    )\n}\n\nexport default Music;","export const ADD_MESSAGE = \"ADD_MESSAGE\"\nexport const UPDATE_NEW_MESSAGE_TEXT = \"UPDATE_NEW_MESSAGE_TEXT\"\n\nexport type addMessageACType = ReturnType<typeof addMessageAC>\nexport type updateNewMessageTextACType = ReturnType<typeof updateNewMessageTextAC>\n\nlet initialState = {\n    messages: [\n        {id: 1, name: \"Он\", textMessage: \"Hello\"},\n        {id: 2, name: \"Ты\", textMessage: \"Hello\"},\n        {id: 1, name: \"Он\", textMessage: \"Ты такая хорошая! Ты даже лучше, чем сахар!\"},\n        {id: 2, name: \"Ты\", textMessage: \"Спасибо! Приходи сегодня\"},\n    ],\n\n    newMessageText: \"\"\n}\n\nexport function messageReducer(state = initialState, action: addMessageACType | updateNewMessageTextACType) {\n    switch (action.type) {\n        case ADD_MESSAGE:\n            return {\n                ...state,\n                messages: [...state.messages, {id: 2, name: \"Ты\", textMessage: state.newMessageText}],\n                newMessageText: \"\"\n            };\n\n        case UPDATE_NEW_MESSAGE_TEXT:\n            return {\n                ...state,\n                newMessageText: action.word\n            };\n\n        default:\n            return state\n    }\n}\n\nexport const addMessageAC = () => ({type: ADD_MESSAGE} as const)\nexport const updateNewMessageTextAC = (word: string) => ({type: UPDATE_NEW_MESSAGE_TEXT, word: word} as const)","import React from \"react\";\nimport s from \"./Messages.module.sass\";\nimport {NavLink} from \"react-router-dom\";\nimport Button from '@material-ui/core/Button';\nimport {MessageType} from \"../../../redux/redux-store\";\nimport {TextareaAutosize} from \"@material-ui/core\";\n\ntype MessagesType = {\n    messages: Array<MessageType>\n    addMessage: () => void\n    onChangeMessage: (text: string) => void\n    newMessageText: string\n}\n\nconst Messages: React.FC<MessagesType> = (props) => {\n    let newMessages = props.messages.map(m => <div key={m.id} className={s.dialog_body}>\n        {/*Не охота верстать, сделать потом*/}\n\n        <div className={m.id === 1 ? s.message_one : \"\"}>\n            <div>{m.id === 1 ? m.name : null}</div>\n            <div>{m.id === 1 ? m.textMessage : null}</div>\n        </div>\n        <div className={m.id === 2 ? s.message_two : \"\"}>\n            <div>{m.id === 2 ? m.name : null}</div>\n            <div>{m.id === 2 ? m.textMessage : null}</div>\n        </div>\n\n\n    </div>)\n\n    let newElement = React.createRef<HTMLTextAreaElement>();\n\n    /* let [message, setMessage] = useState()\n     let [change, setChange] = useState()\n */\n    const addMessage = () => {\n        /*setMessage(props.addMessage(change))*/\n        //Чтобы вынести в отдельную переменную, нужно типизировать эту переменную\n        //так как action определяется как {type: string\n        props.addMessage();\n    }\n\n    const onChangeMessage = () => {\n        props.onChangeMessage(newElement.current ? newElement.current.value : \"----\")\n    }\n\n    return (\n        <div className={s.dialog_window}>\n            <div className={s.dialog_header}>\n                <NavLink to=\"/dialogs\">\n                    <Button variant=\"contained\" color=\"default\">Exit</Button>\n                </NavLink>\n                <div>Avatar + name</div>\n            </div>\n            {newMessages}\n            <div className={s.dialog_footer}>\n                <TextareaAutosize ref={newElement}\n                                  rows={5}\n                                  value={props.newMessageText}\n                                  onChange={onChangeMessage}\n                                  aria-label=\"empty textarea\"\n                                  placeholder=\"Empty\"\n                                  className={s.dialog_footer_textarea}\n                />\n                {/*\n                <textarea ref={newElement} value={props.newMessageText} onChange={onChangeMessage} rows={5}></textarea>\n*/}\n                {/*value={message} onChange={(e) => {setChange(e.currentTarget.value)}}*/}\n                <Button\n                    fullWidth={true}\n                    onClick={addMessage}\n                    variant=\"contained\"\n                    color=\"default\"\n                    className={s.button}\n                    /*endIcon={<Icon>send</Icon>}*/\n                >Send\n                </Button>\n                {/*<button onClick={addMessage}>Send</button>*/}\n            </div>\n        </div>\n    )\n}\n\nexport default Messages;","import React from \"react\";\nimport {addMessageAC, updateNewMessageTextAC} from \"../../../redux/message-reducer\";\nimport Messages from \"./Messages\";\nimport {connect} from \"react-redux\";\nimport {AppStateType, MessageType} from \"../../../redux/redux-store\";\nimport {Dispatch} from \"redux\";\n\n\ntype mapStateToPropsType = {\n    messages: Array<MessageType>\n    newMessageText: string\n}\n\ntype mapDispatchToPropsType = {\n    addMessage: () => void\n    onChangeMessage: (text: string) => void\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        messages: state.messagesPage.messages,\n        newMessageText: state.messagesPage.newMessageText\n    }\n}\n\n/*https://stackoverflow.com/questions/49808004/parameter-dispatch-implicitly-has-an-any-type*/\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        addMessage: () => {\n            dispatch(addMessageAC());\n        },\n\n        onChangeMessage: (text: string) => {\n            dispatch(updateNewMessageTextAC(text))\n        }\n    }\n}\n\nexport const MessagesContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(Messages)\n","import {NavLink} from \"react-router-dom\";\nimport s from \"../Dialogs.module.sass\";\nimport React from \"react\";\nimport {Avatar} from \"@material-ui/core\";\nimport {DialogsItemType} from \"../../../redux/redux-store\";\n\n\nexport const DialogsItem: React.FC<DialogsItemType> = (props) => {\n    return (\n        <NavLink className={s.link} to={\"/messages/\" + props.id}>\n            <li className={s.item}>\n                <Avatar alt=\"Remy Sharp\" src={props.avatar} />\n                <div className={s.message}>\n                    <div className={s.user_name}>{props.name}</div>\n                    <div className={s.last_message}>{props.lastMessage}</div>\n                </div>\n            </li>\n        </NavLink>\n    )\n}\n\n\n\n","import React from \"react\";\nimport s from \"./Dialogs.module.sass\";\nimport {DialogsItem} from \"./DialogsItem/DialogsItem\";\nimport {DialogsItemType} from \"../../redux/redux-store\";\n\ntype DialogsType = {\n    dialogs: Array<DialogsItemType>\n}\n\nconst Dialogs: React.FC<DialogsType> = (props) => {\n\n    let newData = props.dialogs.map(d => <DialogsItem key={d.id} id = {d.id} name={d.name} lastMessage={d.lastMessage} avatar={d.avatar}/>)\n\n    return (\n        <ul className={s.list}>\n            {newData}\n        </ul>\n    )\n}\n\nexport default Dialogs;\n","import React from \"react\";\nimport {AppStateType, DialogsItemType} from \"../../redux/redux-store\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\n\n\ntype mapStateToPropsType = {\n    dialogs: Array<DialogsItemType>\n}\n\ntype mapDispatchToPropsType = {\n\n}\n\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        dialogs: state.dialogsPage.dialogs\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n\n    }\n}\n\nexport const DialogsContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(Dialogs)\n","import React from \"react\";\nimport {Friends} from \"./Friends\";\nimport {connect} from \"react-redux\";\nimport {AppStateType, FriendType} from \"../../../redux/redux-store\";\n\n\ntype mapStateToPropsType = {\n    friends: Array<FriendType>\n}\n\ntype mapDispatchToPropsType = {\n\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        friends: state.sidebar.friends\n    }\n}\n\n/*https://stackoverflow.com/questions/49808004/parameter-dispatch-implicitly-has-an-any-type*/\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n\n    }\n}\nexport const FriendsContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(Friends)\n","import React from \"react\";\nimport {FriendType} from \"../../../redux/redux-store\";\nimport {Avatar} from \"@material-ui/core\";\nimport s from \"./Friends.module.sass\";\n/*import { AvatarGroup } from '@material-ui/lab';*/\n\ntype FriendsType = {\n    friends: Array<FriendType>\n}\n\n\nexport const Friends: React.FC<FriendsType> = (props) => {\n\n    let friendsList = props.friends.map(f => <div key={f.id}>\n        <Avatar className={s.avatar} src={f.avatar} alt={f.name}/>\n    </div>)\n\n    return (\n        <div></div>\n        /*<AvatarGroup className={s.friends_block} spacing={0} max={3}>\n            {friendsList}\n        </AvatarGroup>*/\n    )\n}","export default __webpack_public_path__ + \"static/media/ufo-2.3c1ecb26.png\";","import React from 'react'\nimport s from \"./Users.module.sass\"\nimport {UserType} from \"../../redux/redux-store\";\nimport avatar from './../../assets/image/ufo-2.png'\nimport {NavLink} from \"react-router-dom\";\n\ntype UsersType = {\n    users: Array<UserType>\n    follow: (id: number) => void\n    unfollow: (id: number) => void\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number | string\n    onPageChanged: (pageNumber: number) => void\n    onClickUser: (userId: number) => void\n\n    //setTotalUsersCount: (totalCount: number) => void\n    //setUsers: (users: Array<UserType>) => void\n    //setCurrentPage: (pageNumber: number) => void\n}\n\nexport const Users = (props: UsersType) => {\n\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\n    let pages = []\n    for (let i = 1; i < pagesCount; i++) {\n        pages.push(i)\n    }\n\n    return (\n        <div className={s.users}>\n\n            <div className={s.users_paginator}>\n                {pages.map(p => <span onClick={(e) => props.onPageChanged(p)}\n                                      className={props.currentPage === p ? s.selectPage : s.page}>{p}</span>)}\n            </div>\n\n            <div className={s.users_list}>\n                {\n                    props.users.map(u =>\n                        <div key={u.id} className={s.user}>\n\n                            <div className={s.user_avatar}>\n                                <NavLink to={\"/profile/\" + u.id} onClick={() => props.onClickUser(u.id)}>\n                                    <img className={s.avatar}\n                                         src={u.photos.small !== null ? u.photos.small : `${avatar}`}\n                                         alt={u.name}\n                                    />\n                                </NavLink>\n\n                            </div>\n\n                            <div className={s.button_followed}>\n                                {u.followed ?\n                                    <button className={s.follow_unfollow_button}\n                                            onClick={() => props.unfollow(u.id)}>\n                                        Unfollow\n                                    </button>\n                                    : <button className={s.follow_unfollow_button}\n                                              onClick={() => props.follow(u.id)}>\n                                        Follow\n                                    </button>\n                                }\n                            </div>\n\n                            <div className={s.user_info}>\n                                <div className={s.user_info_name}>\n                                    <div className={s.user_name}>{u.name}</div>\n                                    <div className={s.user_status}>{u.status}</div>\n                                </div>\n                            </div>\n\n                        </div>\n                    )}\n            </div>\n        </div>\n    )\n}\n\n\nexport default Users\n\n/*export function Users(props: UsersType) {\n\n    const getUsers = () => {\n        if (props.users.length === 0) {\n            axios.get(\"https://social-network.samuraijs.com/api/1.0/users\").then(response => {\n                props.setUsers(response.data.items)\n            })\n\n        }\n    }\n\n    return (\n        <div className={s.users}>\n            <button onClick={getUsers}>get users</button>\n            {\n                props.users.map(u =>\n                    <div key={u.id} className={s.user}>\n                        <div className={s.user_avatar}>\n                            <Avatar variant='rounded'\n                                    className={s.avatar}\n                                    src={u.photos.small !== null ? u.photos.small : `${avatar}`}\n                                    alt={u.name}\n\n                            />\n                            {u.followed ?\n                                <button className={s.follow_unfollow_button}\n                                        onClick={() => props.unfollow(u.id)}>\n                                    Unfollow\n                                </button>\n                                : <button className={s.follow_unfollow_button}\n                                          onClick={() => props.follow(u.id)}>\n                                    Follow\n                                </button>\n                            }\n                        </div>\n                        <div className={s.user_info}>\n                            <div className={s.user_info_name}>\n                                <div className={s.user_name}>{u.name}</div>\n                                <div className={s.user_status}>{u.status}</div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n        </div>\n    )\n}*/\n\n\n/*123321\nlet palindromeChainLength = function (n) {\n   // let newN = String(n).split(\"\")\n    let newN2 = String(n).split(\"\").reverse().join()\n    if(n !== newN2) {\n        let sum = n + Number(newN2)\n        return palindromeChainLength(sum)\n    } else {\n        return n\n    }\n};\n\npalindromeChainLength(44)*/\n","import {UsersType, UserType} from \"./redux-store\";\n\nexport const FOLLOW = \"FOLLOW\"\nexport const UNFOLLOW = \"UNFOLLOW\"\nexport const SET_USERS = \"SET_USERS\"\nexport const SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\"\nexport const SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\"\nexport const TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\"\n\nexport const initialState: UsersType = {\n    users: [],\n    pageSize: 50,\n    totalUsersCount: 0,\n    currentPage: 2,\n    isFetching: false\n}\n\nexport type followACType = ReturnType<typeof follow>\nexport type unfollowACType = ReturnType<typeof unfollow>\nexport type setUsersACType = ReturnType<typeof setUsers>\nexport type setCurrentPageACType = ReturnType<typeof setCurrentPage>\nexport type setTotalUsersCountACType = ReturnType<typeof setTotalUsersCount>\nexport type toggleIsFetchingACType = ReturnType<typeof setToggleIsFetching>\n\nexport type ActionType =\n    followACType\n    | unfollowACType\n    | setUsersACType\n    | setCurrentPageACType\n    | setTotalUsersCountACType\n    | toggleIsFetchingACType\n\n\nexport function usersReducer(state = initialState, action: ActionType) {\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    return action.id === u.id ? {...u, followed: true} : u\n                })\n            }\n\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    return action.id === u.id ? {...u, followed: false} : u\n                })\n            }\n\n        case SET_USERS:\n            return {\n                ...state,\n                users: action.users\n            }\n\n        case SET_CURRENT_PAGE:\n            return {\n                ...state,\n                currentPage: action.currentPage\n            }\n\n        case SET_TOTAL_USERS_COUNT:\n            return {\n                ...state,\n                totalUsersCount: action.totalCount\n            }\n\n        case TOGGLE_IS_FETCHING:\n            return {\n                ...state,\n                isFetching: action.isFetching\n            }\n        default:\n            return state\n    }\n}\n\nexport const follow = (id: number) => ({\n    type: FOLLOW,\n    id\n} as const)\n\nexport const unfollow = (id: number) => ({\n    type: UNFOLLOW,\n    id\n} as const)\n\nexport const setUsers = (users: Array<UserType>) => ({\n    type: SET_USERS,\n    users\n} as const)\n\nexport const setCurrentPage = (currentPage: number) => ({\n    type: SET_CURRENT_PAGE,\n    currentPage\n} as const)\n\nexport const setTotalUsersCount = (totalCount: number) => ({\n    type: SET_TOTAL_USERS_COUNT,\n    totalCount\n} as const)\n\nexport const setToggleIsFetching = (isFetching: boolean) => ({\n    type: TOGGLE_IS_FETCHING,\n    isFetching\n} as const)\n\n","export default __webpack_public_path__ + \"static/media/preloader.02e8bfc4.svg\";","import React from 'react'\nimport preloader from \"./../../../assets/image/preloader.svg\"\n\nexport const Preloader = () => {\n    return (\n        <>\n            <img src={preloader} alt=\"preloader\"/>\n        </>\n    )\n}","\nconst ADD_POST = \"ADD_POST\"\nconst UPDATE_NEW_POST_TEXT = \"UPDATE_NEW_POST_TEXT\"\nconst SET_PROFILE_INFO = \"SET_PROFILE_INFO\"\n\n\nexport type addPostAC = ReturnType<typeof addPostAC>\nexport type updateNewPostTextAC = ReturnType<typeof updateNewPostTextAC>\nexport type setUserProfileType = ReturnType<typeof setUserProfile>\n\n\nlet initialState = {\n    posts: [\n        {id: 1, message: \"Это передача сдохни или умри!\", like: 25},\n        {id: 2, message: \"Или сдохни\", like: 40},\n        {id: 3, message: \"Или умри\", like: 1}\n    ],\n\n    newPostText: \"\",\n    profile: null\n}\n\nexport function profileReducer(state = initialState, action: addPostAC | updateNewPostTextAC| setUserProfileType) {\n    switch (action.type) {\n        case ADD_POST:\n            return {\n                ...state,\n                posts: [{id: 5, message: state.newPostText, like: 25}, ...state.posts],\n                newPostText: \"\"\n            }\n\n        case UPDATE_NEW_POST_TEXT:\n            return {\n                ...state,\n                newPostText: action.text\n            };\n\n        case SET_PROFILE_INFO:\n            console.log(action.profile)\n            return {\n                ...state,\n                profile: action.profile\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const addPostAC = () => ({type: ADD_POST} as const)\nexport const updateNewPostTextAC = (text: string) => ({type: UPDATE_NEW_POST_TEXT, text: text} as const)\nexport const setUserProfile = (profile: any) => ({\n    type: SET_PROFILE_INFO,\n    profile\n} as const)","import {connect} from \"react-redux\";\nimport Users from \"./Users\";\nimport {AppStateType, UserType} from \"../../redux/redux-store\";\nimport {Dispatch} from \"redux\";\nimport {\n    follow,\n    setCurrentPage,\n    setTotalUsersCount,\n    setUsers,\n    setToggleIsFetching,\n    unfollow\n} from \"../../redux/users-reducer\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport {Preloader} from \"../common/Preloader/Preloader\";\nimport {setUserProfile} from \"../../redux/profile-reducer\";\n\n\ntype mapStateToPropsType = {\n    users: Array<UserType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number | string\n    isFetching: boolean\n}\n\ntype mapDispatchToPropsType = {\n    follow: (id: number) => void\n    unfollow: (id: number) => void\n    setUsers: (users: Array<UserType>) => void\n    setCurrentPage: (pageNumber: number) => void\n    setTotalUsersCount: (totalCount: number) => void\n    setToggleIsFetching: (isFetching: boolean) => void\n    setUserProfile: (userId: number) => void\n}\n\ntype UsersContainerType = mapStateToPropsType & mapDispatchToPropsType\n\n\nclass UsersContainer extends React.Component<UsersContainerType> {\n    componentDidMount() {\n        this.props.setToggleIsFetching(true)\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\n            this.props.setUsers(response.data.items)\n\n            this.props.setTotalUsersCount(response.data.totalCount)\n            this.props.setToggleIsFetching(false)\n        })\n    }\n\n    onPageChanged = (pageNumber: number) => {\n        this.props.setCurrentPage(pageNumber)\n        this.props.setToggleIsFetching(true)\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(response => {\n\n            this.props.setUsers(response.data.items)\n            this.props.setToggleIsFetching(false)\n        })\n    }\n\n    onClickUser = (userId: number) => {\n        axios.get(`https://social-network.samuraijs.com/api/1.0/profile/${userId}`).then(response => {\n            console.log(response.data)\n            this.props.setUserProfile(response.data)\n        })\n\n    }\n\n    render = () =>\n        <>\n            {this.props.isFetching ? <Preloader/> : null}\n\n            <Users users={this.props.users}\n                   follow={this.props.follow}\n                   unfollow={this.props.unfollow}\n                   pageSize={this.props.pageSize}\n                   totalUsersCount={this.props.totalUsersCount}\n                   currentPage={this.props.currentPage}\n                   onPageChanged={this.onPageChanged}\n                   onClickUser={this.onClickUser}\n            />\n        </>\n}\n\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        users: state.usersPage.users,\n        pageSize: state.usersPage.pageSize,\n        totalUsersCount: state.usersPage.totalUsersCount,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching\n    }\n}\n\nexport default connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps,\n    {follow, unfollow, setUsers, setCurrentPage, setTotalUsersCount, setToggleIsFetching, setUserProfile}\n    )(UsersContainer)\n\n\n/*const mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\n    return {\n        follow: (id) => {\n            dispatch(followAC(id))\n        },\n\n        unfollow: (id) => {\n            dispatch(unfollowAC(id))\n        },\n\n        setUsers: (users) => {\n            dispatch(setUsersAC(users))\n        },\n\n        setCurrentPage: (pageNumber) => {\n            dispatch(setCurrentPageAC(pageNumber))\n        },\n\n        setTotalUsersCount: (totalCount: number) => {\n            dispatch(setTotalUsersCountAC(totalCount))\n        },\n\n        setToggleIsFetching: (isFetching: boolean) => {\n            dispatch(toggleIsFetchingAC(isFetching))\n        }\n    }\n}*/","import React from \"react\";\nimport s from \"./MyPost.module.sass\";\nimport {PostType} from \"../../../../redux/redux-store\";\nimport {Avatar, Checkbox, FormControlLabel} from \"@material-ui/core\";\nimport {Favorite, FavoriteBorder} from \"@material-ui/icons\";\n\n\nconst MyPost: React.FC<PostType> = (props) => {\n\n    return (\n        <div className={s.post_block}>\n            <div className={s.post}>\n                <Avatar src=\"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\" alt=\"Аватарка\"/>\n                <FormControlLabel control={<Checkbox\n                    icon={<FavoriteBorder/>}\n                    checkedIcon={<Favorite/>}\n                    name=\"checkedH\"/>}\n                                  label={props.like}\n\n                />\n            </div>\n            <div className={s.post_text}>{props.message}</div>\n        </div>\n    )\n}\n\nexport default MyPost;","import React from \"react\";\nimport {addPostAC, updateNewPostTextAC} from \"../../../redux/profile-reducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType, PostType} from \"../../../redux/redux-store\";\nimport {Dispatch} from \"redux\";\n\n\ntype mapStateToPropsType = {\n    posts: Array<PostType>\n    newPostText: string\n}\n\ntype mapDispatchToPropsType = {\n    addPost: () => void\n    onPostChange: (text: string) => void\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        addPost: () => {\n            dispatch(addPostAC());\n        },\n\n        onPostChange: (text: string) => {\n            dispatch(updateNewPostTextAC(text));\n        }\n    }\n}\n\nexport const MyPostsContainer = connect<mapStateToPropsType,mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from \"react\";\nimport MyPost from \"./Post/MyPost\";\nimport s from \"./MyPosts.module.sass\"\nimport {TextareaAutosize} from \"@material-ui/core\";\nimport {PostType} from \"../../../redux/redux-store\";\n\n\nexport type MyPostsType = {\n    posts: Array<PostType>\n    onPostChange: (text: string) => void\n    addPost: () => void\n    newPostText: string\n}\n\n\nexport const MyPosts: React.FC<MyPostsType> = (props) => {\n    let newPosts = props.posts.map(p => <MyPost key={p.id} id={p.id} message={p.message} like={p.like}/>)\n    /*Создаем ссылку на какой-то элемент из jsx*/\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\n    /*let [post, setPost] = useState()\n    let [changePost, setChangePost] = useState()*/\n    let addPost = () => {\n        /*setPost(props.addPost(changePost))*/\n        props.addPost();\n    }\n\n    let onPostChange = () => {\n        /*if (newPostElement.current) {\n            props.updateNewPostText(newPostElement.current.value)\n        }*/\n        /*newPostElement.current && props.updateNewPostText(newPostElement.current.value)*/\n        props.onPostChange(newPostElement.current ? newPostElement.current.value : \"----\")\n    }\n\n    return (\n        <div className={s.my_post}>\n            <div className={s.posts_block}>\n                <div className={s.posts}>\n                    <TextareaAutosize ref={newPostElement}\n                                      rows={5}\n                                      value={props.newPostText}\n                                      onChange={onPostChange}\n                                      aria-label=\"empty textarea\"\n                                      placeholder=\"Empty\"\n                                      className={s.posts_textarea}\n                    />\n                    <div className={s.button_block}>\n                        <button className={s.posts_button} onClick={addPost}>Add post</button>\n                    </div>\n                </div>\n                <div>\n                    {newPosts}\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\";\nimport s from \"./Profile.module.sass\";\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\n\n/*<div className=\"Photo - main_photo\">\n    <div className=\"Photo-Profile\"></div>\n    <div className=\"Меню-профайл\"></div>\n</div>\n<div className=\"ыы\"></div>\n<div className=\"ввы\"></div>\n<div className=\"ыыы\"></div>*/\n\nexport const Profile = () => {\n    return (\n        <main className={s.main_profile}>\n            <MyPostsContainer/>\n        </main>\n    )\n}\n","import React from \"react\";\nimport s from \"./Profile.module.sass\";\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {Profile} from \"./Profile\";\n\n/*<div className=\"Photo - main_photo\">\n    <div className=\"Photo-Profile\"></div>\n    <div className=\"Меню-профайл\"></div>\n</div>\n<div className=\"ыы\"></div>\n<div className=\"ввы\"></div>\n<div className=\"ыыы\"></div>*/\n\nexport class ProfileContainer extends React.Component<any, any>{\n    render() {\n        return (\n            <Profile/>\n        )\n    }\n\n}\n","import s from \"./ProfileInfo.module.sass\";\nimport React from \"react\";\nimport avatar from './../../../assets/image/avatar.jpg'\nimport {Preloader} from \"../../common/Preloader/Preloader\";\nimport {Button} from \"@material-ui/core\";\n\ntype ProfileInfoType = {\n    profile: any\n}\n\nexport const ProfileInfo = (props: ProfileInfoType) => {\n    console.log(props)\n    if(!props.profile) return <Preloader/>\n    return (\n        <div className={s.profile_info}>\n            <img src={props.profile.photos.large} alt=\"\" width=\"180\" height=\"180\"/>\n            <div>{props.profile.fullName}</div>\n            <div>lookingForAJobDescription: {props.profile.lookingForAJobDescription}</div>\n            <div>lookingForAJob: {props.profile.lookingForAJob}</div>\n            <div>contacts:\n                <div>{props.profile.contacts.facebook}</div>\n                <div>{props.profile.contacts.github}</div>\n                <div>{props.profile.contacts.vk}</div>\n                <div>{props.profile.contacts.instagram}</div>\n                <div>{props.profile.contacts.twitter}</div>\n                <div>{props.profile.contacts.website}</div>\n                <div>{props.profile.contacts.youtube}</div>\n                <div>{props.profile.contacts.mainLink}</div>\n            </div>\n            <button className={s.button}>Dialog</button>\n            <button className={s.button}>Follow</button>\n        </div>\n\n    )\n}","import React from \"react\";\nimport axios from \"axios\";\nimport {ProfileInfo} from \"./ProfileInfo\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/redux-store\";\nimport {setUserProfile} from \"../../../redux/profile-reducer\";\n\n\nclass ProfileInfoContainer extends React.Component<ProfileInfoContainerType> {\n\n    render() {\n        console.log(this.props)\n        return (\n\n            <ProfileInfo {...this.props} profile={this.props.profile}/>\n        )\n    }\n}\n\ntype mapStateToPropsType = {\n    profile: any\n}\n\ntype mapDispatchToPropsType = {\n    setUserProfile: (profile: any) => void\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    console.log(state)\n    return {\n        profile: state.profilePage.profile\n    }\n}\n\ntype ProfileInfoContainerType = mapStateToPropsType & mapDispatchToPropsType\n\nexport default connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {setUserProfile})(ProfileInfoContainer)\n","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport {Profile} from \"./components/Profile/Profile\";\nimport {Route} from \"react-router-dom\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport {MessagesContainer} from \"./components/Dialogs/Messages/MessagesContainer\";\nimport {DialogsContainer} from \"./components/Dialogs/DialogsContainer\";\nimport {FriendsContainer} from \"./components/Navbar/Friends/FriendsContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport {ProfileContainer} from \"./components/Profile/ProfileContainer\";\nimport ProfileInfoContainer from \"./components/Profile/ProfileInfo/ProfileInfoContainer\";\n//import {ProfileInfoContainer} from \"./components/Profile/ProfileInfo/ProfileInfoContainer\";\n\nconst App = () => {\n    return (\n        <div className='app-wrapper'>\n            <header className=\"header\">\n                <Header/>\n            </header>\n            <div className=\"app-wrapper-content\">\n\n                <main className=\"content\">\n                    <div className=\"main_content\">\n                        <div className=\"profile_navbar\">\n                            <Route path=\"/profile\" render={() => <ProfileInfoContainer/>}/>\n                            <Navbar/>\n                        </div>\n                        <div className=\"main\">\n                            <Route path=\"/profile\" render={() => <ProfileContainer/>}/>\n                            <Route path=\"/dialogs\" render={() => <DialogsContainer/>}/>\n                            <Route path=\"/messages\" render={() => <MessagesContainer/>}/>\n                            <Route exact path=\"/news\" render={() => <News/>}/>\n                            <Route path=\"/music\" render={() => <Music/>}/>\n                            <Route path=\"/users\" render={() => <UsersContainer/>}/>\n                        </div>\n\n                    </div>\n                    <div className=\"main_content_friends\">\n                        Friends\n                    </div>\n                </main>\n            </div>\n            <FriendsContainer/>\n        </div>\n    );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let initialState = {\n    dialogs: [\n        {\n            id: 1,\n            name: \"Человек-1\",\n            lastMessage: \"Привет!\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 2,\n            name: \"Человек-2\",\n            lastMessage: \"Хочу предложить тебе новый способ заработать, сидя на диване\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 3,\n            name: \"Человек-3\",\n            lastMessage: \"Скинь фотки\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 4,\n            name: \"Человек-4\",\n            lastMessage: \"Сотку когда вернешь?\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 5,\n            name: \"Человек-5\",\n            lastMessage: \"Жрать охота\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        }\n    ]\n}\n\nexport function dialogsReducer(state = initialState, action: any) {\n    return state\n}\n","let initialState = {\n    friends: [\n        {\n            id: 1,\n            name: \"Друг-1\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 2,\n            name: \"Друг-2\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 3,\n            name: \"Друг-3\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        }\n    ]\n}\n\nexport const sidebarReducer = (state = initialState, action: any) => {\n    return state\n}","import {combineReducers, createStore, Store} from \"redux\";\nimport {addPostAC, profileReducer, updateNewPostTextAC} from \"./profile-reducer\";\nimport {dialogsReducer} from \"./dialogs-reducer\";\nimport {addMessageAC, messageReducer, updateNewMessageTextAC} from \"./message-reducer\";\nimport {sidebarReducer} from \"./sidebar-reducer\";\nimport {usersReducer} from \"./users-reducer\";\n\n/*------------------------------------------------------*/\n/*Типизируем каждый подобьект, начинаем с низшего уровня*/\n\nexport type PostType = {\n    id: number\n    message: string\n    like: number\n}\n\nexport type DialogsItemType = {\n    id: number\n    name: string\n    lastMessage: string\n    avatar: string\n}\n\nexport type MessageType = {\n    id: number\n    name: string\n    textMessage: string\n}\nexport type FriendType = {\n    id: number,\n    name: string,\n    avatar: string\n}\n\nexport type UsersLocationType = {\n    city: string\n    country: string\n}\n\nexport type UserType = {\n    id: number\n    name: string\n    status: string\n    photos: {\n        small: string\n        large: string\n    },\n    followed: boolean\n}\n\n\n/*-------------------------------------------------------*/\n/*Типизируем каждую ветку*/\nexport type ProfilePageType = {\n    posts: Array<PostType>\n    newPostText: string,\n    profile: any\n}\n\nexport type DialogsPageType = {\n    dialogs: Array<DialogsItemType>\n}\n\nexport type MessagesPageType = {\n    messages: Array<MessageType>\n    newMessageText: string\n}\n\nexport type SidebarFriendsType = {\n    friends: Array<FriendType>\n}\n\nexport type UsersType = {\n    users: Array<UserType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number | string\n    isFetching: boolean\n}\n\n\n/*-------------------------------------------------------*/\n/*Собираем все ветки в один обьект для state*/\n/*export type RootStateType = {\n    profilePage: ProfilePageType\n    dialogsPage: DialogsPageType\n    messagesPage: MessagesPageType\n    sidebar: SidebarFriendsType\n}*/\n/*-------------------------------------------------------*/\n\n/*export type StoreType = {\n    _state: RootStateType\n    subscribe: (observer: () => void) => void\n    _callSubscriber: () => void\n    getState: () => RootStateType\n    dispatch: (action: actionType) => void\n}*/\n\n/*\nexport type actionType = addPostAC | updateNewPostTextAC | addMessageAC | updateNewMessageTextAC\n*/\n/*\nexport type addPostAC = ReturnType<typeof addPostAC>\nexport type updateNewPostTextAC = ReturnType<typeof updateNewPostTextAC>\n*/\n/*\nexport type addMessageAC = ReturnType<typeof addMessageAC>\nexport type updateNewMessageTextAC = ReturnType<typeof updateNewMessageTextAC>\n*/\n\nlet reducers = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    messagesPage: messageReducer,\n    sidebar: sidebarReducer,\n    usersPage: usersReducer\n})\n\n//типизируем reducers\nexport type RootReducerType = typeof reducers\n//типизируем state\nexport type AppStateType = ReturnType<RootReducerType>\n\nexport type StoreType = Store<AppStateType>\n/*export type StoreType = Store<AppStateType, actionType>*/\n\n//создаем store\nexport let store: StoreType = createStore(reducers);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n/*import ScopedCssBaseline from \"@material-ui/core/ScopedCssBaseline\";*/\n\nimport {store} from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                {/*<ScopedCssBaseline>*/}\n                    <App/>\n                {/*</ScopedCssBaseline>*/}\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2G49n\",\"nav_list\":\"Navbar_nav_list__195P5\",\"nav_item\":\"Navbar_nav_item__l_UkN\",\"nav_item_link\":\"Navbar_nav_item_link__2kja5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__2Whu_\",\"users_list\":\"Users_users_list__3DzG6\",\"user\":\"Users_user__12P5P\",\"user_avatar\":\"Users_user_avatar__1PI_a\",\"avatar\":\"Users_avatar__28Uw_\",\"follow_unfollow_button\":\"Users_follow_unfollow_button__2kgTj\",\"user_info\":\"Users_user_info__jMX1k\",\"user_info_name\":\"Users_user_info_name__YGCc9\",\"user_name\":\"Users_user_name__1Vq5z\",\"users_paginator\":\"Users_users_paginator__tUK27\",\"selectPage\":\"Users_selectPage__1IFpW\",\"page\":\"Users_page__1UlAf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog_window\":\"Messages_dialog_window__NGXtj\",\"dialog_header\":\"Messages_dialog_header__2NTHl\",\"dialog_footer\":\"Messages_dialog_footer__3sNge\",\"button\":\"Messages_button__B4QTR\",\"dialog_footer_textarea\":\"Messages_dialog_footer_textarea__2wUAq\",\"dialog_body\":\"Messages_dialog_body__eTCSO\",\"message_one\":\"Messages_message_one__158ii\",\"message_two\":\"Messages_message_two__1bHxW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Dialogs_list__2o-TF\",\"item\":\"Dialogs_item__1Rw8z\",\"message\":\"Dialogs_message__1qS-S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__3hM2t\",\"button_block\":\"MyPosts_button_block__awp2T\",\"posts_textarea\":\"MyPosts_posts_textarea__3kZWx\",\"posts_button\":\"MyPosts_posts_button__192L8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post_block\":\"MyPost_post_block__1cDSp\",\"post\":\"MyPost_post__1TfQL\",\"post_text\":\"MyPost_post_text__3GQ1t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile_info\":\"ProfileInfo_profile_info__142Ew\",\"button\":\"ProfileInfo_button__WeC7y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"site_name\":\"Header_site_name__1fFFR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friends_block\":\"Friends_friends_block__1T6CQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_profile\":\"Profile_main_profile__2-65N\"};"],"sourceRoot":""}