{"version":3,"sources":["components/Navbar/MenuItem/MenuItem.tsx","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","redux/message-reducer.ts","components/Dialogs/Messages/Messages.tsx","components/Dialogs/Messages/MessagesContainer.tsx","components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/Navbar/Friends/FriendsContainer.tsx","components/Navbar/Friends/Friends.tsx","assets/image/ufo-2.png","components/Users/Users.tsx","api/api.ts","redux/users-reducer.ts","assets/image/preloader.svg","components/common/Preloader/Preloader.jsx","redux/profile-reducer.ts","components/Users/UsersContainer.tsx","components/Profile/MyPosts/Post/MyPost.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/ProfileInfo/ProfileInfoContainer.tsx","components/Header/Header.tsx","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","serviceWorker.ts","redux/dialogs-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","index.tsx","components/Users/Users.module.sass","components/Dialogs/Messages/Messages.module.sass","components/Profile/ProfileInfo/ProfileInfo.module.sass","components/Dialogs/Dialogs.module.sass","components/Navbar/Navbar.module.sass","components/Profile/MyPosts/MyPosts.module.sass","components/Profile/MyPosts/Post/MyPost.module.sass","components/Header/Header.module.sass","components/Navbar/Friends/Friends.module.sass","components/Profile/Profile.module.sass","components/Login/Login.module.sass"],"names":["MenuItem","props","className","s","nav_item","nav_item_link","to","activeClassName","active","item","Navbar","nav","nav_list","News","Music","ADD_MESSAGE","UPDATE_NEW_MESSAGE_TEXT","initialState","messages","id","name","textMessage","newMessageText","Messages","newMessages","map","m","dialog_body","message_one","message_two","newElement","React","createRef","dialog_window","dialog_header","Button","variant","color","dialog_footer","TextareaAutosize","ref","rows","value","onChange","onChangeMessage","current","aria-label","placeholder","dialog_footer_textarea","fullWidth","onClick","addMessage","button","MessagesContainer","connect","state","messagesPage","dispatch","type","text","word","DialogsItem","link","Avatar","alt","src","avatar","message","user_name","last_message","lastMessage","Dialogs","newData","dialogs","d","isAuth","list","DialogsContainer","dialogsPage","auth","FriendsContainer","friends","sidebar","f","Users","pagesCount","Math","ceil","totalUsersCount","pageSize","pages","i","push","users","users_paginator","p","e","onPageChanged","currentPage","selectPage","page","users_list","u","user","user_avatar","photos","large","button_followed","followed","follow_unfollow_button","disabled","followingInProgress","some","unfollow","follow","user_info","user_info_name","user_status","status","instance","axios","create","withCredentials","baseURL","headers","usersAPI","get","then","response","data","userId","post","delete","authAPI","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_FOLLOWING_PROGRESS","isFetching","setToggleIsFetching","toggleFollowingProgress","Preloader","preloader","ADD_POST","UPDATE_NEW_POST_TEXT","SET_PROFILE_INFO","posts","like","newPostText","profile","setUserProfile","UsersContainer","pageNumber","getUsers","render","this","Component","WithUrlDataContainerComponent","withRouter","usersPage","resultCode","followSuccess","unfollowSuccess","setCurrentPage","totalCount","items","MyPost","post_block","FormControlLabel","control","Checkbox","icon","FavoriteBorder","checkedIcon","Favorite","label","post_text","MyPostsContainer","profilePage","addPostAC","updateNewPostTextAC","newPosts","newPostElement","my_post","posts_block","posts_textarea","button_block","posts_button","Profile","main_profile","ProfileContainer","ProfileInfo","contact","Object","values","contacts","filter","a","rel","href","profile_info","width","height","info_name","fullName","lookingForAJobDescription","info_description","lookingForAJob","info_job","info_contacts","ProfileInfoContainer","match","params","getUserProfile","Header","site_name","login","photo","small","SET_USER_DATA","SET_USER_PHOTO","email","HeaderContainer","getUserAuthData","getUserPhoto","WithUrlUsersDataContainerComponent","setUserData","setUserPhoto","Login","h1","App","exact","path","Boolean","window","location","hostname","unregister","navigator","serviceWorker","ready","registration","catch","error","console","reducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.b03dc21d.chunk.js","sourcesContent":["import React from 'react'\nimport s from \"../Navbar.module.sass\";\nimport {NavLink} from \"react-router-dom\";\n\nexport type MenuItemType = {\n    to: string\n    item: string\n}\n\nexport const MenuItem = (props: MenuItemType) => {\n    return (\n        <li className={s.nav_item}>\n            <NavLink className={s.nav_item_link}\n                     to={props.to}\n                     activeClassName={s.active}>\n                {/*<img src={profile} alt=\"profile\"/>*/}\n                <span>{props.item}</span>\n            </NavLink>\n        </li>\n    )\n}","import React from \"react\";\nimport s from \"./Navbar.module.sass\";\nimport {MenuItem} from \"./MenuItem/MenuItem\";\n\ntype NavbarType = {\n    /*state: SidebarFriendsType*/\n}\n\nconst Navbar: React.FC<NavbarType> = (props) => {\n\n    return (\n        <nav className={s.nav}>\n            <ul className={s.nav_list}>\n                {/*NavLink - не перезагружая страницу, меняем адресную строку*/}\n                <MenuItem to={\"/profile\"} item={\"Profile\"}/>\n                <MenuItem to={\"/dialogs\"} item={\"Dialogs\"}/>\n                <MenuItem to={\"/news\"} item={\"News\"}/>\n                <MenuItem to={\"/music\"} item={\"Music\"}/>\n                <MenuItem to={\"/settings\"} item={\"Settings\"}/>\n                <MenuItem to={\"/users\"} item={\"Users\"}/>\n            </ul>\n        </nav>\n    )\n}\n\nexport default Navbar;","import React from \"react\";\nimport s from \"./News.module.sass\";\n\nconst News = () => {\n    return (\n        <div>\n            Dialogs\n        </div>\n    )\n}\n\nexport default News;","import React from \"react\";\nimport s from \"./Music.module.sass\";\n\nconst Music = () => {\n    return (\n        <div>\n            Music\n        </div>\n    )\n}\n\nexport default Music;","export const ADD_MESSAGE = \"ADD_MESSAGE\"\nexport const UPDATE_NEW_MESSAGE_TEXT = \"UPDATE_NEW_MESSAGE_TEXT\"\n\nexport type addMessageACType = ReturnType<typeof addMessageAC>\nexport type updateNewMessageTextACType = ReturnType<typeof updateNewMessageTextAC>\n\nlet initialState = {\n    messages: [\n        {id: 1, name: \"Он\", textMessage: \"Hello\"},\n        {id: 2, name: \"Ты\", textMessage: \"Hello\"},\n        {id: 1, name: \"Он\", textMessage: \"Ты такая хорошая! Ты даже лучше, чем сахар!\"},\n        {id: 2, name: \"Ты\", textMessage: \"Спасибо! Приходи сегодня\"},\n    ],\n\n    newMessageText: \"\"\n}\n\nexport function messageReducer(state = initialState, action: addMessageACType | updateNewMessageTextACType) {\n    switch (action.type) {\n        case ADD_MESSAGE:\n            return {\n                ...state,\n                messages: [...state.messages, {id: 2, name: \"Ты\", textMessage: state.newMessageText}],\n                newMessageText: \"\"\n            };\n\n        case UPDATE_NEW_MESSAGE_TEXT:\n            return {\n                ...state,\n                newMessageText: action.word\n            };\n\n        default:\n            return state\n    }\n}\n\nexport const addMessageAC = () => ({type: ADD_MESSAGE} as const)\nexport const updateNewMessageTextAC = (word: string) => ({type: UPDATE_NEW_MESSAGE_TEXT, word: word} as const)","import React from \"react\";\nimport s from \"./Messages.module.sass\";\nimport {NavLink} from \"react-router-dom\";\nimport Button from '@material-ui/core/Button';\nimport {MessageType} from \"../../../redux/redux-store\";\nimport {TextareaAutosize} from \"@material-ui/core\";\n\ntype MessagesType = {\n    messages: Array<MessageType>\n    addMessage: () => void\n    onChangeMessage: (text: string) => void\n    newMessageText: string\n}\n\nconst Messages: React.FC<MessagesType> = (props) => {\n    let newMessages = props.messages.map(m => <div key={m.id} className={s.dialog_body}>\n        {/*Не охота верстать, сделать потом*/}\n\n        <div className={m.id === 1 ? s.message_one : \"\"}>\n            <div>{m.id === 1 ? m.name : null}</div>\n            <div>{m.id === 1 ? m.textMessage : null}</div>\n        </div>\n        <div className={m.id === 2 ? s.message_two : \"\"}>\n            <div>{m.id === 2 ? m.name : null}</div>\n            <div>{m.id === 2 ? m.textMessage : null}</div>\n        </div>\n\n\n    </div>)\n\n    let newElement = React.createRef<HTMLTextAreaElement>();\n\n    /* let [message, setMessage] = useState()\n     let [change, setChange] = useState()\n */\n    const addMessage = () => {\n        /*setMessage(props.addMessage(change))*/\n        //Чтобы вынести в отдельную переменную, нужно типизировать эту переменную\n        //так как action определяется как {type: string\n        props.addMessage();\n    }\n\n    const onChangeMessage = () => {\n        props.onChangeMessage(newElement.current ? newElement.current.value : \"----\")\n    }\n\n    return (\n        <div className={s.dialog_window}>\n            <div className={s.dialog_header}>\n                <NavLink to=\"/dialogs\">\n                    <Button variant=\"contained\" color=\"default\">Exit</Button>\n                </NavLink>\n                <div>Avatar + name</div>\n            </div>\n            {newMessages}\n            <div className={s.dialog_footer}>\n                <TextareaAutosize ref={newElement}\n                                  rows={5}\n                                  value={props.newMessageText}\n                                  onChange={onChangeMessage}\n                                  aria-label=\"empty textarea\"\n                                  placeholder=\"Empty\"\n                                  className={s.dialog_footer_textarea}\n                />\n                {/*\n                <textarea ref={newElement} value={props.newMessageText} onChange={onChangeMessage} rows={5}></textarea>\n*/}\n                {/*value={message} onChange={(e) => {setChange(e.currentTarget.value)}}*/}\n                <Button\n                    fullWidth={true}\n                    onClick={addMessage}\n                    variant=\"contained\"\n                    color=\"default\"\n                    className={s.button}\n                    /*endIcon={<Icon>send</Icon>}*/\n                >Send\n                </Button>\n                {/*<button onClick={addMessage}>Send</button>*/}\n            </div>\n        </div>\n    )\n}\n\nexport default Messages;","import React from \"react\";\nimport {addMessageAC, updateNewMessageTextAC} from \"../../../redux/message-reducer\";\nimport Messages from \"./Messages\";\nimport {connect} from \"react-redux\";\nimport {AppStateType, MessageType} from \"../../../redux/redux-store\";\nimport {Dispatch} from \"redux\";\n\n\ntype mapStateToPropsType = {\n    messages: Array<MessageType>\n    newMessageText: string\n}\n\ntype mapDispatchToPropsType = {\n    addMessage: () => void\n    onChangeMessage: (text: string) => void\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        messages: state.messagesPage.messages,\n        newMessageText: state.messagesPage.newMessageText\n    }\n}\n\n/*https://stackoverflow.com/questions/49808004/parameter-dispatch-implicitly-has-an-any-type*/\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        addMessage: () => {\n            dispatch(addMessageAC());\n        },\n\n        onChangeMessage: (text: string) => {\n            dispatch(updateNewMessageTextAC(text))\n        }\n    }\n}\n\nexport const MessagesContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(Messages)\n","import {NavLink} from \"react-router-dom\";\nimport s from \"../Dialogs.module.sass\";\nimport React from \"react\";\nimport {Avatar} from \"@material-ui/core\";\nimport {DialogsItemType} from \"../../../redux/redux-store\";\n\n\nexport const DialogsItem: React.FC<DialogsItemType> = (props) => {\n    return (\n        <NavLink className={s.link} to={\"/messages/\" + props.id}>\n            <li className={s.item}>\n                <Avatar alt=\"Remy Sharp\" src={props.avatar} />\n                <div className={s.message}>\n                    <div className={s.user_name}>{props.name}</div>\n                    <div className={s.last_message}>{props.lastMessage}</div>\n                </div>\n            </li>\n        </NavLink>\n    )\n}\n\n\n\n","import React from \"react\";\nimport s from \"./Dialogs.module.sass\";\nimport {DialogsItem} from \"./DialogsItem/DialogsItem\";\nimport {DialogsItemType} from \"../../redux/redux-store\";\nimport { Redirect } from \"react-router-dom\";\n\ntype DialogsType = {\n    dialogs: Array<DialogsItemType>\n    isAuth: boolean | null\n}\n\nconst Dialogs: React.FC<DialogsType> = (props) => {\n\n    let newData = props.dialogs.map(d => <DialogsItem key={d.id} id={d.id} name={d.name} lastMessage={d.lastMessage}\n                                                      avatar={d.avatar}/>)\n\n    if (!props.isAuth) return <Redirect to={\"/login\"} />\n\n    return (\n        <ul className={s.list}>\n            {newData}\n        </ul>\n    )\n}\n\nexport default Dialogs;\n","import React from \"react\";\nimport {AppStateType, DialogsItemType} from \"../../redux/redux-store\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {Dispatch} from \"redux\";\n\n\ntype mapStateToPropsType = {\n    dialogs: Array<DialogsItemType>\n    isAuth: boolean | null\n}\n\ntype mapDispatchToPropsType = {\n\n}\n\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        dialogs: state.dialogsPage.dialogs,\n        isAuth: state.auth.isAuth\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n\n    }\n}\n\nexport const DialogsContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(Dialogs)\n","import React from \"react\";\nimport {Friends} from \"./Friends\";\nimport {connect} from \"react-redux\";\nimport {AppStateType, FriendType} from \"../../../redux/redux-store\";\n\n\ntype mapStateToPropsType = {\n    friends: Array<FriendType>\n}\n\ntype mapDispatchToPropsType = {\n\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        friends: state.sidebar.friends\n    }\n}\n\n/*https://stackoverflow.com/questions/49808004/parameter-dispatch-implicitly-has-an-any-type*/\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n\n    }\n}\nexport const FriendsContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(Friends)\n","import React from \"react\";\nimport {FriendType} from \"../../../redux/redux-store\";\nimport {Avatar} from \"@material-ui/core\";\nimport s from \"./Friends.module.sass\";\n/*import { AvatarGroup } from '@material-ui/lab';*/\n\ntype FriendsType = {\n    friends: Array<FriendType>\n}\n\n\nexport const Friends: React.FC<FriendsType> = (props) => {\n\n    let friendsList = props.friends.map(f => <div key={f.id}>\n        <Avatar className={s.avatar} src={f.avatar} alt={f.name}/>\n    </div>)\n\n    return (\n        <div></div>\n        /*<AvatarGroup className={s.friends_block} spacing={0} max={3}>\n            {friendsList}\n        </AvatarGroup>*/\n    )\n}","export default __webpack_public_path__ + \"static/media/ufo-2.3c1ecb26.png\";","import React from 'react'\nimport s from \"./Users.module.sass\"\nimport {UserType} from \"../../redux/redux-store\";\nimport avatar from './../../assets/image/ufo-2.png'\nimport {NavLink} from \"react-router-dom\";\n\ntype UsersType = {\n    users: Array<UserType>\n    follow: (id: number) => void\n    unfollow: (id: number) => void\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number | string\n    onPageChanged: (pageNumber: number) => void\n    followingInProgress: Array<number>\n\n    //setTotalUsersCount: (totalCount: number) => void\n    //setUsers: (users: Array<UserType>) => void\n    //setCurrentPage: (pageNumber: number) => void\n}\n\nexport const Users = (props: UsersType) => {\n\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\n    let pages = []\n    for (let i = 1; i < pagesCount; i++) {\n        pages.push(i)\n    }\n\n    return (\n        <div className={s.users}>\n\n            <div className={s.users_paginator}>\n                {pages.map(p => <span onClick={(e) => props.onPageChanged(p)}\n                                      className={props.currentPage === p ? s.selectPage : s.page}>{p}</span>)}\n            </div>\n\n            <div className={s.users_list}>\n                {\n                    props.users.map(u =>\n                        <div key={u.id} className={s.user}>\n\n                            <div className={s.user_avatar}>\n                                <NavLink to={\"/profile/\" + u.id}>\n                                    <img className={s.avatar}\n                                         src={u.photos.large !== null ? u.photos.large : `${avatar}`}\n                                         alt={u.name}\n                                    />\n                                </NavLink>\n\n                            </div>\n\n                            <div className={s.button_followed}>\n                                {u.followed ?\n                                    <button className={s.follow_unfollow_button}\n                                            disabled={props.followingInProgress.some(id => id === u.id)}\n                                            onClick={() => {\n                                                props.unfollow(u.id)\n                                            }}>\n                                        Unfollow\n                                    </button>\n                                    : <button className={s.follow_unfollow_button}\n                                              disabled={props.followingInProgress.some(id => id === u.id)}\n                                              onClick={() => {\n                                                  props.follow(u.id)\n                                              }}>\n                                        Follow\n                                    </button>\n                                }\n                            </div>\n\n                            <div className={s.user_info}>\n                                <div className={s.user_info_name}>\n                                    <div className={s.user_name}>{u.name}</div>\n                                    <div className={s.user_status}>{u.status}</div>\n                                </div>\n                            </div>\n\n                        </div>\n                    )}\n            </div>\n        </div>\n    )\n}\n\n\nexport default Users\n\n/*export function Users(props: UsersType) {\n\nconst getUsers = () => {\nif (props.users.length === 0) {\naxios.get(\"https://social-network.samuraijs.com/api/1.0/users\").then(response => {\nprops.setUsers(response.data.items)\n})\n\n}\n}\n\nreturn (\n<div className={s.users}>\n<button onClick={getUsers}>get users</button>\n{\nprops.users.map(u =>\n<div key={u.id} className={s.user}>\n<div className={s.user_avatar}>\n<Avatar variant='rounded'\nclassName={s.avatar}\nsrc={u.photos.small !== null ? u.photos.small : `${avatar}`}\nalt={u.name}\n\n/>\n{u.followed ?\n<button className={s.follow_unfollow_button}\nonClick={() => props.unfollow(u.id)}>\nUnfollow\n</button>\n: <button className={s.follow_unfollow_button}\nonClick={() => props.follow(u.id)}>\nFollow\n</button>\n}\n</div>\n<div className={s.user_info}>\n<div className={s.user_info_name}>\n<div className={s.user_name}>{u.name}</div>\n<div className={s.user_status}>{u.status}</div>\n</div>\n</div>\n</div>\n)}\n</div>\n)\n}*/\n\n\n/*123321\nlet palindromeChainLength = function (n) {\n// let newN = String(n).split(\"\")\nlet newN2 = String(n).split(\"\").reverse().join()\nif(n !== newN2) {\nlet sum = n + Number(newN2)\nreturn palindromeChainLength(sum)\n} else {\nreturn n\n}\n};\n\npalindromeChainLength(44)*/\n","import axios from \"axios\";\n\nlet instance = axios.create({\n\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        \"API-KEY\": \"175e24f1-c22d-463c-ba2f-3d45c5594942\"\n    }\n\n})\n\nexport const usersAPI = {\n    getUsers(currentPage: string | number, pageSize: number) {\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data)\n    },\n\n    getUsersPage(pageNumber: string | number, pageSize: number) {\n        return instance.get(`users?page=${pageNumber}&count=${pageSize}`).then(response => response.data)\n    },\n\n    getUser(userId: string) {\n        return instance.get(`profile/${userId}`).then(response => response.data)\n    },\n\n    follow(id: number) {\n        return instance.post(`https://social-network.samuraijs.com/api/1.0/follow/${id}`)\n    },\n\n    unfollow(id: number) {\n        return instance.delete(`https://social-network.samuraijs.com/api/1.0/follow/${id}`)\n    }\n}\n\nexport const authAPI = {\n    me () {\n        return instance.get('auth/me')\n    }\n}\n","import {UsersType, UserType} from \"./redux-store\";\nimport {usersAPI} from \"../api/api\";\n\nexport const FOLLOW = \"FOLLOW\"\nexport const UNFOLLOW = \"UNFOLLOW\"\nexport const SET_USERS = \"SET_USERS\"\nexport const SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\"\nexport const SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\"\nexport const TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\"\nexport const TOGGLE_FOLLOWING_PROGRESS = \"TOGGLE_FOLLOWING_PROGRESS\"\n\nexport const initialState: UsersType = {\n    users: [],\n    pageSize: 50,\n    totalUsersCount: 0,\n    currentPage: 2,\n    isFetching: false,\n    followingInProgress: []\n}\n\nexport type followACType = ReturnType<typeof followSuccess>\nexport type unfollowACType = ReturnType<typeof unfollowSuccess>\nexport type setUsersACType = ReturnType<typeof setUsers>\nexport type setCurrentPageACType = ReturnType<typeof setCurrentPage>\nexport type setTotalUsersCountACType = ReturnType<typeof setTotalUsersCount>\nexport type toggleIsFetchingACType = ReturnType<typeof setToggleIsFetching>\nexport type toggleFollowingProgressACType = ReturnType<typeof toggleFollowingProgress>\n\nexport type ActionType =\n    followACType\n    | unfollowACType\n    | setUsersACType\n    | setCurrentPageACType\n    | setTotalUsersCountACType\n    | toggleIsFetchingACType\n    | toggleFollowingProgressACType\n\n\nexport function usersReducer(state = initialState, action: ActionType) {\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    return action.id === u.id ? {...u, followed: true} : u\n                })\n            }\n\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    return action.id === u.id ? {...u, followed: false} : u\n                })\n            }\n\n        case SET_USERS:\n            return {\n                ...state,\n                users: action.users\n            }\n\n        case SET_CURRENT_PAGE:\n            return {\n                ...state,\n                currentPage: action.currentPage\n            }\n\n        case SET_TOTAL_USERS_COUNT:\n            return {\n                ...state,\n                totalUsersCount: action.totalCount\n            }\n\n        case TOGGLE_IS_FETCHING:\n            return {\n                ...state,\n                isFetching: action.isFetching\n            }\n\n        case TOGGLE_FOLLOWING_PROGRESS:\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : [...state.followingInProgress.filter(id => id !== action.userId)]\n            }\n        default:\n            return state\n    }\n}\n\nexport const followSuccess = (id: number) => ({\n    type: FOLLOW,\n    id\n} as const)\n\nexport const unfollowSuccess = (id: number) => ({\n    type: UNFOLLOW,\n    id\n} as const)\n\nexport const setUsers = (users: Array<UserType>) => ({\n    type: SET_USERS,\n    users\n} as const)\n\nexport const setCurrentPage = (currentPage: number) => ({\n    type: SET_CURRENT_PAGE,\n    currentPage\n} as const)\n\nexport const setTotalUsersCount = (totalCount: number) => ({\n    type: SET_TOTAL_USERS_COUNT,\n    totalCount\n} as const)\n\nexport const setToggleIsFetching = (isFetching: boolean) => ({\n    type: TOGGLE_IS_FETCHING,\n    isFetching\n} as const)\n\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => ({\n    type: TOGGLE_FOLLOWING_PROGRESS,\n    isFetching,\n    userId\n} as const)\n\nexport const getUsers = (currentPage: number | string, pageSize: number) => (dispatch: any) => {\n    dispatch(setToggleIsFetching(true))\n    usersAPI.getUsers(currentPage, pageSize).then(data => {\n        dispatch(setUsers(data.items))\n        dispatch(setTotalUsersCount(data.totalCount))\n        dispatch(setToggleIsFetching(false))\n    })\n\n\n    /*usersAPI.getUsersPage(currentPage, pageSize).then(data => {\n        dispatch(setUsers(data.items))\n        dispatch(setTotalUsersCount(data.totalCount))\n        dispatch(setToggleIsFetching(false))\n    })*/\n\n    /*usersAPI.getUser(userId).then(data => {\n        dispatch(setUserProfile(data))\n    })*/\n}\n\nexport const follow = (id: number) => (dispatch: any) => {\n    dispatch(toggleFollowingProgress(true, id))\n    usersAPI.follow(id)\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(followSuccess(id))\n            }\n            dispatch(toggleFollowingProgress(false, id))\n        })\n\n}\n\nexport const unfollow = (id: number) => (dispatch: any) => {\n    dispatch(toggleFollowingProgress(true, id))\n    usersAPI.unfollow(id)\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(unfollowSuccess(id))\n            }\n            dispatch(toggleFollowingProgress(false, id))\n        })\n}\n","export default __webpack_public_path__ + \"static/media/preloader.02e8bfc4.svg\";","import React from 'react'\nimport preloader from \"./../../../assets/image/preloader.svg\"\n\nexport const Preloader = () => {\n    return (\n        <>\n            <img src={preloader} alt=\"preloader\"/>\n        </>\n    )\n}","import {usersAPI} from \"../api/api\";\n\nconst ADD_POST = \"ADD_POST\"\nconst UPDATE_NEW_POST_TEXT = \"UPDATE_NEW_POST_TEXT\"\nconst SET_PROFILE_INFO = \"SET_PROFILE_INFO\"\n\n\nexport type addPostAC = ReturnType<typeof addPostAC>\nexport type updateNewPostTextAC = ReturnType<typeof updateNewPostTextAC>\nexport type setUserProfileType = ReturnType<typeof setUserProfile>\n\n\nlet initialState = {\n    posts: [\n        {id: 1, message: \"Это передача сдохни или умри!\", like: 25},\n        {id: 2, message: \"Или сдохни\", like: 40},\n        {id: 3, message: \"Или умри\", like: 1}\n    ],\n\n    newPostText: \"\",\n    profile: null\n}\n\nexport function profileReducer(state = initialState, action: addPostAC | updateNewPostTextAC| setUserProfileType) {\n    switch (action.type) {\n        case ADD_POST:\n            return {\n                ...state,\n                posts: [{id: 5, message: state.newPostText, like: 25}, ...state.posts],\n                newPostText: \"\"\n            }\n\n        case UPDATE_NEW_POST_TEXT:\n            return {\n                ...state,\n                newPostText: action.text\n            };\n\n        case SET_PROFILE_INFO:\n            return {\n                ...state,\n                profile: action.profile\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const addPostAC = () => ({type: ADD_POST} as const)\nexport const updateNewPostTextAC = (text: string) => ({type: UPDATE_NEW_POST_TEXT, text: text} as const)\nexport const setUserProfile = (profile: any) => ({\n    type: SET_PROFILE_INFO,\n    profile\n} as const)\n\nexport const getUserProfile = (userId: string) => (dispatch: any) => {\n    usersAPI.getUser(userId).then(data => {\n        dispatch(setUserProfile(data))\n    })\n}\n\n","import {connect} from \"react-redux\";\nimport Users from \"./Users\";\nimport {AppStateType, UserType} from \"../../redux/redux-store\";\nimport {\n    follow,\n    setCurrentPage,\n    unfollow,\n    getUsers\n} from \"../../redux/users-reducer\";\nimport React from \"react\";\nimport {Preloader} from \"../common/Preloader/Preloader\";\nimport {setUserProfile} from \"../../redux/profile-reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\n\ntype PathParamsType = {\n    userId: string\n}\n\ntype mapStateToPropsType = {\n    users: Array<UserType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number | string\n    isFetching: boolean\n    followingInProgress: Array<number>\n}\n\ntype mapDispatchToPropsType = {\n    follow: (id: number) => void\n    unfollow: (id: number) => void\n    setCurrentPage: (pageNumber: number) => void\n    setUserProfile: (userId: number) => void\n    getUsers: (currentPage: number | string, pageSize: number) => void\n}\n\ntype UsersContainerType = mapStateToPropsType & mapDispatchToPropsType\ntype ContainerType = RouteComponentProps<PathParamsType> & UsersContainerType\n\n\nclass UsersContainer extends React.Component<ContainerType> {\n    componentDidMount() {\n        //запрашиваем юзеров\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\n    }\n\n    onPageChanged = (pageNumber: number) => {\n        //запрашиваем юзеров\n        this.props.getUsers(pageNumber, this.props.pageSize)\n    }\n\n    render = () =>\n        <>\n            {this.props.isFetching ? <Preloader/> : null}\n\n            <Users users={this.props.users}\n                   follow={this.props.follow}\n                   unfollow={this.props.unfollow}\n                   pageSize={this.props.pageSize}\n                   totalUsersCount={this.props.totalUsersCount}\n                   currentPage={this.props.currentPage}\n                   onPageChanged={this.onPageChanged}\n                   followingInProgress={this.props.followingInProgress}\n            />\n        </>\n}\n\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        users: state.usersPage.users,\n        pageSize: state.usersPage.pageSize,\n        totalUsersCount: state.usersPage.totalUsersCount,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching,\n        followingInProgress: state.usersPage.followingInProgress\n    }\n}\n\n\nlet WithUrlDataContainerComponent = withRouter(UsersContainer)\n\nexport default connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps,\n    {\n        follow,\n        unfollow,\n        setCurrentPage,\n        setUserProfile,\n        getUsers\n    }\n)(WithUrlDataContainerComponent)","import React from \"react\";\nimport s from \"./MyPost.module.sass\";\nimport {PostType} from \"../../../../redux/redux-store\";\nimport {Avatar, Checkbox, FormControlLabel} from \"@material-ui/core\";\nimport {Favorite, FavoriteBorder} from \"@material-ui/icons\";\n\n\nconst MyPost: React.FC<PostType> = (props) => {\n\n    return (\n        <div className={s.post_block}>\n            <div className={s.post}>\n                <Avatar src=\"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\" alt=\"Аватарка\"/>\n                <FormControlLabel control={<Checkbox\n                    icon={<FavoriteBorder/>}\n                    checkedIcon={<Favorite/>}\n                    name=\"checkedH\"/>}\n                                  label={props.like}\n\n                />\n            </div>\n            <div className={s.post_text}>{props.message}</div>\n        </div>\n    )\n}\n\nexport default MyPost;","import React from \"react\";\nimport {addPostAC, updateNewPostTextAC} from \"../../../redux/profile-reducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType, PostType} from \"../../../redux/redux-store\";\n\ntype mapStateToPropsType = {\n    posts: Array<PostType>\n    newPostText: string\n    isAuth: boolean | null\n}\n\ntype mapDispatchToPropsType = {\n    addPostAC: () => void\n    updateNewPostTextAC: (text: string) => void\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText,\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport const MyPostsContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\n    addPostAC,\n    updateNewPostTextAC\n})(MyPosts)","import React from \"react\";\nimport MyPost from \"./Post/MyPost\";\nimport s from \"./MyPosts.module.sass\"\nimport {TextareaAutosize} from \"@material-ui/core\";\nimport {PostType} from \"../../../redux/redux-store\";\nimport {Redirect} from \"react-router-dom\";\n\n\nexport type MyPostsType = {\n    posts: Array<PostType>\n    updateNewPostTextAC: (text: string) => void\n    addPostAC: () => void\n    newPostText: string\n    isAuth: boolean | null\n}\n\n\nexport const MyPosts: React.FC<MyPostsType> = (props) => {\n    let newPosts = props.posts.map(p => <MyPost key={p.id} id={p.id} message={p.message} like={p.like}/>)\n    /*Создаем ссылку на какой-то элемент из jsx*/\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\n    /*let [post, setPost] = useState()\n    let [changePost, setChangePost] = useState()*/\n    let addPost = () => {\n        /*setPost(props.addPost(changePost))*/\n        props.addPostAC();\n    }\n\n    let onPostChange = () => {\n        /*if (newPostElement.current) {\n            props.updateNewPostText(newPostElement.current.value)\n        }*/\n        /*newPostElement.current && props.updateNewPostText(newPostElement.current.value)*/\n        props.updateNewPostTextAC(newPostElement.current ? newPostElement.current.value : \"----\")\n    }\n\n    if (!props.isAuth) return <Redirect to={\"/login\"}/>\n\n    return (\n        <div className={s.my_post}>\n            <div className={s.posts_block}>\n                <div className={s.posts}>\n                    <TextareaAutosize ref={newPostElement}\n                                      rows={5}\n                                      value={props.newPostText}\n                                      onChange={onPostChange}\n                                      aria-label=\"empty textarea\"\n                                      placeholder=\"Empty\"\n                                      className={s.posts_textarea}\n                    />\n                    <div className={s.button_block}>\n                        <button className={s.posts_button} onClick={addPost}>Add post</button>\n                    </div>\n                </div>\n                <div>\n                    {newPosts}\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\";\nimport s from \"./Profile.module.sass\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\n\nexport const Profile = () => {\n    return (\n        <main className={s.main_profile}>\n            <MyPostsContainer/>\n        </main>\n    )\n}\n","import React from \"react\";\nimport {Profile} from \"./Profile\";\n\nexport class ProfileContainer extends React.Component<any, any>{\n\n    render() {\n        return (\n            <Profile/>\n        )\n    }\n\n}\n","import s from \"./ProfileInfo.module.sass\";\nimport React from \"react\";\nimport {Preloader} from \"../../common/Preloader/Preloader\";\nimport avatar from \"./../../../assets/image/ufo-2.png\"\n\ntype ProfileInfoType = {\n    profile: any\n}\n\nexport const ProfileInfo = (props: ProfileInfoType) => {\n\n    //достаем значения из объекта и складываем в массив\n    //фильтруем массив\n    //возвращаем разметку со значениями из массива\n    let contact = props.profile !== null && Object\n        .values(props.profile.contacts)\n        .filter(item => item !== null)\n        .map((a: any) => {\n            return <div className={s.contact}>\n                <a rel=\"stylesheet\" href={a}>{a} </a>\n            </div> //6326\n        })\n\n    if (!props.profile) return <Preloader/>\n\n    return (\n        <div className={s.profile_info}>\n            {\n                props.profile.photos.large\n                    ? <img src={props.profile.photos.large} alt=\"\" width=\"180\" height=\"180\"/>\n                    : <img src={avatar} alt=\"\" width=\"180\" height=\"180\"/>\n            }\n\n            <div className={s.info_name}>{props.profile.fullName}</div>\n            {\n                props.profile.lookingForAJobDescription === null\n                    ? <div className={s.info_description}>Description: {props.profile.lookingForAJobDescription}</div>\n                    : null\n            }\n\n            {\n                props.profile.lookingForAJob === null\n                    ? <div className={s.info_job}>lookingForAJob: {props.profile.lookingForAJob}</div>\n                    : null\n            }\n\n            <div className={s.info_contacts}>contacts:{contact}</div>\n            <button className={s.button}>Dialog</button>\n            <button className={s.button}>Follow</button>\n        </div>\n\n    )\n}","import React from \"react\";\nimport {ProfileInfo} from \"./ProfileInfo\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/redux-store\";\nimport {getUserProfile} from \"../../../redux/profile-reducer\";\nimport {Redirect, RouteComponentProps, withRouter} from \"react-router-dom\";\n\n\nclass ProfileInfoContainer extends React.Component<Type> {\n\n    componentDidMount() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = '2'\n        }\n        /*!userId && <Redirect to={\"/login\"}></Redirect>*/\n        this.props.getUserProfile(userId)\n    }\n\n    render() {\n        return (\n            <ProfileInfo {...this.props} profile={this.props.profile}/>\n        )\n    }\n}\n\ntype ParamsType = {\n    userId: string\n}\n\nexport type ContactsType = {\n    github: string\n    vk: string\n    facebook: string\n    instagram: string\n    twitter: string\n    website: string\n    youtube: string\n    mainLink: string\n}\n\nexport type PhotosType = {\n    small: string\n    large: string\n}\n\nexport type ProfileType = {\n    userId: number\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    fullName: string\n    contacts: ContactsType\n    photos: PhotosType\n}\n\ntype mapStateToPropsType = {\n    profile: any\n}\n\ntype mapDispatchToPropsType = {\n    getUserProfile: (userId: string) => void\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        profile: state.profilePage.profile\n    }\n}\n\ntype ProfileInfoContainerType = mapStateToPropsType & mapDispatchToPropsType\ntype Type = RouteComponentProps<ParamsType> & ProfileInfoContainerType\n\nlet WithUrlDataContainerComponent = withRouter(ProfileInfoContainer)\n\nexport default connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent)\n","import React from \"react\";\nimport s from \"./Header.module.sass\";\nimport {NavLink} from \"react-router-dom\";\nimport {authType} from \"../../redux/redux-store\";\nimport avatar from \"./../../assets/image/ufo-2.png\"\n\nconst Header = (props: authType) => {\n    return (\n        <>\n            <div className={s.site_name}>Spacebook</div>\n            <div className={s.login}>\n                {props.photo.small === \"\"\n                    ? <img src={avatar} width=\"40px\" height=\"40px\" alt=\"avatar\"/>\n                    : <img src={props.photo.small} width=\"40px\" height=\"40px\" alt=\"avatar\"/>}\n\n                {props.isAuth ? props.login : <NavLink to={'/login'}>Login</NavLink>}\n            </div>\n        </>\n    )\n}\n\nexport default Header;","import {authType} from \"./redux-store\";\nimport {authAPI, usersAPI} from \"../api/api\";\n\nexport const SET_USER_DATA = 'SET_USER_DATA'\nexport const SET_USER_PHOTO = 'SET_USER_PHOTO'\n\n\nexport const initialState: authType = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    photo: {\n        small: \"\",\n        large: \"\"\n    }\n}\n\nexport type setUserDataType = ReturnType<typeof setUserData>\nexport type setUserPhotoType = ReturnType<typeof setUserPhoto>\n\nexport function authReducer(state = initialState, action: setUserDataType | setUserPhotoType) {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.data,\n                isAuth: true\n            }\n\n        case SET_USER_PHOTO:\n            return {\n                ...state,\n                ...action.data\n            }\n\n        default:\n            return state\n    }\n}\n\nconst setUserData = (id: number, email: string, login: string) => ({\n    type: SET_USER_DATA,\n    data: {id, email, login}\n} as const)\n\nconst setUserPhoto = (small: string, large: string) => ({\n    type: SET_USER_PHOTO,\n    data: {small, large}\n} as const)\n\nexport const getUserAuthData = () => (dispatch: any) => {\n    authAPI.me().then(response => {\n        if (response.data.resultCode === 0) {\n            let id = response.data.data.id\n            let email = response.data.data.email\n            let login = response.data.data.login\n            dispatch(setUserData(id, email, login))\n        }\n    })\n}\n\nexport const getUserPhoto = (userId: string) => (dispatch: any) => {\n    usersAPI.getUser(userId).then(response => {\n        if (response.data.resultCode === 0) {\n            let small = response.data.photos.small\n            let large = response.data.photos.large\n            dispatch(setUserPhoto(small, large))\n        }\n    })\n}","import React from 'react'\nimport Header from \"./Header\";\nimport {connect} from \"react-redux\";\nimport {AppStateType, photoType} from \"../../redux/redux-store\";\nimport {getUserAuthData, getUserPhoto} from \"../../redux/auth-reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\n\ntype ParamsType = {\n    userId: string\n}\n\ntype mapStateToPropsType = {\n    id: number | null,\n    email: string | null,\n    login: string | null,\n    isAuth: boolean | null,\n    photo: photoType\n}\n\ntype mapDispatchToPropsType = {\n    getUserAuthData: () => void\n    getUserPhoto: (userId: string) => void\n}\n\ntype OwnHeaderContainerType = mapStateToPropsType & mapDispatchToPropsType\ntype HeaderContainerType = RouteComponentProps<ParamsType> & OwnHeaderContainerType\n\n\nclass HeaderContainer extends React.Component<HeaderContainerType> {\n    componentDidMount() {\n        //запрашиваем авторизационные данные\n        this.props.getUserAuthData()\n\n        //запрашиваем фото авторизованного пользователя\n        let userId = this.props.match.params.userId\n        this.props.getUserPhoto(userId)\n    }\n\n    render = () => <Header {...this.props}/>\n}\n\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        id: state.auth.id,\n        email: state.auth.email,\n        login: state.auth.login,\n        isAuth: state.auth.isAuth,\n        photo: state.auth.photo\n    }\n}\n\n\nlet WithUrlUsersDataContainerComponent = withRouter(HeaderContainer)\n\nexport default connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps,\n    {\n        getUserAuthData,\n        getUserPhoto\n    })(WithUrlUsersDataContainerComponent)\n\n","import React from \"react\"\nimport  s from './Login.module.sass'\n\nexport const Login = () => {\n    return (\n        <h1 className={s.h1}>Login</h1>\n    )\n}","import React from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport {Route} from \"react-router-dom\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport {MessagesContainer} from \"./components/Dialogs/Messages/MessagesContainer\";\nimport {DialogsContainer} from \"./components/Dialogs/DialogsContainer\";\nimport {FriendsContainer} from \"./components/Navbar/Friends/FriendsContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport {ProfileContainer} from \"./components/Profile/ProfileContainer\";\nimport ProfileInfoContainer from \"./components/Profile/ProfileInfo/ProfileInfoContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport {Login} from \"./components/Login/Login\";\n\nconst App = () => {\n    return (\n        <div className='app-wrapper'>\n            <header className=\"header\">\n                <HeaderContainer/>\n            </header>\n            <div className=\"app-wrapper-content\">\n\n                <main className=\"content\">\n                    <div className=\"main_content\">\n                        <div className=\"profile_navbar\">\n                            <Route exact path=\"/profile/:userId?\" render={() => <ProfileInfoContainer/>}/>\n                            <Route path=\"/login\" render={() => <Login />}/>\n                            <Navbar/>\n                        </div>\n                        <div className=\"main\">\n                            <Route exact path=\"/profile\" render={() => <ProfileContainer/>}/>\n                            <Route path=\"/dialogs\" render={() => <DialogsContainer/>}/>\n                            <Route path=\"/messages\" render={() => <MessagesContainer/>}/>\n                            <Route path=\"/news\" render={() => <News/>}/>\n                            <Route path=\"/music\" render={() => <Music/>}/>\n                            <Route path=\"/users\" render={() => <UsersContainer/>}/>\n\n                        </div>\n\n                    </div>\n                    <div className=\"main_content_friends\">\n                        Friends\n                    </div>\n                </main>\n            </div>\n            <FriendsContainer/>\n        </div>\n    );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let initialState = {\n    dialogs: [\n        {\n            id: 1,\n            name: \"Человек-1\",\n            lastMessage: \"Привет!\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 2,\n            name: \"Человек-2\",\n            lastMessage: \"Хочу предложить тебе новый способ заработать, сидя на диване\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 3,\n            name: \"Человек-3\",\n            lastMessage: \"Скинь фотки\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 4,\n            name: \"Человек-4\",\n            lastMessage: \"Сотку когда вернешь?\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 5,\n            name: \"Человек-5\",\n            lastMessage: \"Жрать охота\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        }\n    ]\n}\n\nexport function dialogsReducer(state = initialState, action: any) {\n    return state\n}\n","let initialState = {\n    friends: [\n        {\n            id: 1,\n            name: \"Друг-1\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 2,\n            name: \"Друг-2\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 3,\n            name: \"Друг-3\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        }\n    ]\n}\n\nexport const sidebarReducer = (state = initialState, action: any) => {\n    return state\n}","import {applyMiddleware, combineReducers, createStore, Store} from \"redux\";\nimport {profileReducer} from \"./profile-reducer\";\nimport {dialogsReducer} from \"./dialogs-reducer\";\nimport {messageReducer} from \"./message-reducer\";\nimport {sidebarReducer} from \"./sidebar-reducer\";\nimport {usersReducer} from \"./users-reducer\";\nimport {authReducer} from \"./auth-reducer\";\nimport thunkMiddleware from \"redux-thunk\"\n\n\n/*------------------------------------------------------*/\n\nexport type PostType = {\n    id: number\n    message: string\n    like: number\n}\n\nexport type DialogsItemType = {\n    id: number\n    name: string\n    lastMessage: string\n    avatar: string\n}\n\nexport type MessageType = {\n    id: number\n    name: string\n    textMessage: string\n}\nexport type FriendType = {\n    id: number,\n    name: string,\n    avatar: string\n}\n\nexport type UsersLocationType = {\n    city: string\n    country: string\n}\n\nexport type UserType = {\n    id: number\n    name: string\n    status: string\n    photos: {\n        small: string\n        large: string\n    },\n    followed: boolean\n}\n\n\n/*-------------------------------------------------------*/\n/*Типизируем каждую ветку*/\nexport type ProfilePageType = {\n    posts: Array<PostType>\n    newPostText: string,\n    profile: any\n}\n\nexport type DialogsPageType = {\n    dialogs: Array<DialogsItemType>\n}\n\nexport type MessagesPageType = {\n    messages: Array<MessageType>\n    newMessageText: string\n}\n\nexport type SidebarFriendsType = {\n    friends: Array<FriendType>\n}\n\nexport type UsersType = {\n    users: Array<UserType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number | string\n    isFetching: boolean\n    followingInProgress: Array<number>\n}\n\nexport type photoType = {\n    small: string,\n    large: string\n}\n\nexport type authType = {\n    id: number | null,\n    email: string | null,\n    login: string | null,\n    isAuth: boolean | null\n    photo: photoType\n}\n\n\nlet reducers = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    messagesPage: messageReducer,\n    sidebar: sidebarReducer,\n    usersPage: usersReducer,\n    auth: authReducer\n})\n\n//типизируем reducers\nexport type RootReducerType = typeof reducers\n//типизируем state\nexport type AppStateType = ReturnType<RootReducerType>\n\nexport type StoreType = Store<AppStateType>\n/*export type StoreType = Store<AppStateType, actionType>*/\n\n//создаем store\nexport let store: StoreType = createStore(reducers, applyMiddleware(thunkMiddleware));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n/*import ScopedCssBaseline from \"@material-ui/core/ScopedCssBaseline\";*/\n\nimport {store} from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                {/*<ScopedCssBaseline>*/}\n                    <App/>\n                {/*</ScopedCssBaseline>*/}\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__2Whu_\",\"users_list\":\"Users_users_list__3DzG6\",\"user\":\"Users_user__12P5P\",\"user_avatar\":\"Users_user_avatar__1PI_a\",\"avatar\":\"Users_avatar__28Uw_\",\"follow_unfollow_button\":\"Users_follow_unfollow_button__2kgTj\",\"user_info\":\"Users_user_info__jMX1k\",\"user_info_name\":\"Users_user_info_name__YGCc9\",\"user_name\":\"Users_user_name__1Vq5z\",\"users_paginator\":\"Users_users_paginator__tUK27\",\"selectPage\":\"Users_selectPage__1IFpW\",\"page\":\"Users_page__1UlAf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog_window\":\"Messages_dialog_window__NGXtj\",\"dialog_header\":\"Messages_dialog_header__2NTHl\",\"dialog_footer\":\"Messages_dialog_footer__3sNge\",\"button\":\"Messages_button__B4QTR\",\"dialog_footer_textarea\":\"Messages_dialog_footer_textarea__2wUAq\",\"dialog_body\":\"Messages_dialog_body__eTCSO\",\"message_one\":\"Messages_message_one__158ii\",\"message_two\":\"Messages_message_two__1bHxW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile_info\":\"ProfileInfo_profile_info__142Ew\",\"info_name\":\"ProfileInfo_info_name__3FNdF\",\"contact\":\"ProfileInfo_contact__2ZooF\",\"button\":\"ProfileInfo_button__WeC7y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Dialogs_list__2o-TF\",\"item\":\"Dialogs_item__1Rw8z\",\"message\":\"Dialogs_message__1qS-S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2G49n\",\"nav_list\":\"Navbar_nav_list__195P5\",\"nav_item\":\"Navbar_nav_item__l_UkN\",\"nav_item_link\":\"Navbar_nav_item_link__2kja5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__3hM2t\",\"button_block\":\"MyPosts_button_block__awp2T\",\"posts_textarea\":\"MyPosts_posts_textarea__3kZWx\",\"posts_button\":\"MyPosts_posts_button__192L8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post_block\":\"MyPost_post_block__1cDSp\",\"post\":\"MyPost_post__1TfQL\",\"post_text\":\"MyPost_post_text__3GQ1t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"site_name\":\"Header_site_name__1fFFR\",\"login\":\"Header_login__31kC2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friends_block\":\"Friends_friends_block__1T6CQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_profile\":\"Profile_main_profile__2-65N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"h1\":\"Login_h1__3d9UL\"};"],"sourceRoot":""}