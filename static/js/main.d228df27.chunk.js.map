{"version":3,"sources":["assets/image/astronaut.png","assets/image/dialogs.png","assets/image/photo.png","assets/image/news.png","assets/image/setting.png","assets/image/users.png","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","redux/message-reducer.ts","components/Dialogs/Messages/Messages.tsx","components/Dialogs/Messages/MessagesContainer.tsx","components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/Navbar/Friends/FriendsContainer.tsx","components/Navbar/Friends/Friends.tsx","assets/image/ufo-2.png","components/Users/Users.tsx","api/api.ts","redux/users-reducer.ts","assets/image/preloader.svg","components/common/Preloader/Preloader.jsx","redux/profile-reducer.ts","components/Users/UsersContainer.tsx","components/Profile/MyPosts/Post/MyPost.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/ProfileInfo/ProfileInfoContainer.tsx","components/Header/Header.tsx","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","App.tsx","serviceWorker.ts","redux/dialogs-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","index.tsx","components/Navbar/Navbar.module.sass","components/Users/Users.module.sass","components/Dialogs/Messages/Messages.module.sass","components/Dialogs/Dialogs.module.sass","components/Profile/MyPosts/MyPosts.module.sass","components/Profile/MyPosts/Post/MyPost.module.sass","components/Profile/ProfileInfo/ProfileInfo.module.sass","components/Header/Header.module.sass","components/Navbar/Friends/Friends.module.sass","components/Profile/Profile.module.sass"],"names":["Navbar","props","console","log","className","s","nav","nav_list","nav_item","nav_item_link","to","activeClassName","active","src","profile","alt","dialogs","href","photo","news","setting","users","News","Music","ADD_MESSAGE","UPDATE_NEW_MESSAGE_TEXT","initialState","messages","id","name","textMessage","newMessageText","Messages","newMessages","map","m","dialog_body","message_one","message_two","newElement","React","createRef","dialog_window","dialog_header","Button","variant","color","dialog_footer","TextareaAutosize","ref","rows","value","onChange","onChangeMessage","current","aria-label","placeholder","dialog_footer_textarea","fullWidth","onClick","addMessage","button","MessagesContainer","connect","state","messagesPage","dispatch","type","text","word","DialogsItem","link","item","Avatar","avatar","message","user_name","last_message","lastMessage","Dialogs","newData","d","list","DialogsContainer","dialogsPage","FriendsContainer","friends","sidebar","f","Users","pagesCount","Math","ceil","totalUsersCount","pageSize","pages","i","push","users_paginator","p","e","onPageChanged","currentPage","selectPage","page","users_list","u","user","user_avatar","onClickUser","photos","large","button_followed","followed","follow_unfollow_button","disabled","followingInProgress","some","unfollow","follow","user_info","user_info_name","user_status","status","instance","axios","create","withCredentials","baseURL","headers","usersAPI","get","then","response","data","userId","post","delete","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_FOLLOWING_PROGRESS","isFetching","setToggleIsFetching","toggleFollowingProgress","Preloader","preloader","ADD_POST","UPDATE_NEW_POST_TEXT","SET_PROFILE_INFO","posts","like","newPostText","setUserProfile","UsersContainer","pageNumber","getUsers","render","this","Component","usersPage","resultCode","followSuccess","unfollowSuccess","setCurrentPage","totalCount","setUsers","items","MyPost","post_block","FormControlLabel","control","Checkbox","icon","FavoriteBorder","checkedIcon","Favorite","label","post_text","MyPostsContainer","profilePage","addPost","onPostChange","updateNewPostTextAC","newPosts","newPostElement","my_post","posts_block","posts_textarea","button_block","posts_button","Profile","main_profile","ProfileContainer","ProfileInfo","profile_info","width","height","fullName","lookingForAJobDescription","lookingForAJob","contacts","facebook","github","vk","instagram","twitter","website","youtube","mainLink","ProfileInfoContainer","WithUrlDataContainerComponent","withRouter","Header","site_name","login","small","isAuth","SET_USER_DATA","SET_USER_PHOTO","email","HeaderContainer","setUserData","setUserPhoto","auth","App","path","exact","Boolean","window","location","hostname","match","unregister","navigator","serviceWorker","ready","registration","catch","error","reducers","combineReducers","action","filter","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.d228df27.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/astronaut.cbb62ce6.png\";","export default __webpack_public_path__ + \"static/media/dialogs.1a5e5f2e.png\";","export default __webpack_public_path__ + \"static/media/photo.bf857649.png\";","export default __webpack_public_path__ + \"static/media/news.3350a595.png\";","export default __webpack_public_path__ + \"static/media/setting.9ed628b6.png\";","export default __webpack_public_path__ + \"static/media/users.ed5e25fc.png\";","import React from \"react\";\nimport s from \"./Navbar.module.sass\";\nimport {NavLink} from \"react-router-dom\";\nimport profile from \"./../../assets/image/astronaut.png\";\nimport dialogs from \"./../../assets/image/dialogs.png\";\nimport photo from \"./../../assets/image/photo.png\";\nimport news from \"./../../assets/image/news.png\";\nimport setting from \"./../../assets/image/setting.png\";\nimport users from \"./../../assets/image/users.png\";\n\ntype NavbarType = {\n    /*state: SidebarFriendsType*/\n}\n\nconst Navbar: React.FC<NavbarType> = (props) => {\n    console.log(\"navbar\")\n    return (\n        <nav className={s.nav}>\n            <ul className={s.nav_list}>\n                {/*NavLink - не перезагружая страницу, меняем адресную строку*/}\n                <li className={s.nav_item}>\n                    <NavLink className={s.nav_item_link}\n                             to=\"/profile\"\n                             activeClassName={s.active}>\n                        <img src={profile} alt=\"profile\"/>\n                        <span>Profile</span>\n                    </NavLink>\n                </li>\n                <li className={s.nav_item}>\n                    <NavLink className={s.nav_item_link}\n                             to=\"/dialogs\">\n                        <img src={dialogs} alt=\"\"/>\n                        <span>Dialogs</span>\n                    </NavLink>\n                </li>\n                <li className={s.nav_item}>\n                    <NavLink className={s.nav_item_link}\n                             to=\"/news\" href=\"#\">\n                        <img src={photo} alt=\"profile\"/>\n                        <span>Photo</span>\n                    </NavLink>\n                </li>\n                <li className={s.nav_item}>\n                    <NavLink className={s.nav_item_link} to=\"/music\">\n                        <img src={news} alt=\"profile\"/>\n                        <span>News</span>\n                    </NavLink>\n                </li>\n                <li className={s.nav_item}>\n                    <NavLink className={s.nav_item_link}\n                             to=\"/settings\">\n                        <img src={setting} alt=\"profile\"/>\n                        <span>Settings</span>\n                    </NavLink>\n                </li>\n                <li className={s.nav_item}>\n                    <NavLink className={s.nav_item_link}\n                             to=\"/users\">\n                        <img src={users} alt=\"profile\"/>\n                        <span>Users</span>\n                    </NavLink>\n                </li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default Navbar;","import React from \"react\";\nimport s from \"./News.module.sass\";\n\nconst News = () => {\n    return (\n        <div>\n            Dialogs\n        </div>\n    )\n}\n\nexport default News;","import React from \"react\";\nimport s from \"./Music.module.sass\";\n\nconst Music = () => {\n    return (\n        <div>\n            Music\n        </div>\n    )\n}\n\nexport default Music;","export const ADD_MESSAGE = \"ADD_MESSAGE\"\nexport const UPDATE_NEW_MESSAGE_TEXT = \"UPDATE_NEW_MESSAGE_TEXT\"\n\nexport type addMessageACType = ReturnType<typeof addMessageAC>\nexport type updateNewMessageTextACType = ReturnType<typeof updateNewMessageTextAC>\n\nlet initialState = {\n    messages: [\n        {id: 1, name: \"Он\", textMessage: \"Hello\"},\n        {id: 2, name: \"Ты\", textMessage: \"Hello\"},\n        {id: 1, name: \"Он\", textMessage: \"Ты такая хорошая! Ты даже лучше, чем сахар!\"},\n        {id: 2, name: \"Ты\", textMessage: \"Спасибо! Приходи сегодня\"},\n    ],\n\n    newMessageText: \"\"\n}\n\nexport function messageReducer(state = initialState, action: addMessageACType | updateNewMessageTextACType) {\n    switch (action.type) {\n        case ADD_MESSAGE:\n            return {\n                ...state,\n                messages: [...state.messages, {id: 2, name: \"Ты\", textMessage: state.newMessageText}],\n                newMessageText: \"\"\n            };\n\n        case UPDATE_NEW_MESSAGE_TEXT:\n            return {\n                ...state,\n                newMessageText: action.word\n            };\n\n        default:\n            return state\n    }\n}\n\nexport const addMessageAC = () => ({type: ADD_MESSAGE} as const)\nexport const updateNewMessageTextAC = (word: string) => ({type: UPDATE_NEW_MESSAGE_TEXT, word: word} as const)","import React from \"react\";\nimport s from \"./Messages.module.sass\";\nimport {NavLink} from \"react-router-dom\";\nimport Button from '@material-ui/core/Button';\nimport {MessageType} from \"../../../redux/redux-store\";\nimport {TextareaAutosize} from \"@material-ui/core\";\n\ntype MessagesType = {\n    messages: Array<MessageType>\n    addMessage: () => void\n    onChangeMessage: (text: string) => void\n    newMessageText: string\n}\n\nconst Messages: React.FC<MessagesType> = (props) => {\n    let newMessages = props.messages.map(m => <div key={m.id} className={s.dialog_body}>\n        {/*Не охота верстать, сделать потом*/}\n\n        <div className={m.id === 1 ? s.message_one : \"\"}>\n            <div>{m.id === 1 ? m.name : null}</div>\n            <div>{m.id === 1 ? m.textMessage : null}</div>\n        </div>\n        <div className={m.id === 2 ? s.message_two : \"\"}>\n            <div>{m.id === 2 ? m.name : null}</div>\n            <div>{m.id === 2 ? m.textMessage : null}</div>\n        </div>\n\n\n    </div>)\n\n    let newElement = React.createRef<HTMLTextAreaElement>();\n\n    /* let [message, setMessage] = useState()\n     let [change, setChange] = useState()\n */\n    const addMessage = () => {\n        /*setMessage(props.addMessage(change))*/\n        //Чтобы вынести в отдельную переменную, нужно типизировать эту переменную\n        //так как action определяется как {type: string\n        props.addMessage();\n    }\n\n    const onChangeMessage = () => {\n        props.onChangeMessage(newElement.current ? newElement.current.value : \"----\")\n    }\n\n    return (\n        <div className={s.dialog_window}>\n            <div className={s.dialog_header}>\n                <NavLink to=\"/dialogs\">\n                    <Button variant=\"contained\" color=\"default\">Exit</Button>\n                </NavLink>\n                <div>Avatar + name</div>\n            </div>\n            {newMessages}\n            <div className={s.dialog_footer}>\n                <TextareaAutosize ref={newElement}\n                                  rows={5}\n                                  value={props.newMessageText}\n                                  onChange={onChangeMessage}\n                                  aria-label=\"empty textarea\"\n                                  placeholder=\"Empty\"\n                                  className={s.dialog_footer_textarea}\n                />\n                {/*\n                <textarea ref={newElement} value={props.newMessageText} onChange={onChangeMessage} rows={5}></textarea>\n*/}\n                {/*value={message} onChange={(e) => {setChange(e.currentTarget.value)}}*/}\n                <Button\n                    fullWidth={true}\n                    onClick={addMessage}\n                    variant=\"contained\"\n                    color=\"default\"\n                    className={s.button}\n                    /*endIcon={<Icon>send</Icon>}*/\n                >Send\n                </Button>\n                {/*<button onClick={addMessage}>Send</button>*/}\n            </div>\n        </div>\n    )\n}\n\nexport default Messages;","import React from \"react\";\nimport {addMessageAC, updateNewMessageTextAC} from \"../../../redux/message-reducer\";\nimport Messages from \"./Messages\";\nimport {connect} from \"react-redux\";\nimport {AppStateType, MessageType} from \"../../../redux/redux-store\";\nimport {Dispatch} from \"redux\";\n\n\ntype mapStateToPropsType = {\n    messages: Array<MessageType>\n    newMessageText: string\n}\n\ntype mapDispatchToPropsType = {\n    addMessage: () => void\n    onChangeMessage: (text: string) => void\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        messages: state.messagesPage.messages,\n        newMessageText: state.messagesPage.newMessageText\n    }\n}\n\n/*https://stackoverflow.com/questions/49808004/parameter-dispatch-implicitly-has-an-any-type*/\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        addMessage: () => {\n            dispatch(addMessageAC());\n        },\n\n        onChangeMessage: (text: string) => {\n            dispatch(updateNewMessageTextAC(text))\n        }\n    }\n}\n\nexport const MessagesContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(Messages)\n","import {NavLink} from \"react-router-dom\";\nimport s from \"../Dialogs.module.sass\";\nimport React from \"react\";\nimport {Avatar} from \"@material-ui/core\";\nimport {DialogsItemType} from \"../../../redux/redux-store\";\n\n\nexport const DialogsItem: React.FC<DialogsItemType> = (props) => {\n    return (\n        <NavLink className={s.link} to={\"/messages/\" + props.id}>\n            <li className={s.item}>\n                <Avatar alt=\"Remy Sharp\" src={props.avatar} />\n                <div className={s.message}>\n                    <div className={s.user_name}>{props.name}</div>\n                    <div className={s.last_message}>{props.lastMessage}</div>\n                </div>\n            </li>\n        </NavLink>\n    )\n}\n\n\n\n","import React from \"react\";\nimport s from \"./Dialogs.module.sass\";\nimport {DialogsItem} from \"./DialogsItem/DialogsItem\";\nimport {DialogsItemType} from \"../../redux/redux-store\";\n\ntype DialogsType = {\n    dialogs: Array<DialogsItemType>\n}\n\nconst Dialogs: React.FC<DialogsType> = (props) => {\n\n    let newData = props.dialogs.map(d => <DialogsItem key={d.id} id = {d.id} name={d.name} lastMessage={d.lastMessage} avatar={d.avatar}/>)\n\n    return (\n        <ul className={s.list}>\n            {newData}\n        </ul>\n    )\n}\n\nexport default Dialogs;\n","import React from \"react\";\nimport {AppStateType, DialogsItemType} from \"../../redux/redux-store\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\n\n\ntype mapStateToPropsType = {\n    dialogs: Array<DialogsItemType>\n}\n\ntype mapDispatchToPropsType = {\n\n}\n\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        dialogs: state.dialogsPage.dialogs\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n\n    }\n}\n\nexport const DialogsContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(Dialogs)\n","import React from \"react\";\nimport {Friends} from \"./Friends\";\nimport {connect} from \"react-redux\";\nimport {AppStateType, FriendType} from \"../../../redux/redux-store\";\n\n\ntype mapStateToPropsType = {\n    friends: Array<FriendType>\n}\n\ntype mapDispatchToPropsType = {\n\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        friends: state.sidebar.friends\n    }\n}\n\n/*https://stackoverflow.com/questions/49808004/parameter-dispatch-implicitly-has-an-any-type*/\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n\n    }\n}\nexport const FriendsContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(Friends)\n","import React from \"react\";\nimport {FriendType} from \"../../../redux/redux-store\";\nimport {Avatar} from \"@material-ui/core\";\nimport s from \"./Friends.module.sass\";\n/*import { AvatarGroup } from '@material-ui/lab';*/\n\ntype FriendsType = {\n    friends: Array<FriendType>\n}\n\n\nexport const Friends: React.FC<FriendsType> = (props) => {\n\n    let friendsList = props.friends.map(f => <div key={f.id}>\n        <Avatar className={s.avatar} src={f.avatar} alt={f.name}/>\n    </div>)\n\n    return (\n        <div></div>\n        /*<AvatarGroup className={s.friends_block} spacing={0} max={3}>\n            {friendsList}\n        </AvatarGroup>*/\n    )\n}","export default __webpack_public_path__ + \"static/media/ufo-2.3c1ecb26.png\";","import React from 'react'\nimport s from \"./Users.module.sass\"\nimport {UserType} from \"../../redux/redux-store\";\nimport avatar from './../../assets/image/ufo-2.png'\nimport {NavLink} from \"react-router-dom\";\n\ntype UsersType = {\n    users: Array<UserType>\n    follow: (id: number) => void\n    unfollow: (id: number) => void\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number | string\n    onPageChanged: (pageNumber: number) => void\n    onClickUser: (userId: number) => void\n    followingInProgress: Array<number>\n\n    //setTotalUsersCount: (totalCount: number) => void\n    //setUsers: (users: Array<UserType>) => void\n    //setCurrentPage: (pageNumber: number) => void\n}\n\nexport const Users = (props: UsersType) => {\n\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\n    let pages = []\n    for (let i = 1; i < pagesCount; i++) {\n        pages.push(i)\n    }\n\n    return (\n        <div className={s.users}>\n\n            <div className={s.users_paginator}>\n                {pages.map(p => <span onClick={(e) => props.onPageChanged(p)}\n                                      className={props.currentPage === p ? s.selectPage : s.page}>{p}</span>)}\n            </div>\n\n            <div className={s.users_list}>\n                {\n                    props.users.map(u =>\n                        <div key={u.id} className={s.user}>\n\n                            <div className={s.user_avatar}>\n                                <NavLink to={\"/profile/\" + u.id} onClick={() => props.onClickUser(u.id)}>\n                                    <img className={s.avatar}\n                                         src={u.photos.large !== null ? u.photos.large : `${avatar}`}\n                                         alt={u.name}\n                                    />\n                                </NavLink>\n\n                            </div>\n\n                            <div className={s.button_followed}>\n                                {u.followed ?\n                                    <button className={s.follow_unfollow_button}\n                                            disabled={props.followingInProgress.some(id => id === u.id)}\n                                            onClick={() => {\n                                                props.unfollow(u.id)\n                                            }}>\n                                        Unfollow\n                                    </button>\n                                    : <button className={s.follow_unfollow_button}\n                                              disabled={props.followingInProgress.some(id => id === u.id)}\n                                              onClick={() => {\n                                                  props.follow(u.id)\n                                              }}>\n                                        Follow\n                                    </button>\n                                }\n                            </div>\n\n                            <div className={s.user_info}>\n                                <div className={s.user_info_name}>\n                                    <div className={s.user_name}>{u.name}</div>\n                                    <div className={s.user_status}>{u.status}</div>\n                                </div>\n                            </div>\n\n                        </div>\n                    )}\n            </div>\n        </div>\n    )\n}\n\n\nexport default Users\n\n/*export function Users(props: UsersType) {\n\nconst getUsers = () => {\nif (props.users.length === 0) {\naxios.get(\"https://social-network.samuraijs.com/api/1.0/users\").then(response => {\nprops.setUsers(response.data.items)\n})\n\n}\n}\n\nreturn (\n<div className={s.users}>\n<button onClick={getUsers}>get users</button>\n{\nprops.users.map(u =>\n<div key={u.id} className={s.user}>\n<div className={s.user_avatar}>\n<Avatar variant='rounded'\nclassName={s.avatar}\nsrc={u.photos.small !== null ? u.photos.small : `${avatar}`}\nalt={u.name}\n\n/>\n{u.followed ?\n<button className={s.follow_unfollow_button}\nonClick={() => props.unfollow(u.id)}>\nUnfollow\n</button>\n: <button className={s.follow_unfollow_button}\nonClick={() => props.follow(u.id)}>\nFollow\n</button>\n}\n</div>\n<div className={s.user_info}>\n<div className={s.user_info_name}>\n<div className={s.user_name}>{u.name}</div>\n<div className={s.user_status}>{u.status}</div>\n</div>\n</div>\n</div>\n)}\n</div>\n)\n}*/\n\n\n/*123321\nlet palindromeChainLength = function (n) {\n// let newN = String(n).split(\"\")\nlet newN2 = String(n).split(\"\").reverse().join()\nif(n !== newN2) {\nlet sum = n + Number(newN2)\nreturn palindromeChainLength(sum)\n} else {\nreturn n\n}\n};\n\npalindromeChainLength(44)*/\n","import axios from \"axios\";\n\nlet instance = axios.create({\n\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        \"API-KEY\": \"175e24f1-c22d-463c-ba2f-3d45c5594942\"\n    }\n\n})\n\nexport const usersAPI = {\n    getUsers(currentPage: string | number, pageSize: number) {\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data)\n    },\n\n    getUsersPage(pageNumber: string | number, pageSize: number) {\n        return instance.get(`users?page=${pageNumber}&count=${pageSize}`).then(response => response.data)\n    },\n\n    getUser(userId: number) {\n        return instance.get(`profile/${userId}`).then(response => response.data)\n    },\n\n    follow(id: number) {\n        return instance.post(`https://social-network.samuraijs.com/api/1.0/follow/${id}`)\n    },\n\n    unfollow(id: number) {\n        return instance.delete(`https://social-network.samuraijs.com/api/1.0/follow/${id}`)\n    }\n\n}\n","import {UsersType, UserType} from \"./redux-store\";\nimport {usersAPI} from \"../api/api\";\n\nexport const FOLLOW = \"FOLLOW\"\nexport const UNFOLLOW = \"UNFOLLOW\"\nexport const SET_USERS = \"SET_USERS\"\nexport const SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\"\nexport const SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\"\nexport const TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\"\nexport const TOGGLE_FOLLOWING_PROGRESS = \"TOGGLE_FOLLOWING_PROGRESS\"\n\nexport const initialState: UsersType = {\n    users: [],\n    pageSize: 50,\n    totalUsersCount: 0,\n    currentPage: 2,\n    isFetching: false,\n    followingInProgress: []\n}\n\nexport type followACType = ReturnType<typeof followSuccess>\nexport type unfollowACType = ReturnType<typeof unfollowSuccess>\nexport type setUsersACType = ReturnType<typeof setUsers>\nexport type setCurrentPageACType = ReturnType<typeof setCurrentPage>\nexport type setTotalUsersCountACType = ReturnType<typeof setTotalUsersCount>\nexport type toggleIsFetchingACType = ReturnType<typeof setToggleIsFetching>\nexport type toggleFollowingProgressACType = ReturnType<typeof toggleFollowingProgress>\n\nexport type ActionType =\n    followACType\n    | unfollowACType\n    | setUsersACType\n    | setCurrentPageACType\n    | setTotalUsersCountACType\n    | toggleIsFetchingACType\n    | toggleFollowingProgressACType\n\n\nexport function usersReducer(state = initialState, action: ActionType) {\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    return action.id === u.id ? {...u, followed: true} : u\n                })\n            }\n\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    return action.id === u.id ? {...u, followed: false} : u\n                })\n            }\n\n        case SET_USERS:\n            return {\n                ...state,\n                users: action.users\n            }\n\n        case SET_CURRENT_PAGE:\n            return {\n                ...state,\n                currentPage: action.currentPage\n            }\n\n        case SET_TOTAL_USERS_COUNT:\n            return {\n                ...state,\n                totalUsersCount: action.totalCount\n            }\n\n        case TOGGLE_IS_FETCHING:\n            return {\n                ...state,\n                isFetching: action.isFetching\n            }\n\n        case TOGGLE_FOLLOWING_PROGRESS:\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : [...state.followingInProgress.filter(id => id !== action.userId)]\n            }\n        default:\n            return state\n    }\n}\n\nexport const followSuccess = (id: number) => ({\n    type: FOLLOW,\n    id\n} as const)\n\nexport const unfollowSuccess = (id: number) => ({\n    type: UNFOLLOW,\n    id\n} as const)\n\nexport const setUsers = (users: Array<UserType>) => ({\n    type: SET_USERS,\n    users\n} as const)\n\nexport const setCurrentPage = (currentPage: number) => ({\n    type: SET_CURRENT_PAGE,\n    currentPage\n} as const)\n\nexport const setTotalUsersCount = (totalCount: number) => ({\n    type: SET_TOTAL_USERS_COUNT,\n    totalCount\n} as const)\n\nexport const setToggleIsFetching = (isFetching: boolean) => ({\n    type: TOGGLE_IS_FETCHING,\n    isFetching\n} as const)\n\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => ({\n    type: TOGGLE_FOLLOWING_PROGRESS,\n    isFetching,\n    userId\n} as const)\n\nexport const getUsers = (currentPage: number | string, pageSize: number) => (dispatch: any) => {\n    dispatch(setToggleIsFetching(true))\n    usersAPI.getUsers(currentPage, pageSize).then(data => {\n        dispatch(setUsers(data.items))\n        dispatch(setTotalUsersCount(data.totalCount))\n        dispatch(setToggleIsFetching(false))\n    })\n\n\n    /*usersAPI.getUsersPage(currentPage, pageSize).then(data => {\n        dispatch(setUsers(data.items))\n        dispatch(setTotalUsersCount(data.totalCount))\n        dispatch(setToggleIsFetching(false))\n    })*/\n\n    /*usersAPI.getUser(userId).then(data => {\n        dispatch(setUserProfile(data))\n    })*/\n}\n\nexport const follow = (id: number) => (dispatch: any) => {\n    dispatch(toggleFollowingProgress(true, id))\n    usersAPI.follow(id)\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(followSuccess(id))\n            }\n            dispatch(toggleFollowingProgress(false, id))\n        })\n\n}\n\nexport const unfollow = (id: number) => (dispatch: any) => {\n    dispatch(toggleFollowingProgress(true, id))\n    usersAPI.unfollow(id)\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(unfollowSuccess(id))\n            }\n            dispatch(toggleFollowingProgress(false, id))\n        })\n}\n","export default __webpack_public_path__ + \"static/media/preloader.02e8bfc4.svg\";","import React from 'react'\nimport preloader from \"./../../../assets/image/preloader.svg\"\n\nexport const Preloader = () => {\n    return (\n        <>\n            <img src={preloader} alt=\"preloader\"/>\n        </>\n    )\n}","\nconst ADD_POST = \"ADD_POST\"\nconst UPDATE_NEW_POST_TEXT = \"UPDATE_NEW_POST_TEXT\"\nconst SET_PROFILE_INFO = \"SET_PROFILE_INFO\"\n\n\nexport type addPostAC = ReturnType<typeof addPostAC>\nexport type updateNewPostTextAC = ReturnType<typeof updateNewPostTextAC>\nexport type setUserProfileType = ReturnType<typeof setUserProfile>\n\n\nlet initialState = {\n    posts: [\n        {id: 1, message: \"Это передача сдохни или умри!\", like: 25},\n        {id: 2, message: \"Или сдохни\", like: 40},\n        {id: 3, message: \"Или умри\", like: 1}\n    ],\n\n    newPostText: \"\",\n    profile: null\n}\n\nexport function profileReducer(state = initialState, action: addPostAC | updateNewPostTextAC| setUserProfileType) {\n    switch (action.type) {\n        case ADD_POST:\n            return {\n                ...state,\n                posts: [{id: 5, message: state.newPostText, like: 25}, ...state.posts],\n                newPostText: \"\"\n            }\n\n        case UPDATE_NEW_POST_TEXT:\n            return {\n                ...state,\n                newPostText: action.text\n            };\n\n        case SET_PROFILE_INFO:\n            console.log(action.profile)\n            return {\n                ...state,\n                profile: action.profile\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const addPostAC = () => ({type: ADD_POST} as const)\nexport const updateNewPostTextAC = (text: string) => ({type: UPDATE_NEW_POST_TEXT, text: text} as const)\nexport const setUserProfile = (profile: any) => ({\n    type: SET_PROFILE_INFO,\n    profile\n} as const)","import {connect} from \"react-redux\";\nimport Users from \"./Users\";\nimport {AppStateType, UserType} from \"../../redux/redux-store\";\nimport {\n    follow,\n    setCurrentPage,\n    unfollow,\n    toggleFollowingProgress,\n    getUsers\n} from \"../../redux/users-reducer\";\nimport React from \"react\";\nimport {Preloader} from \"../common/Preloader/Preloader\";\nimport {setUserProfile} from \"../../redux/profile-reducer\";\nimport {usersAPI} from \"../../api/api\";\n\n\ntype mapStateToPropsType = {\n    users: Array<UserType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number | string\n    isFetching: boolean\n    followingInProgress: Array<number>\n}\n\ntype mapDispatchToPropsType = {\n    follow: (id: number) => void\n    unfollow: (id: number) => void\n    setCurrentPage: (pageNumber: number) => void\n    setUserProfile: (userId: number) => void\n    getUsers: (currentPage: number | string, pageSize: number) => void\n}\n\ntype UsersContainerType = mapStateToPropsType & mapDispatchToPropsType\n\n\nclass UsersContainer extends React.Component<UsersContainerType> {\n    componentDidMount() {\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\n    }\n\n    onPageChanged = (pageNumber: number) => {\n        this.props.getUsers(pageNumber, this.props.pageSize)\n    }\n\n    onClickUser = (userId: number) => {\n        //let userId = this.props.history.match.params.userId\n        usersAPI.getUser(userId).then(data => {\n            this.props.setUserProfile(data)\n        })\n\n    }\n\n    render = () =>\n        <>\n            {this.props.isFetching ? <Preloader/> : null}\n\n            <Users users={this.props.users}\n                   follow={this.props.follow}\n                   unfollow={this.props.unfollow}\n                   pageSize={this.props.pageSize}\n                   totalUsersCount={this.props.totalUsersCount}\n                   currentPage={this.props.currentPage}\n                   onPageChanged={this.onPageChanged}\n                   onClickUser={this.onClickUser}\n                   followingInProgress={this.props.followingInProgress}\n            />\n        </>\n}\n\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        users: state.usersPage.users,\n        pageSize: state.usersPage.pageSize,\n        totalUsersCount: state.usersPage.totalUsersCount,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching,\n        followingInProgress: state.usersPage.followingInProgress\n    }\n}\n\nexport default connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps,\n    {\n        follow,\n        unfollow,\n        setCurrentPage,\n        setUserProfile,\n        getUsers\n    }\n)(UsersContainer)\n\n\n/*const mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\n    return {\n        follow: (id) => {\n            dispatch(followAC(id))\n        },\n\n        unfollow: (id) => {\n            dispatch(unfollowAC(id))\n        },\n\n        setUsers: (users) => {\n            dispatch(setUsersAC(users))\n        },\n\n        setCurrentPage: (pageNumber) => {\n            dispatch(setCurrentPageAC(pageNumber))\n        },\n\n        setTotalUsersCount: (totalCount: number) => {\n            dispatch(setTotalUsersCountAC(totalCount))\n        },\n\n        setToggleIsFetching: (isFetching: boolean) => {\n            dispatch(toggleIsFetchingAC(isFetching))\n        }\n    }\n}*/","import React from \"react\";\nimport s from \"./MyPost.module.sass\";\nimport {PostType} from \"../../../../redux/redux-store\";\nimport {Avatar, Checkbox, FormControlLabel} from \"@material-ui/core\";\nimport {Favorite, FavoriteBorder} from \"@material-ui/icons\";\n\n\nconst MyPost: React.FC<PostType> = (props) => {\n\n    return (\n        <div className={s.post_block}>\n            <div className={s.post}>\n                <Avatar src=\"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\" alt=\"Аватарка\"/>\n                <FormControlLabel control={<Checkbox\n                    icon={<FavoriteBorder/>}\n                    checkedIcon={<Favorite/>}\n                    name=\"checkedH\"/>}\n                                  label={props.like}\n\n                />\n            </div>\n            <div className={s.post_text}>{props.message}</div>\n        </div>\n    )\n}\n\nexport default MyPost;","import React from \"react\";\nimport {addPostAC, updateNewPostTextAC} from \"../../../redux/profile-reducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType, PostType} from \"../../../redux/redux-store\";\nimport {Dispatch} from \"redux\";\n\n\ntype mapStateToPropsType = {\n    posts: Array<PostType>\n    newPostText: string\n}\n\ntype mapDispatchToPropsType = {\n    addPost: () => void\n    onPostChange: (text: string) => void\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        addPost: () => {\n            dispatch(addPostAC());\n        },\n\n        onPostChange: (text: string) => {\n            dispatch(updateNewPostTextAC(text));\n        }\n    }\n}\n\nexport const MyPostsContainer = connect<mapStateToPropsType,mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from \"react\";\nimport MyPost from \"./Post/MyPost\";\nimport s from \"./MyPosts.module.sass\"\nimport {TextareaAutosize} from \"@material-ui/core\";\nimport {PostType} from \"../../../redux/redux-store\";\n\n\nexport type MyPostsType = {\n    posts: Array<PostType>\n    onPostChange: (text: string) => void\n    addPost: () => void\n    newPostText: string\n}\n\n\nexport const MyPosts: React.FC<MyPostsType> = (props) => {\n    let newPosts = props.posts.map(p => <MyPost key={p.id} id={p.id} message={p.message} like={p.like}/>)\n    /*Создаем ссылку на какой-то элемент из jsx*/\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\n    /*let [post, setPost] = useState()\n    let [changePost, setChangePost] = useState()*/\n    let addPost = () => {\n        /*setPost(props.addPost(changePost))*/\n        props.addPost();\n    }\n\n    let onPostChange = () => {\n        /*if (newPostElement.current) {\n            props.updateNewPostText(newPostElement.current.value)\n        }*/\n        /*newPostElement.current && props.updateNewPostText(newPostElement.current.value)*/\n        props.onPostChange(newPostElement.current ? newPostElement.current.value : \"----\")\n    }\n\n    return (\n        <div className={s.my_post}>\n            <div className={s.posts_block}>\n                <div className={s.posts}>\n                    <TextareaAutosize ref={newPostElement}\n                                      rows={5}\n                                      value={props.newPostText}\n                                      onChange={onPostChange}\n                                      aria-label=\"empty textarea\"\n                                      placeholder=\"Empty\"\n                                      className={s.posts_textarea}\n                    />\n                    <div className={s.button_block}>\n                        <button className={s.posts_button} onClick={addPost}>Add post</button>\n                    </div>\n                </div>\n                <div>\n                    {newPosts}\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\";\nimport s from \"./Profile.module.sass\";\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\n\n/*<div className=\"Photo - main_photo\">\n    <div className=\"Photo-Profile\"></div>\n    <div className=\"Меню-профайл\"></div>\n</div>\n<div className=\"ыы\"></div>\n<div className=\"ввы\"></div>\n<div className=\"ыыы\"></div>*/\n\nexport const Profile = () => {\n    return (\n        <main className={s.main_profile}>\n            <MyPostsContainer/>\n        </main>\n    )\n}\n","import React from \"react\";\nimport s from \"./Profile.module.sass\";\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {Profile} from \"./Profile\";\n\n/*<div className=\"Photo - main_photo\">\n    <div className=\"Photo-Profile\"></div>\n    <div className=\"Меню-профайл\"></div>\n</div>\n<div className=\"ыы\"></div>\n<div className=\"ввы\"></div>\n<div className=\"ыыы\"></div>*/\n\nexport class ProfileContainer extends React.Component<any, any>{\n    render() {\n        return (\n            <Profile/>\n        )\n    }\n\n}\n","import s from \"./ProfileInfo.module.sass\";\nimport React from \"react\";\nimport {Preloader} from \"../../common/Preloader/Preloader\";\n\ntype ProfileInfoType = {\n    profile: any\n}\n\nexport const ProfileInfo = (props: ProfileInfoType) => {\n    console.log(props)\n    if (!props.profile) return <Preloader/>\n\n    return (\n        <div className={s.profile_info}>\n            <img src={props.profile.photos.large} alt=\"\" width=\"180\" height=\"180\"/>\n            <div>{props.profile.fullName}</div>\n            <div>lookingForAJobDescription: {props.profile.lookingForAJobDescription}</div>\n            <div>lookingForAJob: {props.profile.lookingForAJob}</div>\n            <div>contacts:\n                <div>{props.profile.contacts.facebook}</div>\n                <div>{props.profile.contacts.github}</div>\n                <div>{props.profile.contacts.vk}</div>\n                <div>{props.profile.contacts.instagram}</div>\n                <div>{props.profile.contacts.twitter}</div>\n                <div>{props.profile.contacts.website}</div>\n                <div>{props.profile.contacts.youtube}</div>\n                <div>{props.profile.contacts.mainLink}</div>\n            </div>\n            <button className={s.button}>Dialog</button>\n            <button className={s.button}>Follow</button>\n        </div>\n\n    )\n}","import React from \"react\";\nimport axios from \"axios\";\nimport {ProfileInfo} from \"./ProfileInfo\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/redux-store\";\nimport {setUserProfile} from \"../../../redux/profile-reducer\";\nimport {withRouter} from \"react-router-dom\";\n\n\nclass ProfileInfoContainer extends React.Component<ProfileInfoContainerType> {\n\n    render() {\n        return (\n\n            <ProfileInfo {...this.props} profile={this.props.profile}/>\n        )\n    }\n}\n\ntype mapStateToPropsType = {\n    profile: any\n}\n\ntype mapDispatchToPropsType = {\n    setUserProfile: (profile: any) => void\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n\n    return {\n        profile: state.profilePage.profile\n    }\n}\n\ntype ProfileInfoContainerType = mapStateToPropsType & mapDispatchToPropsType\n\n//@ts-ignore\nlet WithUrlDataContainerComponent = withRouter(ProfileInfoContainer)\n\nexport default connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {setUserProfile})(WithUrlDataContainerComponent)\n","import React from \"react\";\nimport s from \"./Header.module.sass\";\nimport {NavLink} from \"react-router-dom\";\nimport {authType} from \"../../redux/redux-store\";\nimport avatar from \"./../../assets/image/ufo-2.png\"\n\nconst Header = (props: authType) => {\n    console.log(props)\n    return (\n        <>\n            <div className={s.site_name}>Spacebook</div>\n            <div className={s.login}>\n                {props.photo.small === \"\"\n                    ? <img src={avatar} width=\"40px\" height=\"40px\" alt=\"avatar\"/>\n                    : <img src={props.photo.small} width=\"40px\" height=\"40px\" alt=\"avatar\"/>}\n\n                {props.isAuth ? props.login : <NavLink to={'/login'}>Login</NavLink>}\n            </div>\n        </>\n    )\n}\n\nexport default Header;","import {authType} from \"./redux-store\";\n\nexport const SET_USER_DATA = 'SET_USER_DATA'\nexport const SET_USER_PHOTO = 'SET_USER_PHOTO'\n\n\nexport const initialState: authType = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    photo: {\n        small: \"\",\n        large: \"\"\n    }\n}\n\nexport type setUserDataType = ReturnType<typeof setUserData>\nexport type setUserPhotoType = ReturnType<typeof setUserPhoto>\n\nexport function authReducer(state = initialState, action: setUserDataType | setUserPhotoType) {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.data,\n                isAuth: true\n            }\n\n        case SET_USER_PHOTO:\n            return {\n                ...state,\n                ...action.data\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const setUserData = (id: number, email: string, login: string) => ({\n    type: SET_USER_DATA,\n    data: {id, email, login}\n} as const)\n\nexport const setUserPhoto = (small: string, large: string) => ({\n    type: SET_USER_PHOTO,\n    data: {small, large}\n} as const)","import React from 'react'\nimport Header from \"./Header\";\nimport {connect} from \"react-redux\";\nimport axios from \"axios\";\nimport {AppStateType, photoType} from \"../../redux/redux-store\";\nimport {setUserData, setUserPhoto} from \"../../redux/auth-reducer\";\n\n\ntype mapStateToPropsType = {\n    id: number | null,\n    email: string | null,\n    login: string | null,\n    isAuth: boolean | null,\n    photo: photoType\n}\n\ntype mapDispatchToPropsType = {\n    setUserData: (id: number, email: string, login: string) => void\n    setUserPhoto: (small: string, large: string) => void\n}\n\ntype HeaderContainerType = mapStateToPropsType & mapDispatchToPropsType\n\n\nclass HeaderContainer extends React.Component<HeaderContainerType> {\n    componentDidMount() {\n        axios.get(`https://social-network.samuraijs.com/api/1.0/auth/me`, {\n            //отправляем куки\n            withCredentials: true\n        }).then(response => {\n            if (response.data.resultCode === 0) {\n                let id = response.data.data.id\n                let email = response.data.data.email\n                let login = response.data.data.login\n                this.props.setUserData(id, email, login)\n            }\n        })\n\n        axios.get(`https://social-network.samuraijs.com/api/1.0/profile/photo`, {\n            //отправляем куки\n            withCredentials: true\n        }).then(response => {\n            if (response.data.resultCode === 0) {\n                let small = response.data.data.small\n                let large = response.data.data.large\n                this.props.setUserPhoto(small, large)\n            }\n        })\n    }\n\n    render = () => <Header {...this.props}/>\n}\n\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        id: state.auth.id,\n        email: state.auth.email,\n        login: state.auth.login,\n        isAuth: state.auth.isAuth,\n        photo: state.auth.photo\n    }\n}\n\n\nexport default connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {setUserData, setUserPhoto})(HeaderContainer)\n\n","import React from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport {Route} from \"react-router-dom\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport {MessagesContainer} from \"./components/Dialogs/Messages/MessagesContainer\";\nimport {DialogsContainer} from \"./components/Dialogs/DialogsContainer\";\nimport {FriendsContainer} from \"./components/Navbar/Friends/FriendsContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport {ProfileContainer} from \"./components/Profile/ProfileContainer\";\nimport ProfileInfoContainer from \"./components/Profile/ProfileInfo/ProfileInfoContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\n//import {ProfileInfoContainer} from \"./components/Profile/ProfileInfo/ProfileInfoContainer\";\n\nconst App = () => {\n    return (\n        <div className='app-wrapper'>\n            <header className=\"header\">\n                <HeaderContainer/>\n            </header>\n            <div className=\"app-wrapper-content\">\n\n                <main className=\"content\">\n                    <div className=\"main_content\">\n                        <div className=\"profile_navbar\">\n                            <Route path=\"/\" render={() => <ProfileInfoContainer/>}/>\n                            <Navbar/>\n                        </div>\n                        <div className=\"main\">\n                            <Route path=\"/profile\" render={() => <ProfileContainer/>}/>\n                            <Route path=\"/dialogs\" render={() => <DialogsContainer/>}/>\n                            <Route path=\"/messages\" render={() => <MessagesContainer/>}/>\n                            <Route exact path=\"/news\" render={() => <News/>}/>\n                            <Route path=\"/music\" render={() => <Music/>}/>\n                            <Route path=\"/users:userId?\" render={() => <UsersContainer/>}/>\n                        </div>\n\n                    </div>\n                    <div className=\"main_content_friends\">\n                        Friends\n                    </div>\n                </main>\n            </div>\n            <FriendsContainer/>\n        </div>\n    );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let initialState = {\n    dialogs: [\n        {\n            id: 1,\n            name: \"Человек-1\",\n            lastMessage: \"Привет!\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 2,\n            name: \"Человек-2\",\n            lastMessage: \"Хочу предложить тебе новый способ заработать, сидя на диване\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 3,\n            name: \"Человек-3\",\n            lastMessage: \"Скинь фотки\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 4,\n            name: \"Человек-4\",\n            lastMessage: \"Сотку когда вернешь?\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 5,\n            name: \"Человек-5\",\n            lastMessage: \"Жрать охота\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        }\n    ]\n}\n\nexport function dialogsReducer(state = initialState, action: any) {\n    return state\n}\n","let initialState = {\n    friends: [\n        {\n            id: 1,\n            name: \"Друг-1\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 2,\n            name: \"Друг-2\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        },\n        {\n            id: 3,\n            name: \"Друг-3\",\n            avatar: \"https://www.meme-arsenal.com/memes/3736fb7f61101f1468bcc568ce13dd71.jpg\"\n        }\n    ]\n}\n\nexport const sidebarReducer = (state = initialState, action: any) => {\n    return state\n}","import {applyMiddleware, combineReducers, createStore, Store} from \"redux\";\nimport {profileReducer} from \"./profile-reducer\";\nimport {dialogsReducer} from \"./dialogs-reducer\";\nimport {messageReducer} from \"./message-reducer\";\nimport {sidebarReducer} from \"./sidebar-reducer\";\nimport {usersReducer} from \"./users-reducer\";\nimport {authReducer} from \"./auth-reducer\";\nimport thunkMiddleware from \"redux-thunk\"\n\n\n/*------------------------------------------------------*/\n\nexport type PostType = {\n    id: number\n    message: string\n    like: number\n}\n\nexport type DialogsItemType = {\n    id: number\n    name: string\n    lastMessage: string\n    avatar: string\n}\n\nexport type MessageType = {\n    id: number\n    name: string\n    textMessage: string\n}\nexport type FriendType = {\n    id: number,\n    name: string,\n    avatar: string\n}\n\nexport type UsersLocationType = {\n    city: string\n    country: string\n}\n\nexport type UserType = {\n    id: number\n    name: string\n    status: string\n    photos: {\n        small: string\n        large: string\n    },\n    followed: boolean\n}\n\n\n/*-------------------------------------------------------*/\n/*Типизируем каждую ветку*/\nexport type ProfilePageType = {\n    posts: Array<PostType>\n    newPostText: string,\n    profile: any\n}\n\nexport type DialogsPageType = {\n    dialogs: Array<DialogsItemType>\n}\n\nexport type MessagesPageType = {\n    messages: Array<MessageType>\n    newMessageText: string\n}\n\nexport type SidebarFriendsType = {\n    friends: Array<FriendType>\n}\n\nexport type UsersType = {\n    users: Array<UserType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number | string\n    isFetching: boolean\n    followingInProgress: Array<number>\n}\n\nexport type photoType = {\n    small: string,\n    large: string\n}\n\nexport type authType = {\n    id: number | null,\n    email: string | null,\n    login: string | null,\n    isAuth: boolean | null\n    photo: photoType\n}\n\n\nlet reducers = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    messagesPage: messageReducer,\n    sidebar: sidebarReducer,\n    usersPage: usersReducer,\n    auth: authReducer\n})\n\n//типизируем reducers\nexport type RootReducerType = typeof reducers\n//типизируем state\nexport type AppStateType = ReturnType<RootReducerType>\n\nexport type StoreType = Store<AppStateType>\n/*export type StoreType = Store<AppStateType, actionType>*/\n\n//создаем store\nexport let store: StoreType = createStore(reducers, applyMiddleware(thunkMiddleware));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n/*import ScopedCssBaseline from \"@material-ui/core/ScopedCssBaseline\";*/\n\nimport {store} from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                {/*<ScopedCssBaseline>*/}\n                    <App/>\n                {/*</ScopedCssBaseline>*/}\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2G49n\",\"nav_list\":\"Navbar_nav_list__195P5\",\"nav_item\":\"Navbar_nav_item__l_UkN\",\"nav_item_link\":\"Navbar_nav_item_link__2kja5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__2Whu_\",\"users_list\":\"Users_users_list__3DzG6\",\"user\":\"Users_user__12P5P\",\"user_avatar\":\"Users_user_avatar__1PI_a\",\"avatar\":\"Users_avatar__28Uw_\",\"follow_unfollow_button\":\"Users_follow_unfollow_button__2kgTj\",\"user_info\":\"Users_user_info__jMX1k\",\"user_info_name\":\"Users_user_info_name__YGCc9\",\"user_name\":\"Users_user_name__1Vq5z\",\"users_paginator\":\"Users_users_paginator__tUK27\",\"selectPage\":\"Users_selectPage__1IFpW\",\"page\":\"Users_page__1UlAf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog_window\":\"Messages_dialog_window__NGXtj\",\"dialog_header\":\"Messages_dialog_header__2NTHl\",\"dialog_footer\":\"Messages_dialog_footer__3sNge\",\"button\":\"Messages_button__B4QTR\",\"dialog_footer_textarea\":\"Messages_dialog_footer_textarea__2wUAq\",\"dialog_body\":\"Messages_dialog_body__eTCSO\",\"message_one\":\"Messages_message_one__158ii\",\"message_two\":\"Messages_message_two__1bHxW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Dialogs_list__2o-TF\",\"item\":\"Dialogs_item__1Rw8z\",\"message\":\"Dialogs_message__1qS-S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__3hM2t\",\"button_block\":\"MyPosts_button_block__awp2T\",\"posts_textarea\":\"MyPosts_posts_textarea__3kZWx\",\"posts_button\":\"MyPosts_posts_button__192L8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post_block\":\"MyPost_post_block__1cDSp\",\"post\":\"MyPost_post__1TfQL\",\"post_text\":\"MyPost_post_text__3GQ1t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile_info\":\"ProfileInfo_profile_info__142Ew\",\"button\":\"ProfileInfo_button__WeC7y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"site_name\":\"Header_site_name__1fFFR\",\"login\":\"Header_login__31kC2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friends_block\":\"Friends_friends_block__1T6CQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_profile\":\"Profile_main_profile__2-65N\"};"],"sourceRoot":""}